
MavlinkPassthrough.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c6c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e20  08003e20  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e28  08003e28  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003e28  08003e28  00013e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  20000078  08003eb0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc0  08003eb0  00020dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001331d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b40  00000000  00000000  000333c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00035f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000860  00000000  00000000  00036858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002239f  00000000  00000000  000370b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001950f  00000000  00000000  00059457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5022  00000000  00000000  00072966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157988  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  001579d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000078 	.word	0x20000078
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003de8 	.word	0x08003de8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000007c 	.word	0x2000007c
 80001d0:	08003de8 	.word	0x08003de8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN14CircularBufferC1EPhi>:
    return 1;

}


CircularBuffer::CircularBuffer(uint8_t* buf, int size) {
 80004d8:	b480      	push	{r7}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2200      	movs	r2, #0
 80004ee:	60da      	str	r2, [r3, #12]
    this->buf = buf;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	68ba      	ldr	r2, [r7, #8]
 80004f4:	601a      	str	r2, [r3, #0]
    this->size = size;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	605a      	str	r2, [r3, #4]
}
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	4618      	mov	r0, r3
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr

0800050a <_ZN14CircularBuffer5writeEh>:

bool CircularBuffer::hasSpace() {
    return !((writePtr % size == readPtr % size) && writePtr != readPtr);
}

uint8_t CircularBuffer::write(uint8_t data) {
 800050a:	b480      	push	{r7}
 800050c:	b083      	sub	sp, #12
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	460b      	mov	r3, r1
 8000514:	70fb      	strb	r3, [r7, #3]
    buf[writePtr % size] = data;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6819      	ldr	r1, [r3, #0]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	6852      	ldr	r2, [r2, #4]
 8000522:	fb93 f0f2 	sdiv	r0, r3, r2
 8000526:	fb00 f202 	mul.w	r2, r0, r2
 800052a:	1a9b      	subs	r3, r3, r2
 800052c:	440b      	add	r3, r1
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	701a      	strb	r2, [r3, #0]
    this->writePtr++;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	609a      	str	r2, [r3, #8]
    return 1;
 800053c:	2301      	movs	r3, #1
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <_Z41__static_initialization_and_destruction_0ii>:

MAVLink drone_mavlink_instance(drone_mavlink_uart);
MAVLink* drone_mavlink = &drone_mavlink_instance;

MAVLink antenna_mavlink_instance(antenna_mavlink_uart);
MAVLink* antenna_mavlink = &antenna_mavlink_instance;
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d10c      	bne.n	8000576 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000562:	4293      	cmp	r3, r2
 8000564:	d107      	bne.n	8000576 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MAVLink drone_mavlink_instance(drone_mavlink_uart);
 8000566:	490d      	ldr	r1, [pc, #52]	; (800059c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800056a:	f000 f82f 	bl	80005cc <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
MAVLink antenna_mavlink_instance(antenna_mavlink_uart);
 800056e:	490d      	ldr	r1, [pc, #52]	; (80005a4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000572:	f000 f82b 	bl	80005cc <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d10a      	bne.n	8000592 <_Z41__static_initialization_and_destruction_0ii+0x46>
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000582:	4293      	cmp	r3, r2
 8000584:	d105      	bne.n	8000592 <_Z41__static_initialization_and_destruction_0ii+0x46>
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000588:	f000 f84b 	bl	8000622 <_ZN7MAVLinkD1Ev>
MAVLink drone_mavlink_instance(drone_mavlink_uart);
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800058e:	f000 f848 	bl	8000622 <_ZN7MAVLinkD1Ev>
MAVLink* antenna_mavlink = &antenna_mavlink_instance;
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000c60 	.word	0x20000c60
 80005a0:	20000094 	.word	0x20000094
 80005a4:	20000ca4 	.word	0x20000ca4
 80005a8:	20000678 	.word	0x20000678

080005ac <_GLOBAL__sub_I_drone_mavlink_instance>:
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff ffc9 	bl	800054c <_Z41__static_initialization_and_destruction_0ii>
 80005ba:	bd80      	pop	{r7, pc}

080005bc <_GLOBAL__sub_D_drone_mavlink_instance>:
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
 80005c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005c4:	2000      	movs	r0, #0
 80005c6:	f7ff ffc1 	bl	800054c <_Z41__static_initialization_and_destruction_0ii>
 80005ca:	bd80      	pop	{r7, pc}

080005cc <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>:
 *
 */

#include "../Inc/SSM_D_MAVLink.hpp"

MAVLink::MAVLink(UART_HandleTypeDef* uart_handle) : uart_(uart_handle)
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	683a      	ldr	r2, [r7, #0]
 80005da:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
{

    rx_circular_buffer_ = new CircularBuffer(rx_circular_buffer_ptr_, 1000);
 80005de:	2010      	movs	r0, #16
 80005e0:	f003 fa5a 	bl	8003a98 <_Znwj>
 80005e4:	4603      	mov	r3, r0
 80005e6:	461c      	mov	r4, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005ee:	4619      	mov	r1, r3
 80005f0:	4620      	mov	r0, r4
 80005f2:	f7ff ff71 	bl	80004d8 <_ZN14CircularBufferC1EPhi>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f8c3 43e8 	str.w	r4, [r3, #1000]	; 0x3e8

    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8000606:	da07      	bge.n	8000618 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x4c>
        raw_rx_msg_[MAVLINK_MAX_PACKET_LEN] = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	3301      	adds	r3, #1
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	e7f3      	b.n	8000600 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x34>
    }
}
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bd90      	pop	{r4, r7, pc}

08000622 <_ZN7MAVLinkD1Ev>:

MAVLink::~MAVLink(){
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
    delete rx_circular_buffer_;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d003      	beq.n	800063c <_ZN7MAVLinkD1Ev+0x1a>
 8000634:	2110      	movs	r1, #16
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fa2c 	bl	8003a94 <_ZdlPvj>
}
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_UARTEx_RxEventCallback>:

#include "SSM_D_MAVLink.hpp"
#include "../Inc/CommonDataTypes.hpp"

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
    

    if(huart == drone_mavlink_uart){
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	4a30      	ldr	r2, [pc, #192]	; (8000718 <HAL_UARTEx_RxEventCallback+0xd0>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d12a      	bne.n	80006b2 <HAL_UARTEx_RxEventCallback+0x6a>

        for (uint16_t i = 0; i < size; i++)
 800065c:	2300      	movs	r3, #0
 800065e:	81fb      	strh	r3, [r7, #14]
 8000660:	89fa      	ldrh	r2, [r7, #14]
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	429a      	cmp	r2, r3
 8000666:	d210      	bcs.n	800068a <HAL_UARTEx_RxEventCallback+0x42>
        {
            drone_mavlink->rx_circular_buffer_->write(drone_mavlink->raw_rx_msg_[i]);
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <HAL_UARTEx_RxEventCallback+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8000670:	4b2a      	ldr	r3, [pc, #168]	; (800071c <HAL_UARTEx_RxEventCallback+0xd4>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	89fb      	ldrh	r3, [r7, #14]
 8000676:	4413      	add	r3, r2
 8000678:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 800067c:	4619      	mov	r1, r3
 800067e:	f7ff ff44 	bl	800050a <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	3301      	adds	r3, #1
 8000686:	81fb      	strh	r3, [r7, #14]
 8000688:	e7ea      	b.n	8000660 <HAL_UARTEx_RxEventCallback+0x18>
        }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, drone_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <HAL_UARTEx_RxEventCallback+0xd4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000692:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000696:	4619      	mov	r1, r3
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f002 f927 	bl	80028ec <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f022 0208 	bic.w	r2, r2, #8
 80006b0:	601a      	str	r2, [r3, #0]
    }

    if(huart == antenna_mavlink_uart){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <HAL_UARTEx_RxEventCallback+0xd8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d12a      	bne.n	8000710 <HAL_UARTEx_RxEventCallback+0xc8>
        for (uint16_t i = 0; i < size; i++)
 80006ba:	2300      	movs	r3, #0
 80006bc:	81bb      	strh	r3, [r7, #12]
 80006be:	89ba      	ldrh	r2, [r7, #12]
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d210      	bcs.n	80006e8 <HAL_UARTEx_RxEventCallback+0xa0>
        {
            antenna_mavlink->rx_circular_buffer_->write(antenna_mavlink->raw_rx_msg_[i]);
 80006c6:	4b17      	ldr	r3, [pc, #92]	; (8000724 <HAL_UARTEx_RxEventCallback+0xdc>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_UARTEx_RxEventCallback+0xdc>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	89bb      	ldrh	r3, [r7, #12]
 80006d4:	4413      	add	r3, r2
 80006d6:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 80006da:	4619      	mov	r1, r3
 80006dc:	f7ff ff15 	bl	800050a <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 80006e0:	89bb      	ldrh	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	81bb      	strh	r3, [r7, #12]
 80006e6:	e7ea      	b.n	80006be <HAL_UARTEx_RxEventCallback+0x76>
        }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <HAL_UARTEx_RxEventCallback+0xdc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80006f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f002 f8f8 	bl	80028ec <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f022 0208 	bic.w	r2, r2, #8
 800070e:	601a      	str	r2, [r3, #0]
    }
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000c60 	.word	0x20000c60
 800071c:	20000000 	.word	0x20000000
 8000720:	20000ca4 	.word	0x20000ca4
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_UART_RxCpltCallback>:



 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
    if(huart == drone_mavlink_uart){
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4a30      	ldr	r2, [pc, #192]	; (80007f4 <HAL_UART_RxCpltCallback+0xcc>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d12a      	bne.n	800078e <HAL_UART_RxCpltCallback+0x66>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 8000738:	2300      	movs	r3, #0
 800073a:	81fb      	strh	r3, [r7, #14]
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000742:	d210      	bcs.n	8000766 <HAL_UART_RxCpltCallback+0x3e>
        {
            antenna_mavlink->rx_circular_buffer_->write(antenna_mavlink->raw_rx_msg_[i]);
 8000744:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <HAL_UART_RxCpltCallback+0xd0>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 800074c:	4b2a      	ldr	r3, [pc, #168]	; (80007f8 <HAL_UART_RxCpltCallback+0xd0>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	4413      	add	r3, r2
 8000754:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8000758:	4619      	mov	r1, r3
 800075a:	f7ff fed6 	bl	800050a <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 800075e:	89fb      	ldrh	r3, [r7, #14]
 8000760:	3301      	adds	r3, #1
 8000762:	81fb      	strh	r3, [r7, #14]
 8000764:	e7ea      	b.n	800073c <HAL_UART_RxCpltCallback+0x14>
        }

        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 8000766:	4b24      	ldr	r3, [pc, #144]	; (80007f8 <HAL_UART_RxCpltCallback+0xd0>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800076e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000772:	4619      	mov	r1, r3
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f002 f8b9 	bl	80028ec <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f022 0208 	bic.w	r2, r2, #8
 800078c:	601a      	str	r2, [r3, #0]
    }

    if(huart == antenna_mavlink_uart){
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <HAL_UART_RxCpltCallback+0xd4>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d12a      	bne.n	80007ec <HAL_UART_RxCpltCallback+0xc4>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 8000796:	2300      	movs	r3, #0
 8000798:	81bb      	strh	r3, [r7, #12]
 800079a:	89bb      	ldrh	r3, [r7, #12]
 800079c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80007a0:	d210      	bcs.n	80007c4 <HAL_UART_RxCpltCallback+0x9c>
        {
            antenna_mavlink->rx_circular_buffer_->write(antenna_mavlink->raw_rx_msg_[i]);
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <HAL_UART_RxCpltCallback+0xd0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 80007aa:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <HAL_UART_RxCpltCallback+0xd0>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	89bb      	ldrh	r3, [r7, #12]
 80007b0:	4413      	add	r3, r2
 80007b2:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 80007b6:	4619      	mov	r1, r3
 80007b8:	f7ff fea7 	bl	800050a <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 80007bc:	89bb      	ldrh	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	81bb      	strh	r3, [r7, #12]
 80007c2:	e7ea      	b.n	800079a <HAL_UART_RxCpltCallback+0x72>
        }

        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 80007c4:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_UART_RxCpltCallback+0xd0>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80007cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f002 f88a 	bl	80028ec <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f022 0208 	bic.w	r2, r2, #8
 80007ea:	601a      	str	r2, [r3, #0]
    }

 }
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000c60 	.word	0x20000c60
 80007f8:	20000004 	.word	0x20000004
 80007fc:	20000ca4 	.word	0x20000ca4

08000800 <HAL_UART_ErrorCallback>:

 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    if(huart == drone_mavlink_uart){
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <HAL_UART_ErrorCallback+0x54>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d10c      	bne.n	800082a <HAL_UART_ErrorCallback+0x2a>
        HAL_UART_DMAStop(huart);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f001 ffec 	bl	80027ee <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, drone_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <HAL_UART_ErrorCallback+0x58>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 800081e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000822:	4619      	mov	r1, r3
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f002 f861 	bl	80028ec <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    if(huart == antenna_mavlink_uart){
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <HAL_UART_ErrorCallback+0x5c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d10c      	bne.n	800084c <HAL_UART_ErrorCallback+0x4c>
        HAL_UART_DMAStop(huart);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f001 ffdb 	bl	80027ee <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_UART_ErrorCallback+0x60>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8000840:	f44f 728c 	mov.w	r2, #280	; 0x118
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f002 f850 	bl	80028ec <HAL_UARTEx_ReceiveToIdle_DMA>
    }

 }
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000c60 	.word	0x20000c60
 8000858:	20000000 	.word	0x20000000
 800085c:	20000ca4 	.word	0x20000ca4
 8000860:	20000004 	.word	0x20000004

08000864 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b17      	ldr	r3, [pc, #92]	; (80008cc <MX_DMA_Init+0x68>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a16      	ldr	r2, [pc, #88]	; (80008cc <MX_DMA_Init+0x68>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b14      	ldr	r3, [pc, #80]	; (80008cc <MX_DMA_Init+0x68>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_DMA_Init+0x68>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a0f      	ldr	r2, [pc, #60]	; (80008cc <MX_DMA_Init+0x68>)
 8000890:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <MX_DMA_Init+0x68>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	2010      	movs	r0, #16
 80008a8:	f000 fcb5 	bl	8001216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008ac:	2010      	movs	r0, #16
 80008ae:	f000 fcce 	bl	800124e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2039      	movs	r0, #57	; 0x39
 80008b8:	f000 fcad 	bl	8001216 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008bc:	2039      	movs	r0, #57	; 0x39
 80008be:	f000 fcc6 	bl	800124e <HAL_NVIC_EnableIRQ>

}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800

080008d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a2c      	ldr	r2, [pc, #176]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b2a      	ldr	r3, [pc, #168]	; (80009a0 <MX_GPIO_Init+0xd0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b26      	ldr	r3, [pc, #152]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a25      	ldr	r2, [pc, #148]	; (80009a0 <MX_GPIO_Init+0xd0>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b23      	ldr	r3, [pc, #140]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a1e      	ldr	r2, [pc, #120]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a17      	ldr	r2, [pc, #92]	; (80009a0 <MX_GPIO_Init+0xd0>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2120      	movs	r1, #32
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <MX_GPIO_Init+0xd4>)
 800095c:	f001 fa18 	bl	8001d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000966:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800096a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <MX_GPIO_Init+0xd8>)
 8000978:	f001 f886 	bl	8001a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800097c:	2320      	movs	r3, #32
 800097e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_GPIO_Init+0xd4>)
 8000994:	f001 f878 	bl	8001a88 <HAL_GPIO_Init>

}
 8000998:	bf00      	nop
 800099a:	3728      	adds	r7, #40	; 0x28
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40020000 	.word	0x40020000
 80009a8:	40020800 	.word	0x40020800

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b09a      	sub	sp, #104	; 0x68
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b2:	f000 fae3 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t rx_raw[100];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b6:	f000 f811 	bl	80009dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ba:	f7ff ff89 	bl	80008d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009be:	f000 f96d 	bl	8000c9c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80009c2:	f7ff ff4f 	bl	8000864 <MX_DMA_Init>
  MX_USART6_UART_Init();
 80009c6:	f000 f993 	bl	8000cf0 <MX_USART6_UART_Init>
//	  mavlink_message_t downstreamMessage;
//	  bool downmessageRead = antenna_mavlink->readMessage(downstreamMessage);
//	  if(downmessageRead){
//		  drone_mavlink->writeMessage(downstreamMessage);
//	  }
	  HAL_UART_Receive_DMA(&huart2, rx_raw, 100);
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2264      	movs	r2, #100	; 0x64
 80009ce:	4619      	mov	r1, r3
 80009d0:	4801      	ldr	r0, [pc, #4]	; (80009d8 <main+0x2c>)
 80009d2:	f001 fedc 	bl	800278e <HAL_UART_Receive_DMA>
 80009d6:	e7f8      	b.n	80009ca <main+0x1e>
 80009d8:	20000c60 	.word	0x20000c60

080009dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b094      	sub	sp, #80	; 0x50
 80009e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	f107 0320 	add.w	r3, r7, #32
 80009e6:	2230      	movs	r2, #48	; 0x30
 80009e8:	2100      	movs	r1, #0
 80009ea:	4618      	mov	r0, r3
 80009ec:	f003 f8b2 	bl	8003b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	4b2e      	ldr	r3, [pc, #184]	; (8000ac0 <_Z18SystemClock_Configv+0xe4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <_Z18SystemClock_Configv+0xe4>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b2b      	ldr	r3, [pc, #172]	; (8000ac0 <_Z18SystemClock_Configv+0xe4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <_Z18SystemClock_Configv+0xe8>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <_Z18SystemClock_Configv+0xe8>)
 8000a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <_Z18SystemClock_Configv+0xe8>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a40:	2301      	movs	r3, #1
 8000a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a44:	2310      	movs	r3, #16
 8000a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a50:	2310      	movs	r3, #16
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a54:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a5a:	2304      	movs	r3, #4
 8000a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a5e:	2307      	movs	r3, #7
 8000a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f9ac 	bl	8001dc4 <HAL_RCC_OscConfig>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	bf14      	ite	ne
 8000a72:	2301      	movne	r3, #1
 8000a74:	2300      	moveq	r3, #0
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8000a7c:	f000 f824 	bl	8000ac8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a96:	f107 030c 	add.w	r3, r7, #12
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fc09 	bl	80022b4 <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	bf14      	ite	ne
 8000aa8:	2301      	movne	r3, #1
 8000aaa:	2300      	moveq	r3, #0
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8000ab2:	f000 f809 	bl	8000ac8 <Error_Handler>
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	3750      	adds	r7, #80	; 0x50
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40007000 	.word	0x40007000

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <Error_Handler+0x8>
	...

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae2:	4a0f      	ldr	r2, [pc, #60]	; (8000b20 <HAL_MspInit+0x4c>)
 8000ae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_MspInit+0x4c>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <HAL_MspInit+0x4c>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a08      	ldr	r2, [pc, #32]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_MspInit+0x4c>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0e:	603b      	str	r3, [r7, #0]
 8000b10:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b12:	2007      	movs	r0, #7
 8000b14:	f000 fb74 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40023800 	.word	0x40023800

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <NMI_Handler+0x4>

08000b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <MemManage_Handler+0x4>

08000b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b70:	f000 fa56 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA1_Stream5_IRQHandler+0x10>)
 8000b7e:	f000 fd19 	bl	80015b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000ce8 	.word	0x20000ce8

08000b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <USART2_IRQHandler+0x10>)
 8000b92:	f001 ff11 	bl	80029b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000c60 	.word	0x20000c60

08000ba0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <DMA2_Stream1_IRQHandler+0x10>)
 8000ba6:	f000 fd05 	bl	80015b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000d48 	.word	0x20000d48

08000bb4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <USART6_IRQHandler+0x10>)
 8000bba:	f001 fefd 	bl	80029b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000ca4 	.word	0x20000ca4

08000bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return 1;
 8000bcc:	2301      	movs	r3, #1
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_kill>:

int _kill(int pid, int sig)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000be2:	f002 ff7d 	bl	8003ae0 <__errno>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2216      	movs	r2, #22
 8000bea:	601a      	str	r2, [r3, #0]
  return -1;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_exit>:

void _exit (int status)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ffe7 	bl	8000bd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c0a:	e7fe      	b.n	8000c0a <_exit+0x12>

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4413      	add	r3, r2
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f002 ff50 	bl	8003ae0 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20018000 	.word	0x20018000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	20000c5c 	.word	0x20000c5c
 8000c74:	20000dc0 	.word	0x20000dc0

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <SystemInit+0x20>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a05      	ldr	r2, [pc, #20]	; (8000c98 <SystemInit+0x20>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000ed00 	.word	0xe000ed00

08000c9c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca2:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_USART2_UART_Init+0x50>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_USART2_UART_Init+0x4c>)
 8000cd4:	f001 fd0e 	bl	80026f4 <HAL_UART_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cde:	f7ff fef3 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000c60 	.word	0x20000c60
 8000cec:	40004400 	.word	0x40004400

08000cf0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_USART6_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART6_UART_Init+0x4c>)
 8000d28:	f001 fce4 	bl	80026f4 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f7ff fec9 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000ca4 	.word	0x20000ca4
 8000d40:	40011400 	.word	0x40011400

08000d44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a68      	ldr	r2, [pc, #416]	; (8000f04 <HAL_UART_MspInit+0x1c0>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d163      	bne.n	8000e2e <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	4b67      	ldr	r3, [pc, #412]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	4a66      	ldr	r2, [pc, #408]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	6413      	str	r3, [r2, #64]	; 0x40
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d9e:	230c      	movs	r3, #12
 8000da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dae:	2307      	movs	r3, #7
 8000db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4854      	ldr	r0, [pc, #336]	; (8000f0c <HAL_UART_MspInit+0x1c8>)
 8000dba:	f000 fe65 	bl	8001a88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000dbe:	4b54      	ldr	r3, [pc, #336]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000dc0:	4a54      	ldr	r2, [pc, #336]	; (8000f14 <HAL_UART_MspInit+0x1d0>)
 8000dc2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000dc4:	4b52      	ldr	r3, [pc, #328]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dcc:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd2:	4b4f      	ldr	r3, [pc, #316]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd8:	4b4d      	ldr	r3, [pc, #308]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000dda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de0:	4b4b      	ldr	r3, [pc, #300]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000de6:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000dec:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000df2:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000df4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000df8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dfa:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e00:	4843      	ldr	r0, [pc, #268]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000e02:	f000 fa3f 	bl	8001284 <HAL_DMA_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000e0c:	f7ff fe5c 	bl	8000ac8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a3f      	ldr	r2, [pc, #252]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
 8000e16:	4a3e      	ldr	r2, [pc, #248]	; (8000f10 <HAL_UART_MspInit+0x1cc>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2026      	movs	r0, #38	; 0x26
 8000e22:	f000 f9f8 	bl	8001216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e26:	2026      	movs	r0, #38	; 0x26
 8000e28:	f000 fa11 	bl	800124e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000e2c:	e066      	b.n	8000efc <HAL_UART_MspInit+0x1b8>
  else if(uartHandle->Instance==USART6)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a39      	ldr	r2, [pc, #228]	; (8000f18 <HAL_UART_MspInit+0x1d4>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d161      	bne.n	8000efc <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	4a31      	ldr	r2, [pc, #196]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000e42:	f043 0320 	orr.w	r3, r3, #32
 8000e46:	6453      	str	r3, [r2, #68]	; 0x44
 8000e48:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f003 0320 	and.w	r3, r3, #32
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a2a      	ldr	r2, [pc, #168]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_UART_MspInit+0x1c4>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e70:	23c0      	movs	r3, #192	; 0xc0
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000e80:	2308      	movs	r3, #8
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4824      	ldr	r0, [pc, #144]	; (8000f1c <HAL_UART_MspInit+0x1d8>)
 8000e8c:	f000 fdfc 	bl	8001a88 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000e92:	4a24      	ldr	r2, [pc, #144]	; (8000f24 <HAL_UART_MspInit+0x1e0>)
 8000e94:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000e98:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8000e9c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ed2:	f000 f9d7 	bl	8001284 <HAL_DMA_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8000edc:	f7ff fdf4 	bl	8000ac8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ee4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <HAL_UART_MspInit+0x1dc>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2047      	movs	r0, #71	; 0x47
 8000ef2:	f000 f990 	bl	8001216 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000ef6:	2047      	movs	r0, #71	; 0x47
 8000ef8:	f000 f9a9 	bl	800124e <HAL_NVIC_EnableIRQ>
}
 8000efc:	bf00      	nop
 8000efe:	3730      	adds	r7, #48	; 0x30
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	20000ce8 	.word	0x20000ce8
 8000f14:	40026088 	.word	0x40026088
 8000f18:	40011400 	.word	0x40011400
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	20000d48 	.word	0x20000d48
 8000f24:	40026428 	.word	0x40026428

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2e:	490e      	ldr	r1, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f30:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f44:	4c0b      	ldr	r4, [pc, #44]	; (8000f74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f52:	f7ff fe91 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f56:	f002 fdc9 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fd27 	bl	80009ac <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f60:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f6c:	08003e38 	.word	0x08003e38
  ldr r2, =_sbss
 8000f70:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f74:	20000dc0 	.word	0x20000dc0

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	; (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f92b 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fd90 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f943 	bl	800126a <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f90b 	bl	8001216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000008 	.word	0x20000008
 8001018:	20000010 	.word	0x20000010
 800101c:	2000000c 	.word	0x2000000c

08001020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000010 	.word	0x20000010
 8001044:	20000da8 	.word	0x20000da8

08001048 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000da8 	.word	0x20000da8

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff29 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff3e 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff8e 	bl	8001154 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5d 	bl	8001100 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff31 	bl	80010c4 <__NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffa2 	bl	80011bc <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001290:	f7ff feda 	bl	8001048 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e099      	b.n	80013d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2202      	movs	r2, #2
 80012a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c0:	e00f      	b.n	80012e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012c2:	f7ff fec1 	bl	8001048 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b05      	cmp	r3, #5
 80012ce:	d908      	bls.n	80012e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2220      	movs	r2, #32
 80012d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2203      	movs	r2, #3
 80012da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e078      	b.n	80013d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e8      	bne.n	80012c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <HAL_DMA_Init+0x158>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800130e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800131a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001326:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	4313      	orrs	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	2b04      	cmp	r3, #4
 800133a:	d107      	bne.n	800134c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4313      	orrs	r3, r2
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4313      	orrs	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f023 0307 	bic.w	r3, r3, #7
 8001362:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	4313      	orrs	r3, r2
 800136c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	2b04      	cmp	r3, #4
 8001374:	d117      	bne.n	80013a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	2b00      	cmp	r3, #0
 8001386:	d00e      	beq.n	80013a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 fb01 	bl	8001990 <DMA_CheckFifoParam>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013a2:	2301      	movs	r3, #1
 80013a4:	e016      	b.n	80013d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 fab8 	bl	8001924 <DMA_CalcBaseAndBitshift>
 80013b4:	4603      	mov	r3, r0
 80013b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013bc:	223f      	movs	r2, #63	; 0x3f
 80013be:	409a      	lsls	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2201      	movs	r2, #1
 80013ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	f010803f 	.word	0xf010803f

080013e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_DMA_Start_IT+0x26>
 8001402:	2302      	movs	r3, #2
 8001404:	e040      	b.n	8001488 <HAL_DMA_Start_IT+0xa8>
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b01      	cmp	r3, #1
 8001418:	d12f      	bne.n	800147a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2202      	movs	r2, #2
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 fa4a 	bl	80018c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001438:	223f      	movs	r2, #63	; 0x3f
 800143a:	409a      	lsls	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0216 	orr.w	r2, r2, #22
 800144e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	e005      	b.n	8001486 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001482:	2302      	movs	r3, #2
 8001484:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001486:	7dfb      	ldrb	r3, [r7, #23]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800149e:	f7ff fdd3 	bl	8001048 <HAL_GetTick>
 80014a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d008      	beq.n	80014c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2280      	movs	r2, #128	; 0x80
 80014b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e052      	b.n	8001568 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0216 	bic.w	r2, r2, #22
 80014d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d103      	bne.n	80014f2 <HAL_DMA_Abort+0x62>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0208 	bic.w	r2, r2, #8
 8001500:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f022 0201 	bic.w	r2, r2, #1
 8001510:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001512:	e013      	b.n	800153c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001514:	f7ff fd98 	bl	8001048 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b05      	cmp	r3, #5
 8001520:	d90c      	bls.n	800153c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2220      	movs	r2, #32
 8001526:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e015      	b.n	8001568 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e4      	bne.n	8001514 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	223f      	movs	r2, #63	; 0x3f
 8001550:	409a      	lsls	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d004      	beq.n	800158e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2280      	movs	r2, #128	; 0x80
 8001588:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00c      	b.n	80015a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2205      	movs	r2, #5
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 0201 	bic.w	r2, r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015bc:	2300      	movs	r3, #0
 80015be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c0:	4b8e      	ldr	r3, [pc, #568]	; (80017fc <HAL_DMA_IRQHandler+0x248>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a8e      	ldr	r2, [pc, #568]	; (8001800 <HAL_DMA_IRQHandler+0x24c>)
 80015c6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ca:	0a9b      	lsrs	r3, r3, #10
 80015cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2208      	movs	r2, #8
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d01a      	beq.n	8001620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0204 	bic.w	r2, r2, #4
 8001606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2208      	movs	r2, #8
 800160e:	409a      	lsls	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	f043 0201 	orr.w	r2, r3, #1
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001624:	2201      	movs	r2, #1
 8001626:	409a      	lsls	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d012      	beq.n	8001656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00b      	beq.n	8001656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001642:	2201      	movs	r2, #1
 8001644:	409a      	lsls	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	f043 0202 	orr.w	r2, r3, #2
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165a:	2204      	movs	r2, #4
 800165c:	409a      	lsls	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4013      	ands	r3, r2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d012      	beq.n	800168c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00b      	beq.n	800168c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001678:	2204      	movs	r2, #4
 800167a:	409a      	lsls	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f043 0204 	orr.w	r2, r3, #4
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001690:	2210      	movs	r2, #16
 8001692:	409a      	lsls	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d043      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d03c      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ae:	2210      	movs	r2, #16
 80016b0:	409a      	lsls	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d018      	beq.n	80016f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d108      	bne.n	80016e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d024      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	4798      	blx	r3
 80016e2:	e01f      	b.n	8001724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01b      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	4798      	blx	r3
 80016f4:	e016      	b.n	8001724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d107      	bne.n	8001714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0208 	bic.w	r2, r2, #8
 8001712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001728:	2220      	movs	r2, #32
 800172a:	409a      	lsls	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	4013      	ands	r3, r2
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 808f 	beq.w	8001854 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 8087 	beq.w	8001854 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174a:	2220      	movs	r2, #32
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b05      	cmp	r3, #5
 800175c:	d136      	bne.n	80017cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0216 	bic.w	r2, r2, #22
 800176c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	695a      	ldr	r2, [r3, #20]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800177c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <HAL_DMA_IRQHandler+0x1da>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178a:	2b00      	cmp	r3, #0
 800178c:	d007      	beq.n	800179e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0208 	bic.w	r2, r2, #8
 800179c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a2:	223f      	movs	r2, #63	; 0x3f
 80017a4:	409a      	lsls	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d07e      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	4798      	blx	r3
        }
        return;
 80017ca:	e079      	b.n	80018c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01d      	beq.n	8001816 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d10d      	bne.n	8001804 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d031      	beq.n	8001854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
 80017f8:	e02c      	b.n	8001854 <HAL_DMA_IRQHandler+0x2a0>
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008
 8001800:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d023      	beq.n	8001854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
 8001814:	e01e      	b.n	8001854 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10f      	bne.n	8001844 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f022 0210 	bic.w	r2, r2, #16
 8001832:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2201      	movs	r2, #1
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	2b00      	cmp	r3, #0
 800185a:	d032      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d022      	beq.n	80018ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2205      	movs	r2, #5
 800186c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	429a      	cmp	r2, r3
 800188a:	d307      	bcc.n	800189c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f2      	bne.n	8001880 <HAL_DMA_IRQHandler+0x2cc>
 800189a:	e000      	b.n	800189e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800189c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
 80018be:	e000      	b.n	80018c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018c0:	bf00      	nop
    }
  }
}
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b40      	cmp	r3, #64	; 0x40
 80018f4:	d108      	bne.n	8001908 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001906:	e007      	b.n	8001918 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3b10      	subs	r3, #16
 8001934:	4a14      	ldr	r2, [pc, #80]	; (8001988 <DMA_CalcBaseAndBitshift+0x64>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800193e:	4a13      	ldr	r2, [pc, #76]	; (800198c <DMA_CalcBaseAndBitshift+0x68>)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b03      	cmp	r3, #3
 8001950:	d909      	bls.n	8001966 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800195a:	f023 0303 	bic.w	r3, r3, #3
 800195e:	1d1a      	adds	r2, r3, #4
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	659a      	str	r2, [r3, #88]	; 0x58
 8001964:	e007      	b.n	8001976 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	aaaaaaab 	.word	0xaaaaaaab
 800198c:	08003e18 	.word	0x08003e18

08001990 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001998:	2300      	movs	r3, #0
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d11f      	bne.n	80019ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d856      	bhi.n	8001a5e <DMA_CheckFifoParam+0xce>
 80019b0:	a201      	add	r2, pc, #4	; (adr r2, 80019b8 <DMA_CheckFifoParam+0x28>)
 80019b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b6:	bf00      	nop
 80019b8:	080019c9 	.word	0x080019c9
 80019bc:	080019db 	.word	0x080019db
 80019c0:	080019c9 	.word	0x080019c9
 80019c4:	08001a5f 	.word	0x08001a5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d046      	beq.n	8001a62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d8:	e043      	b.n	8001a62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e2:	d140      	bne.n	8001a66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e8:	e03d      	b.n	8001a66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019f2:	d121      	bne.n	8001a38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	d837      	bhi.n	8001a6a <DMA_CheckFifoParam+0xda>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <DMA_CheckFifoParam+0x70>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a11 	.word	0x08001a11
 8001a04:	08001a17 	.word	0x08001a17
 8001a08:	08001a11 	.word	0x08001a11
 8001a0c:	08001a29 	.word	0x08001a29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	73fb      	strb	r3, [r7, #15]
      break;
 8001a14:	e030      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d025      	beq.n	8001a6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a26:	e022      	b.n	8001a6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a30:	d11f      	bne.n	8001a72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a36:	e01c      	b.n	8001a72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d903      	bls.n	8001a46 <DMA_CheckFifoParam+0xb6>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d003      	beq.n	8001a4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a44:	e018      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4a:	e015      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00e      	beq.n	8001a76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a5c:	e00b      	b.n	8001a76 <DMA_CheckFifoParam+0xe6>
      break;
 8001a5e:	bf00      	nop
 8001a60:	e00a      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      break;
 8001a62:	bf00      	nop
 8001a64:	e008      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
 8001a68:	e006      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e004      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e002      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <DMA_CheckFifoParam+0xe8>
      break;
 8001a76:	bf00      	nop
    }
  } 
  
  return status; 
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop

08001a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b089      	sub	sp, #36	; 0x24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
 8001aa2:	e159      	b.n	8001d58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	f040 8148 	bne.w	8001d52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d005      	beq.n	8001ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d130      	bne.n	8001b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	68da      	ldr	r2, [r3, #12]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b10:	2201      	movs	r2, #1
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 0201 	and.w	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d017      	beq.n	8001b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d123      	bne.n	8001bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	08da      	lsrs	r2, r3, #3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3208      	adds	r2, #8
 8001b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	220f      	movs	r2, #15
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	69b9      	ldr	r1, [r7, #24]
 8001bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0203 	and.w	r2, r3, #3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 80a2 	beq.w	8001d52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b57      	ldr	r3, [pc, #348]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	4a56      	ldr	r2, [pc, #344]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <HAL_GPIO_Init+0x2e8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2a:	4a52      	ldr	r2, [pc, #328]	; (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	089b      	lsrs	r3, r3, #2
 8001c30:	3302      	adds	r3, #2
 8001c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	220f      	movs	r2, #15
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a49      	ldr	r2, [pc, #292]	; (8001d78 <HAL_GPIO_Init+0x2f0>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d019      	beq.n	8001c8a <HAL_GPIO_Init+0x202>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a48      	ldr	r2, [pc, #288]	; (8001d7c <HAL_GPIO_Init+0x2f4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <HAL_GPIO_Init+0x1fe>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a47      	ldr	r2, [pc, #284]	; (8001d80 <HAL_GPIO_Init+0x2f8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00d      	beq.n	8001c82 <HAL_GPIO_Init+0x1fa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_GPIO_Init+0x2fc>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d007      	beq.n	8001c7e <HAL_GPIO_Init+0x1f6>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <HAL_GPIO_Init+0x300>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d101      	bne.n	8001c7a <HAL_GPIO_Init+0x1f2>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e008      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e006      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e004      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c82:	2302      	movs	r3, #2
 8001c84:	e002      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_GPIO_Init+0x204>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	69fa      	ldr	r2, [r7, #28]
 8001c8e:	f002 0203 	and.w	r2, r2, #3
 8001c92:	0092      	lsls	r2, r2, #2
 8001c94:	4093      	lsls	r3, r2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c9c:	4935      	ldr	r1, [pc, #212]	; (8001d74 <HAL_GPIO_Init+0x2ec>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	3302      	adds	r3, #2
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001caa:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cce:	4a2f      	ldr	r2, [pc, #188]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf8:	4a24      	ldr	r2, [pc, #144]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d22:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4c:	4a0f      	ldr	r2, [pc, #60]	; (8001d8c <HAL_GPIO_Init+0x304>)
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3301      	adds	r3, #1
 8001d56:	61fb      	str	r3, [r7, #28]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	2b0f      	cmp	r3, #15
 8001d5c:	f67f aea2 	bls.w	8001aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40013800 	.word	0x40013800
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40020400 	.word	0x40020400
 8001d80:	40020800 	.word	0x40020800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	40013c00 	.word	0x40013c00

08001d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	807b      	strh	r3, [r7, #2]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da6:	887a      	ldrh	r2, [r7, #2]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dac:	e003      	b.n	8001db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dae:	887b      	ldrh	r3, [r7, #2]
 8001db0:	041a      	lsls	r2, r3, #16
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	619a      	str	r2, [r3, #24]
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e267      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d00c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d112      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b7e      	ldr	r3, [pc, #504]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e242      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6f      	ldr	r2, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6c      	ldr	r2, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a68      	ldr	r2, [pc, #416]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff f8e4 	bl	8001048 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7ff f8e0 	bl	8001048 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e207      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f8d0 	bl	8001048 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f8cc 	bl	8001048 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1f3      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d063      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1c7      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4937      	ldr	r1, [pc, #220]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e03a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7ff f885 	bl	8001048 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7ff f881 	bl	8001048 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1a8      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4925      	ldr	r1, [pc, #148]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f864 	bl	8001048 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f84:	f7ff f860 	bl	8001048 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e187      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d036      	beq.n	800201c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_RCC_OscConfig+0x248>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f844 	bl	8001048 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f840 	bl	8001048 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e167      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
 8001fe2:	e01b      	b.n	800201c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_OscConfig+0x248>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7ff f82d 	bl	8001048 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	e00e      	b.n	8002010 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff f829 	bl	8001048 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d907      	bls.n	8002010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e150      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
 8002004:	40023800 	.word	0x40023800
 8002008:	42470000 	.word	0x42470000
 800200c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ea      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8097 	beq.w	8002158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b81      	ldr	r3, [pc, #516]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b77      	ldr	r3, [pc, #476]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a73      	ldr	r2, [pc, #460]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7fe ffe9 	bl	8001048 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe ffe5 	bl	8001048 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e10c      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x2ea>
 80020a0:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x324>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x30c>
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a5e      	ldr	r2, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a5b      	ldr	r2, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0x324>
 80020d0:	4b58      	ldr	r3, [pc, #352]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a57      	ldr	r2, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	4b55      	ldr	r3, [pc, #340]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a54      	ldr	r2, [pc, #336]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020e2:	f023 0304 	bic.w	r3, r3, #4
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe ffaa 	bl	8001048 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7fe ffa6 	bl	8001048 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0cb      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ee      	beq.n	80020f8 <HAL_RCC_OscConfig+0x334>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe ff94 	bl	8001048 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe ff90 	bl	8001048 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0b5      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a38      	ldr	r2, [pc, #224]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a1 	beq.w	80022a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002162:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b08      	cmp	r3, #8
 800216c:	d05c      	beq.n	8002228 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d141      	bne.n	80021fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_RCC_OscConfig+0x478>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe ff64 	bl	8001048 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe ff60 	bl	8001048 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e087      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	019b      	lsls	r3, r3, #6
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x478>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe ff39 	bl	8001048 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe ff35 	bl	8001048 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e05c      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x416>
 80021f8:	e054      	b.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x478>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe ff22 	bl	8001048 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe ff1e 	bl	8001048 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e045      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x444>
 8002226:	e03d      	b.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e038      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d028      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d121      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d11a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002278:	4293      	cmp	r3, r2
 800227a:	d111      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0cc      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d90c      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d044      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d119      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d003      	beq.n	8002372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	2b03      	cmp	r3, #3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e067      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fe50 	bl	8001048 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fe fe4c 	bl	8001048 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d20c      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fdb0 	bl	8000fc0 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00
 8002470:	40023800 	.word	0x40023800
 8002474:	08003e00 	.word	0x08003e00
 8002478:	20000008 	.word	0x20000008
 800247c:	2000000c 	.word	0x2000000c

08002480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002484:	b094      	sub	sp, #80	; 0x50
 8002486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
 800248c:	2300      	movs	r3, #0
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002490:	2300      	movs	r3, #0
 8002492:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002498:	4b79      	ldr	r3, [pc, #484]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d00d      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x40>
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	f200 80e1 	bhi.w	800266c <HAL_RCC_GetSysClockFreq+0x1ec>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_GetSysClockFreq+0x3a>
 80024b2:	e0db      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b4:	4b73      	ldr	r3, [pc, #460]	; (8002684 <HAL_RCC_GetSysClockFreq+0x204>)
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024b8:	e0db      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCC_GetSysClockFreq+0x208>)
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024be:	e0d8      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	2200      	movs	r2, #0
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ea:	2300      	movs	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
 80024ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024f2:	4622      	mov	r2, r4
 80024f4:	462b      	mov	r3, r5
 80024f6:	f04f 0000 	mov.w	r0, #0
 80024fa:	f04f 0100 	mov.w	r1, #0
 80024fe:	0159      	lsls	r1, r3, #5
 8002500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002504:	0150      	lsls	r0, r2, #5
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4621      	mov	r1, r4
 800250c:	1a51      	subs	r1, r2, r1
 800250e:	6139      	str	r1, [r7, #16]
 8002510:	4629      	mov	r1, r5
 8002512:	eb63 0301 	sbc.w	r3, r3, r1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002524:	4659      	mov	r1, fp
 8002526:	018b      	lsls	r3, r1, #6
 8002528:	4651      	mov	r1, sl
 800252a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800252e:	4651      	mov	r1, sl
 8002530:	018a      	lsls	r2, r1, #6
 8002532:	4651      	mov	r1, sl
 8002534:	ebb2 0801 	subs.w	r8, r2, r1
 8002538:	4659      	mov	r1, fp
 800253a:	eb63 0901 	sbc.w	r9, r3, r1
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800254a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800254e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002552:	4690      	mov	r8, r2
 8002554:	4699      	mov	r9, r3
 8002556:	4623      	mov	r3, r4
 8002558:	eb18 0303 	adds.w	r3, r8, r3
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	462b      	mov	r3, r5
 8002560:	eb49 0303 	adc.w	r3, r9, r3
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002572:	4629      	mov	r1, r5
 8002574:	024b      	lsls	r3, r1, #9
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800257c:	4621      	mov	r1, r4
 800257e:	024a      	lsls	r2, r1, #9
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	2200      	movs	r2, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
 800258a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800258c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002590:	f7fd fe20 	bl	80001d4 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800259c:	e058      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	2200      	movs	r2, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	4611      	mov	r1, r2
 80025aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
 80025b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025b8:	4642      	mov	r2, r8
 80025ba:	464b      	mov	r3, r9
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	0159      	lsls	r1, r3, #5
 80025c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ca:	0150      	lsls	r0, r2, #5
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4641      	mov	r1, r8
 80025d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025d6:	4649      	mov	r1, r9
 80025d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025f0:	ebb2 040a 	subs.w	r4, r2, sl
 80025f4:	eb63 050b 	sbc.w	r5, r3, fp
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	00eb      	lsls	r3, r5, #3
 8002602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002606:	00e2      	lsls	r2, r4, #3
 8002608:	4614      	mov	r4, r2
 800260a:	461d      	mov	r5, r3
 800260c:	4643      	mov	r3, r8
 800260e:	18e3      	adds	r3, r4, r3
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	464b      	mov	r3, r9
 8002614:	eb45 0303 	adc.w	r3, r5, r3
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002626:	4629      	mov	r1, r5
 8002628:	028b      	lsls	r3, r1, #10
 800262a:	4621      	mov	r1, r4
 800262c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002630:	4621      	mov	r1, r4
 8002632:	028a      	lsls	r2, r1, #10
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263a:	2200      	movs	r2, #0
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	61fa      	str	r2, [r7, #28]
 8002640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002644:	f7fd fdc6 	bl	80001d4 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4613      	mov	r3, r2
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x204>)
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002674:	4618      	mov	r0, r3
 8002676:	3750      	adds	r7, #80	; 0x50
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200

0800268c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000008 	.word	0x20000008

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08003e10 	.word	0x08003e10

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff ffdc 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0b5b      	lsrs	r3, r3, #13
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4903      	ldr	r1, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08003e10 	.word	0x08003e10

080026f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e03f      	b.n	8002786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fb12 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 ff37 	bl	80035ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800274c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800275c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800276c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	4613      	mov	r3, r2
 800279a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b20      	cmp	r3, #32
 80027a6:	d11d      	bne.n	80027e4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Receive_DMA+0x26>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e016      	b.n	80027e6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Receive_DMA+0x38>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e00f      	b.n	80027e6 <HAL_UART_Receive_DMA+0x58>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fc86 	bl	80030ec <UART_Start_Receive_DMA>
 80027e0:	4603      	mov	r3, r0
 80027e2:	e000      	b.n	80027e6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
  }
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b090      	sub	sp, #64	; 0x40
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	bf0c      	ite	eq
 8002808:	2301      	moveq	r3, #1
 800280a:	2300      	movne	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b21      	cmp	r3, #33	; 0x21
 800281a:	d128      	bne.n	800286e <HAL_UART_DMAStop+0x80>
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	2b00      	cmp	r3, #0
 8002820:	d025      	beq.n	800286e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3314      	adds	r3, #20
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	e853 3f00 	ldrex	r3, [r3]
 8002830:	623b      	str	r3, [r7, #32]
   return(result);
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002838:	63bb      	str	r3, [r7, #56]	; 0x38
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002842:	633a      	str	r2, [r7, #48]	; 0x30
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800284a:	e841 2300 	strex	r3, r2, [r1]
 800284e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e5      	bne.n	8002822 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002862:	4618      	mov	r0, r3
 8002864:	f7fe fe14 	bl	8001490 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fcdd 	bl	8003228 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b22      	cmp	r3, #34	; 0x22
 800288e:	d128      	bne.n	80028e2 <HAL_UART_DMAStop+0xf4>
 8002890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002892:	2b00      	cmp	r3, #0
 8002894:	d025      	beq.n	80028e2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3314      	adds	r3, #20
 800289c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	e853 3f00 	ldrex	r3, [r3]
 80028a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3314      	adds	r3, #20
 80028b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028b6:	61fa      	str	r2, [r7, #28]
 80028b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	e841 2300 	strex	r3, r2, [r1]
 80028c2:	617b      	str	r3, [r7, #20]
   return(result);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1e5      	bne.n	8002896 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fdda 	bl	8001490 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fccb 	bl	8003278 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3740      	adds	r7, #64	; 0x40
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	; 0x30
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	4613      	mov	r3, r2
 80028f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b20      	cmp	r3, #32
 8002904:	d152      	bne.n	80029ac <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e04b      	b.n	80029ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002920:	2302      	movs	r3, #2
 8002922:	e044      	b.n	80029ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	461a      	mov	r2, r3
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fbd7 	bl	80030ec <UART_Start_Receive_DMA>
 800293e:	4603      	mov	r3, r0
 8002940:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002948:	2b00      	cmp	r3, #0
 800294a:	d12c      	bne.n	80029a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002950:	2b01      	cmp	r3, #1
 8002952:	d125      	bne.n	80029a0 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	613b      	str	r3, [r7, #16]
 8002968:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	330c      	adds	r3, #12
 8002970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	e853 3f00 	ldrex	r3, [r3]
 8002978:	617b      	str	r3, [r7, #20]
   return(result);
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f043 0310 	orr.w	r3, r3, #16
 8002980:	62bb      	str	r3, [r7, #40]	; 0x28
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	330c      	adds	r3, #12
 8002988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298a:	627a      	str	r2, [r7, #36]	; 0x24
 800298c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	6a39      	ldr	r1, [r7, #32]
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	61fb      	str	r3, [r7, #28]
   return(result);
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e5      	bne.n	800296a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800299e:	e002      	b.n	80029a6 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80029a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80029aa:	e000      	b.n	80029ae <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3730      	adds	r7, #48	; 0x30
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b0ba      	sub	sp, #232	; 0xe8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80029f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10f      	bne.n	8002a1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_UART_IRQHandler+0x66>
 8002a0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fd0d 	bl	8003436 <UART_Receive_IT>
      return;
 8002a1c:	e256      	b.n	8002ecc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 80de 	beq.w	8002be4 <HAL_UART_IRQHandler+0x22c>
 8002a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d106      	bne.n	8002a42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a38:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80d1 	beq.w	8002be4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_UART_IRQHandler+0xae>
 8002a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <HAL_UART_IRQHandler+0xd2>
 8002a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f043 0202 	orr.w	r2, r3, #2
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00b      	beq.n	8002aae <HAL_UART_IRQHandler+0xf6>
 8002a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0204 	orr.w	r2, r3, #4
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d011      	beq.n	8002ade <HAL_UART_IRQHandler+0x126>
 8002aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d105      	bne.n	8002ad2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	f043 0208 	orr.w	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 81ed 	beq.w	8002ec2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aec:	f003 0320 	and.w	r3, r3, #32
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d008      	beq.n	8002b06 <HAL_UART_IRQHandler+0x14e>
 8002af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 fc98 	bl	8003436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	bf0c      	ite	eq
 8002b14:	2301      	moveq	r3, #1
 8002b16:	2300      	movne	r3, #0
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d103      	bne.n	8002b32 <HAL_UART_IRQHandler+0x17a>
 8002b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d04f      	beq.n	8002bd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fba0 	bl	8003278 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d141      	bne.n	8002bca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b54:	e853 3f00 	ldrex	r3, [r3]
 8002b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3314      	adds	r3, #20
 8002b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002b72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002b82:	e841 2300 	strex	r3, r2, [r1]
 8002b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1d9      	bne.n	8002b46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d013      	beq.n	8002bc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9e:	4a7d      	ldr	r2, [pc, #500]	; (8002d94 <HAL_UART_IRQHandler+0x3dc>)
 8002ba0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fce2 	bl	8001570 <HAL_DMA_Abort_IT>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc0:	e00e      	b.n	8002be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fd fe1c 	bl	8000800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	e00a      	b.n	8002be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd fe18 	bl	8000800 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e006      	b.n	8002be0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fd fe14 	bl	8000800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002bde:	e170      	b.n	8002ec2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be0:	bf00      	nop
    return;
 8002be2:	e16e      	b.n	8002ec2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f040 814a 	bne.w	8002e82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8143 	beq.w	8002e82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 813c 	beq.w	8002e82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	f040 80b4 	bne.w	8002d98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8140 	beq.w	8002ec6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	f080 8139 	bcs.w	8002ec6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c66:	f000 8088 	beq.w	8002d7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002c80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002ca2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ca6:	e841 2300 	strex	r3, r2, [r1]
 8002caa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1d9      	bne.n	8002c6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3314      	adds	r3, #20
 8002cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002cda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002cde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ce2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ce6:	e841 2300 	strex	r3, r2, [r1]
 8002cea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1e1      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	3314      	adds	r3, #20
 8002cf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3314      	adds	r3, #20
 8002d12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e3      	bne.n	8002cf2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	330c      	adds	r3, #12
 8002d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d4a:	f023 0310 	bic.w	r3, r3, #16
 8002d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	330c      	adds	r3, #12
 8002d58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002d5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e3      	bne.n	8002d38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fb8b 	bl	8001490 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4619      	mov	r1, r3
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fd fc5c 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d90:	e099      	b.n	8002ec6 <HAL_UART_IRQHandler+0x50e>
 8002d92:	bf00      	nop
 8002d94:	0800333f 	.word	0x0800333f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 808b 	beq.w	8002eca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002db4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8086 	beq.w	8002eca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002dd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002de2:	647a      	str	r2, [r7, #68]	; 0x44
 8002de4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002de8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dea:	e841 2300 	strex	r3, r2, [r1]
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1e3      	bne.n	8002dbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3314      	adds	r3, #20
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	e853 3f00 	ldrex	r3, [r3]
 8002e04:	623b      	str	r3, [r7, #32]
   return(result);
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	3314      	adds	r3, #20
 8002e16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e1a:	633a      	str	r2, [r7, #48]	; 0x30
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e3      	bne.n	8002df6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f023 0310 	bic.w	r3, r3, #16
 8002e52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	330c      	adds	r3, #12
 8002e5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002e60:	61fa      	str	r2, [r7, #28]
 8002e62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e64:	69b9      	ldr	r1, [r7, #24]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	e841 2300 	strex	r3, r2, [r1]
 8002e6c:	617b      	str	r3, [r7, #20]
   return(result);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1e3      	bne.n	8002e3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fd fbe4 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e80:	e023      	b.n	8002eca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d009      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x4ea>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa63 	bl	8003366 <UART_Transmit_IT>
    return;
 8002ea0:	e014      	b.n	8002ecc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00e      	beq.n	8002ecc <HAL_UART_IRQHandler+0x514>
 8002eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 faa3 	bl	8003406 <UART_EndTransmit_IT>
    return;
 8002ec0:	e004      	b.n	8002ecc <HAL_UART_IRQHandler+0x514>
    return;
 8002ec2:	bf00      	nop
 8002ec4:	e002      	b.n	8002ecc <HAL_UART_IRQHandler+0x514>
      return;
 8002ec6:	bf00      	nop
 8002ec8:	e000      	b.n	8002ecc <HAL_UART_IRQHandler+0x514>
      return;
 8002eca:	bf00      	nop
  }
}
 8002ecc:	37e8      	adds	r7, #232	; 0xe8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop

08002ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b09c      	sub	sp, #112	; 0x70
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d172      	bne.n	8002ffe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	330c      	adds	r3, #12
 8002f24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002f3e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002f40:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f46:	e841 2300 	strex	r3, r2, [r1]
 8002f4a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1e5      	bne.n	8002f1e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	3314      	adds	r3, #20
 8002f58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5c:	e853 3f00 	ldrex	r3, [r3]
 8002f60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f64:	f023 0301 	bic.w	r3, r3, #1
 8002f68:	667b      	str	r3, [r7, #100]	; 0x64
 8002f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002f72:	647a      	str	r2, [r7, #68]	; 0x44
 8002f74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f7a:	e841 2300 	strex	r3, r2, [r1]
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1e5      	bne.n	8002f52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	623b      	str	r3, [r7, #32]
   return(result);
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3314      	adds	r3, #20
 8002fa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002fa6:	633a      	str	r2, [r7, #48]	; 0x30
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fae:	e841 2300 	strex	r3, r2, [r1]
 8002fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1e5      	bne.n	8002f86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d119      	bne.n	8002ffe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f023 0310 	bic.w	r3, r3, #16
 8002fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	330c      	adds	r3, #12
 8002fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	69b9      	ldr	r1, [r7, #24]
 8002ff0:	69fa      	ldr	r2, [r7, #28]
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	617b      	str	r3, [r7, #20]
   return(result);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	2b01      	cmp	r3, #1
 8003004:	d106      	bne.n	8003014 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003006:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003008:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800300a:	4619      	mov	r1, r3
 800300c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800300e:	f7fd fb1b 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003012:	e002      	b.n	800301a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003014:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003016:	f7fd fb87 	bl	8000728 <HAL_UART_RxCpltCallback>
}
 800301a:	bf00      	nop
 800301c:	3770      	adds	r7, #112	; 0x70
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	2b01      	cmp	r3, #1
 8003036:	d108      	bne.n	800304a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	b29b      	uxth	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7fd fb00 	bl	8000648 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003048:	e002      	b.n	8003050 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f7ff ff4c 	bl	8002ee8 <HAL_UART_RxHalfCpltCallback>
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003068:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003074:	2b80      	cmp	r3, #128	; 0x80
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b21      	cmp	r3, #33	; 0x21
 800308a:	d108      	bne.n	800309e <UART_DMAError+0x46>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2200      	movs	r2, #0
 8003096:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003098:	68b8      	ldr	r0, [r7, #8]
 800309a:	f000 f8c5 	bl	8003228 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a8:	2b40      	cmp	r3, #64	; 0x40
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b22      	cmp	r3, #34	; 0x22
 80030be:	d108      	bne.n	80030d2 <UART_DMAError+0x7a>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d005      	beq.n	80030d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2200      	movs	r2, #0
 80030ca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80030cc:	68b8      	ldr	r0, [r7, #8]
 80030ce:	f000 f8d3 	bl	8003278 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f043 0210 	orr.w	r2, r3, #16
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030de:	68b8      	ldr	r0, [r7, #8]
 80030e0:	f7fd fb8e 	bl	8000800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b098      	sub	sp, #96	; 0x60
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	4613      	mov	r3, r2
 80030f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2222      	movs	r2, #34	; 0x22
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	4a40      	ldr	r2, [pc, #256]	; (800321c <UART_Start_Receive_DMA+0x130>)
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <UART_Start_Receive_DMA+0x134>)
 8003122:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	4a3e      	ldr	r2, [pc, #248]	; (8003224 <UART_Start_Receive_DMA+0x138>)
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	2200      	movs	r2, #0
 8003132:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003134:	f107 0308 	add.w	r3, r7, #8
 8003138:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	4619      	mov	r1, r3
 8003146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	88fb      	ldrh	r3, [r7, #6]
 800314c:	f7fe f948 	bl	80013e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d019      	beq.n	80031aa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	330c      	adds	r3, #12
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003180:	e853 3f00 	ldrex	r3, [r3]
 8003184:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318c:	65bb      	str	r3, [r7, #88]	; 0x58
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	330c      	adds	r3, #12
 8003194:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003196:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003198:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800319c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80031a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e5      	bne.n	8003176 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	3314      	adds	r3, #20
 80031b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	657b      	str	r3, [r7, #84]	; 0x54
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3314      	adds	r3, #20
 80031c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80031d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1e5      	bne.n	80031aa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3314      	adds	r3, #20
 80031e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	e853 3f00 	ldrex	r3, [r3]
 80031ec:	617b      	str	r3, [r7, #20]
   return(result);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031f4:	653b      	str	r3, [r7, #80]	; 0x50
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3314      	adds	r3, #20
 80031fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80031fe:	627a      	str	r2, [r7, #36]	; 0x24
 8003200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003202:	6a39      	ldr	r1, [r7, #32]
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	e841 2300 	strex	r3, r2, [r1]
 800320a:	61fb      	str	r3, [r7, #28]
   return(result);
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1e5      	bne.n	80031de <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3760      	adds	r7, #96	; 0x60
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	08002efd 	.word	0x08002efd
 8003220:	08003023 	.word	0x08003023
 8003224:	08003059 	.word	0x08003059

08003228 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	61ba      	str	r2, [r7, #24]
 8003252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	6979      	ldr	r1, [r7, #20]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	613b      	str	r3, [r7, #16]
   return(result);
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e5      	bne.n	8003230 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800326c:	bf00      	nop
 800326e:	3724      	adds	r7, #36	; 0x24
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003278:	b480      	push	{r7}
 800327a:	b095      	sub	sp, #84	; 0x54
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	330c      	adds	r3, #12
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328a:	e853 3f00 	ldrex	r3, [r3]
 800328e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	330c      	adds	r3, #12
 800329e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032a0:	643a      	str	r2, [r7, #64]	; 0x40
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80032a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e5      	bne.n	8003280 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	e853 3f00 	ldrex	r3, [r3]
 80032c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3314      	adds	r3, #20
 80032d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032dc:	e841 2300 	strex	r3, r2, [r1]
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e5      	bne.n	80032b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d119      	bne.n	8003324 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	330c      	adds	r3, #12
 80032f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f023 0310 	bic.w	r3, r3, #16
 8003306:	647b      	str	r3, [r7, #68]	; 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003310:	61ba      	str	r2, [r7, #24]
 8003312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6979      	ldr	r1, [r7, #20]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	613b      	str	r3, [r7, #16]
   return(result);
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003332:	bf00      	nop
 8003334:	3754      	adds	r7, #84	; 0x54
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7fd fa51 	bl	8000800 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800335e:	bf00      	nop
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003366:	b480      	push	{r7}
 8003368:	b085      	sub	sp, #20
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b21      	cmp	r3, #33	; 0x21
 8003378:	d13e      	bne.n	80033f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	d114      	bne.n	80033ae <UART_Transmit_IT+0x48>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d110      	bne.n	80033ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	1c9a      	adds	r2, r3, #2
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	621a      	str	r2, [r3, #32]
 80033ac:	e008      	b.n	80033c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	1c59      	adds	r1, r3, #1
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6211      	str	r1, [r2, #32]
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4619      	mov	r1, r3
 80033ce:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10f      	bne.n	80033f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff fd54 	bl	8002ed4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b08c      	sub	sp, #48	; 0x30
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b22      	cmp	r3, #34	; 0x22
 8003448:	f040 80ab 	bne.w	80035a2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003454:	d117      	bne.n	8003486 <UART_Receive_IT+0x50>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d113      	bne.n	8003486 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800345e:	2300      	movs	r3, #0
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003466:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003474:	b29a      	uxth	r2, r3
 8003476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003478:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	1c9a      	adds	r2, r3, #2
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28
 8003484:	e026      	b.n	80034d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003498:	d007      	beq.n	80034aa <UART_Receive_IT+0x74>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10a      	bne.n	80034b8 <UART_Receive_IT+0x82>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	e008      	b.n	80034ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29b      	uxth	r3, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4619      	mov	r1, r3
 80034e2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d15a      	bne.n	800359e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0220 	bic.w	r2, r2, #32
 80034f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003506:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003524:	2b01      	cmp	r3, #1
 8003526:	d135      	bne.n	8003594 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	330c      	adds	r3, #12
 8003534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	613b      	str	r3, [r7, #16]
   return(result);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f023 0310 	bic.w	r3, r3, #16
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	330c      	adds	r3, #12
 800354c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800354e:	623a      	str	r2, [r7, #32]
 8003550:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	69f9      	ldr	r1, [r7, #28]
 8003554:	6a3a      	ldr	r2, [r7, #32]
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	61bb      	str	r3, [r7, #24]
   return(result);
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e5      	bne.n	800352e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b10      	cmp	r3, #16
 800356e:	d10a      	bne.n	8003586 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800358a:	4619      	mov	r1, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7fd f85b 	bl	8000648 <HAL_UARTEx_RxEventCallback>
 8003592:	e002      	b.n	800359a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7fd f8c7 	bl	8000728 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e002      	b.n	80035a4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800359e:	2300      	movs	r3, #0
 80035a0:	e000      	b.n	80035a4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80035a2:	2302      	movs	r3, #2
  }
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3730      	adds	r7, #48	; 0x30
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b0:	b0c0      	sub	sp, #256	; 0x100
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	68d9      	ldr	r1, [r3, #12]
 80035ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	ea40 0301 	orr.w	r3, r0, r1
 80035d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	431a      	orrs	r2, r3
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003604:	f021 010c 	bic.w	r1, r1, #12
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003612:	430b      	orrs	r3, r1
 8003614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	6999      	ldr	r1, [r3, #24]
 8003628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	ea40 0301 	orr.w	r3, r0, r1
 8003632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b8f      	ldr	r3, [pc, #572]	; (8003878 <UART_SetConfig+0x2cc>)
 800363c:	429a      	cmp	r2, r3
 800363e:	d005      	beq.n	800364c <UART_SetConfig+0xa0>
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b8d      	ldr	r3, [pc, #564]	; (800387c <UART_SetConfig+0x2d0>)
 8003648:	429a      	cmp	r2, r3
 800364a:	d104      	bne.n	8003656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800364c:	f7ff f83e 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 8003650:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003654:	e003      	b.n	800365e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003656:	f7ff f825 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800365a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003668:	f040 810c 	bne.w	8003884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800366c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003676:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800367a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800367e:	4622      	mov	r2, r4
 8003680:	462b      	mov	r3, r5
 8003682:	1891      	adds	r1, r2, r2
 8003684:	65b9      	str	r1, [r7, #88]	; 0x58
 8003686:	415b      	adcs	r3, r3
 8003688:	65fb      	str	r3, [r7, #92]	; 0x5c
 800368a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800368e:	4621      	mov	r1, r4
 8003690:	eb12 0801 	adds.w	r8, r2, r1
 8003694:	4629      	mov	r1, r5
 8003696:	eb43 0901 	adc.w	r9, r3, r1
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036ae:	4690      	mov	r8, r2
 80036b0:	4699      	mov	r9, r3
 80036b2:	4623      	mov	r3, r4
 80036b4:	eb18 0303 	adds.w	r3, r8, r3
 80036b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80036bc:	462b      	mov	r3, r5
 80036be:	eb49 0303 	adc.w	r3, r9, r3
 80036c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036d2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036da:	460b      	mov	r3, r1
 80036dc:	18db      	adds	r3, r3, r3
 80036de:	653b      	str	r3, [r7, #80]	; 0x50
 80036e0:	4613      	mov	r3, r2
 80036e2:	eb42 0303 	adc.w	r3, r2, r3
 80036e6:	657b      	str	r3, [r7, #84]	; 0x54
 80036e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036f0:	f7fc fd70 	bl	80001d4 <__aeabi_uldivmod>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	4b61      	ldr	r3, [pc, #388]	; (8003880 <UART_SetConfig+0x2d4>)
 80036fa:	fba3 2302 	umull	r2, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	011c      	lsls	r4, r3, #4
 8003702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003706:	2200      	movs	r2, #0
 8003708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800370c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	1891      	adds	r1, r2, r2
 800371a:	64b9      	str	r1, [r7, #72]	; 0x48
 800371c:	415b      	adcs	r3, r3
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003724:	4641      	mov	r1, r8
 8003726:	eb12 0a01 	adds.w	sl, r2, r1
 800372a:	4649      	mov	r1, r9
 800372c:	eb43 0b01 	adc.w	fp, r3, r1
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800373c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003744:	4692      	mov	sl, r2
 8003746:	469b      	mov	fp, r3
 8003748:	4643      	mov	r3, r8
 800374a:	eb1a 0303 	adds.w	r3, sl, r3
 800374e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003752:	464b      	mov	r3, r9
 8003754:	eb4b 0303 	adc.w	r3, fp, r3
 8003758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003768:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800376c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003770:	460b      	mov	r3, r1
 8003772:	18db      	adds	r3, r3, r3
 8003774:	643b      	str	r3, [r7, #64]	; 0x40
 8003776:	4613      	mov	r3, r2
 8003778:	eb42 0303 	adc.w	r3, r2, r3
 800377c:	647b      	str	r3, [r7, #68]	; 0x44
 800377e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003786:	f7fc fd25 	bl	80001d4 <__aeabi_uldivmod>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4611      	mov	r1, r2
 8003790:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <UART_SetConfig+0x2d4>)
 8003792:	fba3 2301 	umull	r2, r3, r3, r1
 8003796:	095b      	lsrs	r3, r3, #5
 8003798:	2264      	movs	r2, #100	; 0x64
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	1acb      	subs	r3, r1, r3
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037a6:	4b36      	ldr	r3, [pc, #216]	; (8003880 <UART_SetConfig+0x2d4>)
 80037a8:	fba3 2302 	umull	r2, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037b4:	441c      	add	r4, r3
 80037b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037c0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	1891      	adds	r1, r2, r2
 80037ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80037d0:	415b      	adcs	r3, r3
 80037d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037d8:	4641      	mov	r1, r8
 80037da:	1851      	adds	r1, r2, r1
 80037dc:	6339      	str	r1, [r7, #48]	; 0x30
 80037de:	4649      	mov	r1, r9
 80037e0:	414b      	adcs	r3, r1
 80037e2:	637b      	str	r3, [r7, #52]	; 0x34
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037f0:	4659      	mov	r1, fp
 80037f2:	00cb      	lsls	r3, r1, #3
 80037f4:	4651      	mov	r1, sl
 80037f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037fa:	4651      	mov	r1, sl
 80037fc:	00ca      	lsls	r2, r1, #3
 80037fe:	4610      	mov	r0, r2
 8003800:	4619      	mov	r1, r3
 8003802:	4603      	mov	r3, r0
 8003804:	4642      	mov	r2, r8
 8003806:	189b      	adds	r3, r3, r2
 8003808:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800380c:	464b      	mov	r3, r9
 800380e:	460a      	mov	r2, r1
 8003810:	eb42 0303 	adc.w	r3, r2, r3
 8003814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003824:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800382c:	460b      	mov	r3, r1
 800382e:	18db      	adds	r3, r3, r3
 8003830:	62bb      	str	r3, [r7, #40]	; 0x28
 8003832:	4613      	mov	r3, r2
 8003834:	eb42 0303 	adc.w	r3, r2, r3
 8003838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800383a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800383e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003842:	f7fc fcc7 	bl	80001d4 <__aeabi_uldivmod>
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <UART_SetConfig+0x2d4>)
 800384c:	fba3 1302 	umull	r1, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	2164      	movs	r1, #100	; 0x64
 8003854:	fb01 f303 	mul.w	r3, r1, r3
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	3332      	adds	r3, #50	; 0x32
 800385e:	4a08      	ldr	r2, [pc, #32]	; (8003880 <UART_SetConfig+0x2d4>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	f003 0207 	and.w	r2, r3, #7
 800386a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4422      	add	r2, r4
 8003872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003874:	e105      	b.n	8003a82 <UART_SetConfig+0x4d6>
 8003876:	bf00      	nop
 8003878:	40011000 	.word	0x40011000
 800387c:	40011400 	.word	0x40011400
 8003880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800388e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003896:	4642      	mov	r2, r8
 8003898:	464b      	mov	r3, r9
 800389a:	1891      	adds	r1, r2, r2
 800389c:	6239      	str	r1, [r7, #32]
 800389e:	415b      	adcs	r3, r3
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038a6:	4641      	mov	r1, r8
 80038a8:	1854      	adds	r4, r2, r1
 80038aa:	4649      	mov	r1, r9
 80038ac:	eb43 0501 	adc.w	r5, r3, r1
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	00eb      	lsls	r3, r5, #3
 80038ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038be:	00e2      	lsls	r2, r4, #3
 80038c0:	4614      	mov	r4, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	18e3      	adds	r3, r4, r3
 80038c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038cc:	464b      	mov	r3, r9
 80038ce:	eb45 0303 	adc.w	r3, r5, r3
 80038d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038f2:	4629      	mov	r1, r5
 80038f4:	008b      	lsls	r3, r1, #2
 80038f6:	4621      	mov	r1, r4
 80038f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038fc:	4621      	mov	r1, r4
 80038fe:	008a      	lsls	r2, r1, #2
 8003900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003904:	f7fc fc66 	bl	80001d4 <__aeabi_uldivmod>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4b60      	ldr	r3, [pc, #384]	; (8003a90 <UART_SetConfig+0x4e4>)
 800390e:	fba3 2302 	umull	r2, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	011c      	lsls	r4, r3, #4
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391a:	2200      	movs	r2, #0
 800391c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003920:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	1891      	adds	r1, r2, r2
 800392e:	61b9      	str	r1, [r7, #24]
 8003930:	415b      	adcs	r3, r3
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003938:	4641      	mov	r1, r8
 800393a:	1851      	adds	r1, r2, r1
 800393c:	6139      	str	r1, [r7, #16]
 800393e:	4649      	mov	r1, r9
 8003940:	414b      	adcs	r3, r1
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	f04f 0300 	mov.w	r3, #0
 800394c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003950:	4659      	mov	r1, fp
 8003952:	00cb      	lsls	r3, r1, #3
 8003954:	4651      	mov	r1, sl
 8003956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395a:	4651      	mov	r1, sl
 800395c:	00ca      	lsls	r2, r1, #3
 800395e:	4610      	mov	r0, r2
 8003960:	4619      	mov	r1, r3
 8003962:	4603      	mov	r3, r0
 8003964:	4642      	mov	r2, r8
 8003966:	189b      	adds	r3, r3, r2
 8003968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800396c:	464b      	mov	r3, r9
 800396e:	460a      	mov	r2, r1
 8003970:	eb42 0303 	adc.w	r3, r2, r3
 8003974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	67bb      	str	r3, [r7, #120]	; 0x78
 8003982:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003990:	4649      	mov	r1, r9
 8003992:	008b      	lsls	r3, r1, #2
 8003994:	4641      	mov	r1, r8
 8003996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800399a:	4641      	mov	r1, r8
 800399c:	008a      	lsls	r2, r1, #2
 800399e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039a2:	f7fc fc17 	bl	80001d4 <__aeabi_uldivmod>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4b39      	ldr	r3, [pc, #228]	; (8003a90 <UART_SetConfig+0x4e4>)
 80039ac:	fba3 1302 	umull	r1, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2164      	movs	r1, #100	; 0x64
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a34      	ldr	r2, [pc, #208]	; (8003a90 <UART_SetConfig+0x4e4>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039ca:	441c      	add	r4, r3
 80039cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d0:	2200      	movs	r2, #0
 80039d2:	673b      	str	r3, [r7, #112]	; 0x70
 80039d4:	677a      	str	r2, [r7, #116]	; 0x74
 80039d6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039da:	4642      	mov	r2, r8
 80039dc:	464b      	mov	r3, r9
 80039de:	1891      	adds	r1, r2, r2
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	415b      	adcs	r3, r3
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ea:	4641      	mov	r1, r8
 80039ec:	1851      	adds	r1, r2, r1
 80039ee:	6039      	str	r1, [r7, #0]
 80039f0:	4649      	mov	r1, r9
 80039f2:	414b      	adcs	r3, r1
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a02:	4659      	mov	r1, fp
 8003a04:	00cb      	lsls	r3, r1, #3
 8003a06:	4651      	mov	r1, sl
 8003a08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a0c:	4651      	mov	r1, sl
 8003a0e:	00ca      	lsls	r2, r1, #3
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	4603      	mov	r3, r0
 8003a16:	4642      	mov	r2, r8
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a1c:	464b      	mov	r3, r9
 8003a1e:	460a      	mov	r2, r1
 8003a20:	eb42 0303 	adc.w	r3, r2, r3
 8003a24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a30:	667a      	str	r2, [r7, #100]	; 0x64
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a3e:	4649      	mov	r1, r9
 8003a40:	008b      	lsls	r3, r1, #2
 8003a42:	4641      	mov	r1, r8
 8003a44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a48:	4641      	mov	r1, r8
 8003a4a:	008a      	lsls	r2, r1, #2
 8003a4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a50:	f7fc fbc0 	bl	80001d4 <__aeabi_uldivmod>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <UART_SetConfig+0x4e4>)
 8003a5a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	2164      	movs	r1, #100	; 0x64
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	3332      	adds	r3, #50	; 0x32
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <UART_SetConfig+0x4e4>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	095b      	lsrs	r3, r3, #5
 8003a74:	f003 020f 	and.w	r2, r3, #15
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4422      	add	r2, r4
 8003a80:	609a      	str	r2, [r3, #8]
}
 8003a82:	bf00      	nop
 8003a84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	51eb851f 	.word	0x51eb851f

08003a94 <_ZdlPvj>:
 8003a94:	f000 b811 	b.w	8003aba <_ZdlPv>

08003a98 <_Znwj>:
 8003a98:	2801      	cmp	r0, #1
 8003a9a:	bf38      	it	cc
 8003a9c:	2001      	movcc	r0, #1
 8003a9e:	b510      	push	{r4, lr}
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f000 f846 	bl	8003b34 <malloc>
 8003aa8:	b930      	cbnz	r0, 8003ab8 <_Znwj+0x20>
 8003aaa:	f000 f809 	bl	8003ac0 <_ZSt15get_new_handlerv>
 8003aae:	b908      	cbnz	r0, 8003ab4 <_Znwj+0x1c>
 8003ab0:	f000 f80e 	bl	8003ad0 <abort>
 8003ab4:	4780      	blx	r0
 8003ab6:	e7f4      	b.n	8003aa2 <_Znwj+0xa>
 8003ab8:	bd10      	pop	{r4, pc}

08003aba <_ZdlPv>:
 8003aba:	f000 b843 	b.w	8003b44 <free>
	...

08003ac0 <_ZSt15get_new_handlerv>:
 8003ac0:	4b02      	ldr	r3, [pc, #8]	; (8003acc <_ZSt15get_new_handlerv+0xc>)
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	f3bf 8f5b 	dmb	ish
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000dac 	.word	0x20000dac

08003ad0 <abort>:
 8003ad0:	b508      	push	{r3, lr}
 8003ad2:	2006      	movs	r0, #6
 8003ad4:	f000 f95e 	bl	8003d94 <raise>
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f7fd f88d 	bl	8000bf8 <_exit>
	...

08003ae0 <__errno>:
 8003ae0:	4b01      	ldr	r3, [pc, #4]	; (8003ae8 <__errno+0x8>)
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	20000014 	.word	0x20000014

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	4d0d      	ldr	r5, [pc, #52]	; (8003b24 <__libc_init_array+0x38>)
 8003af0:	4c0d      	ldr	r4, [pc, #52]	; (8003b28 <__libc_init_array+0x3c>)
 8003af2:	1b64      	subs	r4, r4, r5
 8003af4:	10a4      	asrs	r4, r4, #2
 8003af6:	2600      	movs	r6, #0
 8003af8:	42a6      	cmp	r6, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	4d0b      	ldr	r5, [pc, #44]	; (8003b2c <__libc_init_array+0x40>)
 8003afe:	4c0c      	ldr	r4, [pc, #48]	; (8003b30 <__libc_init_array+0x44>)
 8003b00:	f000 f972 	bl	8003de8 <_init>
 8003b04:	1b64      	subs	r4, r4, r5
 8003b06:	10a4      	asrs	r4, r4, #2
 8003b08:	2600      	movs	r6, #0
 8003b0a:	42a6      	cmp	r6, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b14:	4798      	blx	r3
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1e:	4798      	blx	r3
 8003b20:	3601      	adds	r6, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08003e28 	.word	0x08003e28
 8003b28:	08003e28 	.word	0x08003e28
 8003b2c:	08003e28 	.word	0x08003e28
 8003b30:	08003e30 	.word	0x08003e30

08003b34 <malloc>:
 8003b34:	4b02      	ldr	r3, [pc, #8]	; (8003b40 <malloc+0xc>)
 8003b36:	4601      	mov	r1, r0
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	f000 b87f 	b.w	8003c3c <_malloc_r>
 8003b3e:	bf00      	nop
 8003b40:	20000014 	.word	0x20000014

08003b44 <free>:
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <free+0xc>)
 8003b46:	4601      	mov	r1, r0
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	f000 b80b 	b.w	8003b64 <_free_r>
 8003b4e:	bf00      	nop
 8003b50:	20000014 	.word	0x20000014

08003b54 <memset>:
 8003b54:	4402      	add	r2, r0
 8003b56:	4603      	mov	r3, r0
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d100      	bne.n	8003b5e <memset+0xa>
 8003b5c:	4770      	bx	lr
 8003b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b62:	e7f9      	b.n	8003b58 <memset+0x4>

08003b64 <_free_r>:
 8003b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b66:	2900      	cmp	r1, #0
 8003b68:	d044      	beq.n	8003bf4 <_free_r+0x90>
 8003b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b6e:	9001      	str	r0, [sp, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f1a1 0404 	sub.w	r4, r1, #4
 8003b76:	bfb8      	it	lt
 8003b78:	18e4      	addlt	r4, r4, r3
 8003b7a:	f000 f927 	bl	8003dcc <__malloc_lock>
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <_free_r+0x94>)
 8003b80:	9801      	ldr	r0, [sp, #4]
 8003b82:	6813      	ldr	r3, [r2, #0]
 8003b84:	b933      	cbnz	r3, 8003b94 <_free_r+0x30>
 8003b86:	6063      	str	r3, [r4, #4]
 8003b88:	6014      	str	r4, [r2, #0]
 8003b8a:	b003      	add	sp, #12
 8003b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b90:	f000 b922 	b.w	8003dd8 <__malloc_unlock>
 8003b94:	42a3      	cmp	r3, r4
 8003b96:	d908      	bls.n	8003baa <_free_r+0x46>
 8003b98:	6825      	ldr	r5, [r4, #0]
 8003b9a:	1961      	adds	r1, r4, r5
 8003b9c:	428b      	cmp	r3, r1
 8003b9e:	bf01      	itttt	eq
 8003ba0:	6819      	ldreq	r1, [r3, #0]
 8003ba2:	685b      	ldreq	r3, [r3, #4]
 8003ba4:	1949      	addeq	r1, r1, r5
 8003ba6:	6021      	streq	r1, [r4, #0]
 8003ba8:	e7ed      	b.n	8003b86 <_free_r+0x22>
 8003baa:	461a      	mov	r2, r3
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	b10b      	cbz	r3, 8003bb4 <_free_r+0x50>
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	d9fa      	bls.n	8003baa <_free_r+0x46>
 8003bb4:	6811      	ldr	r1, [r2, #0]
 8003bb6:	1855      	adds	r5, r2, r1
 8003bb8:	42a5      	cmp	r5, r4
 8003bba:	d10b      	bne.n	8003bd4 <_free_r+0x70>
 8003bbc:	6824      	ldr	r4, [r4, #0]
 8003bbe:	4421      	add	r1, r4
 8003bc0:	1854      	adds	r4, r2, r1
 8003bc2:	42a3      	cmp	r3, r4
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	d1e0      	bne.n	8003b8a <_free_r+0x26>
 8003bc8:	681c      	ldr	r4, [r3, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	6053      	str	r3, [r2, #4]
 8003bce:	4421      	add	r1, r4
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	e7da      	b.n	8003b8a <_free_r+0x26>
 8003bd4:	d902      	bls.n	8003bdc <_free_r+0x78>
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	6003      	str	r3, [r0, #0]
 8003bda:	e7d6      	b.n	8003b8a <_free_r+0x26>
 8003bdc:	6825      	ldr	r5, [r4, #0]
 8003bde:	1961      	adds	r1, r4, r5
 8003be0:	428b      	cmp	r3, r1
 8003be2:	bf04      	itt	eq
 8003be4:	6819      	ldreq	r1, [r3, #0]
 8003be6:	685b      	ldreq	r3, [r3, #4]
 8003be8:	6063      	str	r3, [r4, #4]
 8003bea:	bf04      	itt	eq
 8003bec:	1949      	addeq	r1, r1, r5
 8003bee:	6021      	streq	r1, [r4, #0]
 8003bf0:	6054      	str	r4, [r2, #4]
 8003bf2:	e7ca      	b.n	8003b8a <_free_r+0x26>
 8003bf4:	b003      	add	sp, #12
 8003bf6:	bd30      	pop	{r4, r5, pc}
 8003bf8:	20000db0 	.word	0x20000db0

08003bfc <sbrk_aligned>:
 8003bfc:	b570      	push	{r4, r5, r6, lr}
 8003bfe:	4e0e      	ldr	r6, [pc, #56]	; (8003c38 <sbrk_aligned+0x3c>)
 8003c00:	460c      	mov	r4, r1
 8003c02:	6831      	ldr	r1, [r6, #0]
 8003c04:	4605      	mov	r5, r0
 8003c06:	b911      	cbnz	r1, 8003c0e <sbrk_aligned+0x12>
 8003c08:	f000 f88c 	bl	8003d24 <_sbrk_r>
 8003c0c:	6030      	str	r0, [r6, #0]
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4628      	mov	r0, r5
 8003c12:	f000 f887 	bl	8003d24 <_sbrk_r>
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	d00a      	beq.n	8003c30 <sbrk_aligned+0x34>
 8003c1a:	1cc4      	adds	r4, r0, #3
 8003c1c:	f024 0403 	bic.w	r4, r4, #3
 8003c20:	42a0      	cmp	r0, r4
 8003c22:	d007      	beq.n	8003c34 <sbrk_aligned+0x38>
 8003c24:	1a21      	subs	r1, r4, r0
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 f87c 	bl	8003d24 <_sbrk_r>
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d101      	bne.n	8003c34 <sbrk_aligned+0x38>
 8003c30:	f04f 34ff 	mov.w	r4, #4294967295
 8003c34:	4620      	mov	r0, r4
 8003c36:	bd70      	pop	{r4, r5, r6, pc}
 8003c38:	20000db4 	.word	0x20000db4

08003c3c <_malloc_r>:
 8003c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c40:	1ccd      	adds	r5, r1, #3
 8003c42:	f025 0503 	bic.w	r5, r5, #3
 8003c46:	3508      	adds	r5, #8
 8003c48:	2d0c      	cmp	r5, #12
 8003c4a:	bf38      	it	cc
 8003c4c:	250c      	movcc	r5, #12
 8003c4e:	2d00      	cmp	r5, #0
 8003c50:	4607      	mov	r7, r0
 8003c52:	db01      	blt.n	8003c58 <_malloc_r+0x1c>
 8003c54:	42a9      	cmp	r1, r5
 8003c56:	d905      	bls.n	8003c64 <_malloc_r+0x28>
 8003c58:	230c      	movs	r3, #12
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	4630      	mov	r0, r6
 8003c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c64:	4e2e      	ldr	r6, [pc, #184]	; (8003d20 <_malloc_r+0xe4>)
 8003c66:	f000 f8b1 	bl	8003dcc <__malloc_lock>
 8003c6a:	6833      	ldr	r3, [r6, #0]
 8003c6c:	461c      	mov	r4, r3
 8003c6e:	bb34      	cbnz	r4, 8003cbe <_malloc_r+0x82>
 8003c70:	4629      	mov	r1, r5
 8003c72:	4638      	mov	r0, r7
 8003c74:	f7ff ffc2 	bl	8003bfc <sbrk_aligned>
 8003c78:	1c43      	adds	r3, r0, #1
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	d14d      	bne.n	8003d1a <_malloc_r+0xde>
 8003c7e:	6834      	ldr	r4, [r6, #0]
 8003c80:	4626      	mov	r6, r4
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	d140      	bne.n	8003d08 <_malloc_r+0xcc>
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	4631      	mov	r1, r6
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	eb04 0803 	add.w	r8, r4, r3
 8003c90:	f000 f848 	bl	8003d24 <_sbrk_r>
 8003c94:	4580      	cmp	r8, r0
 8003c96:	d13a      	bne.n	8003d0e <_malloc_r+0xd2>
 8003c98:	6821      	ldr	r1, [r4, #0]
 8003c9a:	3503      	adds	r5, #3
 8003c9c:	1a6d      	subs	r5, r5, r1
 8003c9e:	f025 0503 	bic.w	r5, r5, #3
 8003ca2:	3508      	adds	r5, #8
 8003ca4:	2d0c      	cmp	r5, #12
 8003ca6:	bf38      	it	cc
 8003ca8:	250c      	movcc	r5, #12
 8003caa:	4629      	mov	r1, r5
 8003cac:	4638      	mov	r0, r7
 8003cae:	f7ff ffa5 	bl	8003bfc <sbrk_aligned>
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d02b      	beq.n	8003d0e <_malloc_r+0xd2>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	442b      	add	r3, r5
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	e00e      	b.n	8003cdc <_malloc_r+0xa0>
 8003cbe:	6822      	ldr	r2, [r4, #0]
 8003cc0:	1b52      	subs	r2, r2, r5
 8003cc2:	d41e      	bmi.n	8003d02 <_malloc_r+0xc6>
 8003cc4:	2a0b      	cmp	r2, #11
 8003cc6:	d916      	bls.n	8003cf6 <_malloc_r+0xba>
 8003cc8:	1961      	adds	r1, r4, r5
 8003cca:	42a3      	cmp	r3, r4
 8003ccc:	6025      	str	r5, [r4, #0]
 8003cce:	bf18      	it	ne
 8003cd0:	6059      	strne	r1, [r3, #4]
 8003cd2:	6863      	ldr	r3, [r4, #4]
 8003cd4:	bf08      	it	eq
 8003cd6:	6031      	streq	r1, [r6, #0]
 8003cd8:	5162      	str	r2, [r4, r5]
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	4638      	mov	r0, r7
 8003cde:	f104 060b 	add.w	r6, r4, #11
 8003ce2:	f000 f879 	bl	8003dd8 <__malloc_unlock>
 8003ce6:	f026 0607 	bic.w	r6, r6, #7
 8003cea:	1d23      	adds	r3, r4, #4
 8003cec:	1af2      	subs	r2, r6, r3
 8003cee:	d0b6      	beq.n	8003c5e <_malloc_r+0x22>
 8003cf0:	1b9b      	subs	r3, r3, r6
 8003cf2:	50a3      	str	r3, [r4, r2]
 8003cf4:	e7b3      	b.n	8003c5e <_malloc_r+0x22>
 8003cf6:	6862      	ldr	r2, [r4, #4]
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	bf0c      	ite	eq
 8003cfc:	6032      	streq	r2, [r6, #0]
 8003cfe:	605a      	strne	r2, [r3, #4]
 8003d00:	e7ec      	b.n	8003cdc <_malloc_r+0xa0>
 8003d02:	4623      	mov	r3, r4
 8003d04:	6864      	ldr	r4, [r4, #4]
 8003d06:	e7b2      	b.n	8003c6e <_malloc_r+0x32>
 8003d08:	4634      	mov	r4, r6
 8003d0a:	6876      	ldr	r6, [r6, #4]
 8003d0c:	e7b9      	b.n	8003c82 <_malloc_r+0x46>
 8003d0e:	230c      	movs	r3, #12
 8003d10:	603b      	str	r3, [r7, #0]
 8003d12:	4638      	mov	r0, r7
 8003d14:	f000 f860 	bl	8003dd8 <__malloc_unlock>
 8003d18:	e7a1      	b.n	8003c5e <_malloc_r+0x22>
 8003d1a:	6025      	str	r5, [r4, #0]
 8003d1c:	e7de      	b.n	8003cdc <_malloc_r+0xa0>
 8003d1e:	bf00      	nop
 8003d20:	20000db0 	.word	0x20000db0

08003d24 <_sbrk_r>:
 8003d24:	b538      	push	{r3, r4, r5, lr}
 8003d26:	4d06      	ldr	r5, [pc, #24]	; (8003d40 <_sbrk_r+0x1c>)
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	602b      	str	r3, [r5, #0]
 8003d30:	f7fc ff6c 	bl	8000c0c <_sbrk>
 8003d34:	1c43      	adds	r3, r0, #1
 8003d36:	d102      	bne.n	8003d3e <_sbrk_r+0x1a>
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	b103      	cbz	r3, 8003d3e <_sbrk_r+0x1a>
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	20000db8 	.word	0x20000db8

08003d44 <_raise_r>:
 8003d44:	291f      	cmp	r1, #31
 8003d46:	b538      	push	{r3, r4, r5, lr}
 8003d48:	4604      	mov	r4, r0
 8003d4a:	460d      	mov	r5, r1
 8003d4c:	d904      	bls.n	8003d58 <_raise_r+0x14>
 8003d4e:	2316      	movs	r3, #22
 8003d50:	6003      	str	r3, [r0, #0]
 8003d52:	f04f 30ff 	mov.w	r0, #4294967295
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
 8003d58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003d5a:	b112      	cbz	r2, 8003d62 <_raise_r+0x1e>
 8003d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d60:	b94b      	cbnz	r3, 8003d76 <_raise_r+0x32>
 8003d62:	4620      	mov	r0, r4
 8003d64:	f000 f830 	bl	8003dc8 <_getpid_r>
 8003d68:	462a      	mov	r2, r5
 8003d6a:	4601      	mov	r1, r0
 8003d6c:	4620      	mov	r0, r4
 8003d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d72:	f000 b817 	b.w	8003da4 <_kill_r>
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d00a      	beq.n	8003d90 <_raise_r+0x4c>
 8003d7a:	1c59      	adds	r1, r3, #1
 8003d7c:	d103      	bne.n	8003d86 <_raise_r+0x42>
 8003d7e:	2316      	movs	r3, #22
 8003d80:	6003      	str	r3, [r0, #0]
 8003d82:	2001      	movs	r0, #1
 8003d84:	e7e7      	b.n	8003d56 <_raise_r+0x12>
 8003d86:	2400      	movs	r4, #0
 8003d88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003d8c:	4628      	mov	r0, r5
 8003d8e:	4798      	blx	r3
 8003d90:	2000      	movs	r0, #0
 8003d92:	e7e0      	b.n	8003d56 <_raise_r+0x12>

08003d94 <raise>:
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <raise+0xc>)
 8003d96:	4601      	mov	r1, r0
 8003d98:	6818      	ldr	r0, [r3, #0]
 8003d9a:	f7ff bfd3 	b.w	8003d44 <_raise_r>
 8003d9e:	bf00      	nop
 8003da0:	20000014 	.word	0x20000014

08003da4 <_kill_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	4d07      	ldr	r5, [pc, #28]	; (8003dc4 <_kill_r+0x20>)
 8003da8:	2300      	movs	r3, #0
 8003daa:	4604      	mov	r4, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	602b      	str	r3, [r5, #0]
 8003db2:	f7fc ff11 	bl	8000bd8 <_kill>
 8003db6:	1c43      	adds	r3, r0, #1
 8003db8:	d102      	bne.n	8003dc0 <_kill_r+0x1c>
 8003dba:	682b      	ldr	r3, [r5, #0]
 8003dbc:	b103      	cbz	r3, 8003dc0 <_kill_r+0x1c>
 8003dbe:	6023      	str	r3, [r4, #0]
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000db8 	.word	0x20000db8

08003dc8 <_getpid_r>:
 8003dc8:	f7fc befe 	b.w	8000bc8 <_getpid>

08003dcc <__malloc_lock>:
 8003dcc:	4801      	ldr	r0, [pc, #4]	; (8003dd4 <__malloc_lock+0x8>)
 8003dce:	f000 b809 	b.w	8003de4 <__retarget_lock_acquire_recursive>
 8003dd2:	bf00      	nop
 8003dd4:	20000dbc 	.word	0x20000dbc

08003dd8 <__malloc_unlock>:
 8003dd8:	4801      	ldr	r0, [pc, #4]	; (8003de0 <__malloc_unlock+0x8>)
 8003dda:	f000 b804 	b.w	8003de6 <__retarget_lock_release_recursive>
 8003dde:	bf00      	nop
 8003de0:	20000dbc 	.word	0x20000dbc

08003de4 <__retarget_lock_acquire_recursive>:
 8003de4:	4770      	bx	lr

08003de6 <__retarget_lock_release_recursive>:
 8003de6:	4770      	bx	lr

08003de8 <_init>:
 8003de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dea:	bf00      	nop
 8003dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dee:	bc08      	pop	{r3}
 8003df0:	469e      	mov	lr, r3
 8003df2:	4770      	bx	lr

08003df4 <_fini>:
 8003df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df6:	bf00      	nop
 8003df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dfa:	bc08      	pop	{r3}
 8003dfc:	469e      	mov	lr, r3
 8003dfe:	4770      	bx	lr
