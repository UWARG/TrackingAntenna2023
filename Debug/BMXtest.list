
BMXtest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007474  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08007668  08007668  00017668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007700  08007700  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007700  08007700  00017700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007708  08007708  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800770c  0800770c  0001770c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007710  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000088  08007798  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08007798  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022e1d  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004831  00000000  00000000  00042edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019c8  00000000  00000000  00047710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  000490d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003321e  00000000  00000000  0004a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002115d  00000000  00000000  0007dae6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013019d  00000000  00000000  0009ec43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cede0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007074  00000000  00000000  001cee30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000088 	.word	0x20000088
 8000210:	00000000 	.word	0x00000000
 8000214:	08007650 	.word	0x08007650

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000008c 	.word	0x2000008c
 8000230:	08007650 	.word	0x08007650

08000234 <__aeabi_drsub>:
 8000234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__adddf3>
 800023a:	bf00      	nop

0800023c <__aeabi_dsub>:
 800023c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000240 <__adddf3>:
 8000240:	b530      	push	{r4, r5, lr}
 8000242:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000246:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024a:	ea94 0f05 	teq	r4, r5
 800024e:	bf08      	it	eq
 8000250:	ea90 0f02 	teqeq	r0, r2
 8000254:	bf1f      	itttt	ne
 8000256:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000266:	f000 80e2 	beq.w	800042e <__adddf3+0x1ee>
 800026a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000272:	bfb8      	it	lt
 8000274:	426d      	neglt	r5, r5
 8000276:	dd0c      	ble.n	8000292 <__adddf3+0x52>
 8000278:	442c      	add	r4, r5
 800027a:	ea80 0202 	eor.w	r2, r0, r2
 800027e:	ea81 0303 	eor.w	r3, r1, r3
 8000282:	ea82 0000 	eor.w	r0, r2, r0
 8000286:	ea83 0101 	eor.w	r1, r3, r1
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	2d36      	cmp	r5, #54	; 0x36
 8000294:	bf88      	it	hi
 8000296:	bd30      	pophi	{r4, r5, pc}
 8000298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800029c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x70>
 80002aa:	4240      	negs	r0, r0
 80002ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x84>
 80002be:	4252      	negs	r2, r2
 80002c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c4:	ea94 0f05 	teq	r4, r5
 80002c8:	f000 80a7 	beq.w	800041a <__adddf3+0x1da>
 80002cc:	f1a4 0401 	sub.w	r4, r4, #1
 80002d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d4:	db0d      	blt.n	80002f2 <__adddf3+0xb2>
 80002d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002da:	fa22 f205 	lsr.w	r2, r2, r5
 80002de:	1880      	adds	r0, r0, r2
 80002e0:	f141 0100 	adc.w	r1, r1, #0
 80002e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e8:	1880      	adds	r0, r0, r2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	4159      	adcs	r1, r3
 80002f0:	e00e      	b.n	8000310 <__adddf3+0xd0>
 80002f2:	f1a5 0520 	sub.w	r5, r5, #32
 80002f6:	f10e 0e20 	add.w	lr, lr, #32
 80002fa:	2a01      	cmp	r2, #1
 80002fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000300:	bf28      	it	cs
 8000302:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	18c0      	adds	r0, r0, r3
 800030c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000314:	d507      	bpl.n	8000326 <__adddf3+0xe6>
 8000316:	f04f 0e00 	mov.w	lr, #0
 800031a:	f1dc 0c00 	rsbs	ip, ip, #0
 800031e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000322:	eb6e 0101 	sbc.w	r1, lr, r1
 8000326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032a:	d31b      	bcc.n	8000364 <__adddf3+0x124>
 800032c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000330:	d30c      	bcc.n	800034c <__adddf3+0x10c>
 8000332:	0849      	lsrs	r1, r1, #1
 8000334:	ea5f 0030 	movs.w	r0, r0, rrx
 8000338:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800033c:	f104 0401 	add.w	r4, r4, #1
 8000340:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000348:	f080 809a 	bcs.w	8000480 <__adddf3+0x240>
 800034c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000350:	bf08      	it	eq
 8000352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000356:	f150 0000 	adcs.w	r0, r0, #0
 800035a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035e:	ea41 0105 	orr.w	r1, r1, r5
 8000362:	bd30      	pop	{r4, r5, pc}
 8000364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000368:	4140      	adcs	r0, r0
 800036a:	eb41 0101 	adc.w	r1, r1, r1
 800036e:	3c01      	subs	r4, #1
 8000370:	bf28      	it	cs
 8000372:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000376:	d2e9      	bcs.n	800034c <__adddf3+0x10c>
 8000378:	f091 0f00 	teq	r1, #0
 800037c:	bf04      	itt	eq
 800037e:	4601      	moveq	r1, r0
 8000380:	2000      	moveq	r0, #0
 8000382:	fab1 f381 	clz	r3, r1
 8000386:	bf08      	it	eq
 8000388:	3320      	addeq	r3, #32
 800038a:	f1a3 030b 	sub.w	r3, r3, #11
 800038e:	f1b3 0220 	subs.w	r2, r3, #32
 8000392:	da0c      	bge.n	80003ae <__adddf3+0x16e>
 8000394:	320c      	adds	r2, #12
 8000396:	dd08      	ble.n	80003aa <__adddf3+0x16a>
 8000398:	f102 0c14 	add.w	ip, r2, #20
 800039c:	f1c2 020c 	rsb	r2, r2, #12
 80003a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a4:	fa21 f102 	lsr.w	r1, r1, r2
 80003a8:	e00c      	b.n	80003c4 <__adddf3+0x184>
 80003aa:	f102 0214 	add.w	r2, r2, #20
 80003ae:	bfd8      	it	le
 80003b0:	f1c2 0c20 	rsble	ip, r2, #32
 80003b4:	fa01 f102 	lsl.w	r1, r1, r2
 80003b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003bc:	bfdc      	itt	le
 80003be:	ea41 010c 	orrle.w	r1, r1, ip
 80003c2:	4090      	lslle	r0, r2
 80003c4:	1ae4      	subs	r4, r4, r3
 80003c6:	bfa2      	ittt	ge
 80003c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003cc:	4329      	orrge	r1, r5
 80003ce:	bd30      	popge	{r4, r5, pc}
 80003d0:	ea6f 0404 	mvn.w	r4, r4
 80003d4:	3c1f      	subs	r4, #31
 80003d6:	da1c      	bge.n	8000412 <__adddf3+0x1d2>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc0e      	bgt.n	80003fa <__adddf3+0x1ba>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0220 	rsb	r2, r4, #32
 80003e4:	fa20 f004 	lsr.w	r0, r0, r4
 80003e8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ec:	ea40 0003 	orr.w	r0, r0, r3
 80003f0:	fa21 f304 	lsr.w	r3, r1, r4
 80003f4:	ea45 0103 	orr.w	r1, r5, r3
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	f1c4 040c 	rsb	r4, r4, #12
 80003fe:	f1c4 0220 	rsb	r2, r4, #32
 8000402:	fa20 f002 	lsr.w	r0, r0, r2
 8000406:	fa01 f304 	lsl.w	r3, r1, r4
 800040a:	ea40 0003 	orr.w	r0, r0, r3
 800040e:	4629      	mov	r1, r5
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	fa21 f004 	lsr.w	r0, r1, r4
 8000416:	4629      	mov	r1, r5
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f094 0f00 	teq	r4, #0
 800041e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000422:	bf06      	itte	eq
 8000424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000428:	3401      	addeq	r4, #1
 800042a:	3d01      	subne	r5, #1
 800042c:	e74e      	b.n	80002cc <__adddf3+0x8c>
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf18      	it	ne
 8000434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000438:	d029      	beq.n	800048e <__adddf3+0x24e>
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	d005      	beq.n	8000452 <__adddf3+0x212>
 8000446:	ea54 0c00 	orrs.w	ip, r4, r0
 800044a:	bf04      	itt	eq
 800044c:	4619      	moveq	r1, r3
 800044e:	4610      	moveq	r0, r2
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	ea91 0f03 	teq	r1, r3
 8000456:	bf1e      	ittt	ne
 8000458:	2100      	movne	r1, #0
 800045a:	2000      	movne	r0, #0
 800045c:	bd30      	popne	{r4, r5, pc}
 800045e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000462:	d105      	bne.n	8000470 <__adddf3+0x230>
 8000464:	0040      	lsls	r0, r0, #1
 8000466:	4149      	adcs	r1, r1
 8000468:	bf28      	it	cs
 800046a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000474:	bf3c      	itt	cc
 8000476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047a:	bd30      	popcc	{r4, r5, pc}
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000488:	f04f 0000 	mov.w	r0, #0
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf1a      	itte	ne
 8000494:	4619      	movne	r1, r3
 8000496:	4610      	movne	r0, r2
 8000498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800049c:	bf1c      	itt	ne
 800049e:	460b      	movne	r3, r1
 80004a0:	4602      	movne	r2, r0
 80004a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a6:	bf06      	itte	eq
 80004a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004ac:	ea91 0f03 	teqeq	r1, r3
 80004b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	bf00      	nop

080004b8 <__aeabi_ui2d>:
 80004b8:	f090 0f00 	teq	r0, #0
 80004bc:	bf04      	itt	eq
 80004be:	2100      	moveq	r1, #0
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004cc:	f04f 0500 	mov.w	r5, #0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e750      	b.n	8000378 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_i2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f0:	bf48      	it	mi
 80004f2:	4240      	negmi	r0, r0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e73e      	b.n	8000378 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_f2d>:
 80004fc:	0042      	lsls	r2, r0, #1
 80004fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000502:	ea4f 0131 	mov.w	r1, r1, rrx
 8000506:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050a:	bf1f      	itttt	ne
 800050c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000518:	4770      	bxne	lr
 800051a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051e:	bf08      	it	eq
 8000520:	4770      	bxeq	lr
 8000522:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000526:	bf04      	itt	eq
 8000528:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000534:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000538:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800053c:	e71c      	b.n	8000378 <__adddf3+0x138>
 800053e:	bf00      	nop

08000540 <__aeabi_ul2d>:
 8000540:	ea50 0201 	orrs.w	r2, r0, r1
 8000544:	bf08      	it	eq
 8000546:	4770      	bxeq	lr
 8000548:	b530      	push	{r4, r5, lr}
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	e00a      	b.n	8000566 <__aeabi_l2d+0x16>

08000550 <__aeabi_l2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055e:	d502      	bpl.n	8000566 <__aeabi_l2d+0x16>
 8000560:	4240      	negs	r0, r0
 8000562:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000566:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000572:	f43f aed8 	beq.w	8000326 <__adddf3+0xe6>
 8000576:	f04f 0203 	mov.w	r2, #3
 800057a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057e:	bf18      	it	ne
 8000580:	3203      	addne	r2, #3
 8000582:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000586:	bf18      	it	ne
 8000588:	3203      	addne	r2, #3
 800058a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058e:	f1c2 0320 	rsb	r3, r2, #32
 8000592:	fa00 fc03 	lsl.w	ip, r0, r3
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	fa01 fe03 	lsl.w	lr, r1, r3
 800059e:	ea40 000e 	orr.w	r0, r0, lr
 80005a2:	fa21 f102 	lsr.w	r1, r1, r2
 80005a6:	4414      	add	r4, r2
 80005a8:	e6bd      	b.n	8000326 <__adddf3+0xe6>
 80005aa:	bf00      	nop

080005ac <__aeabi_dmul>:
 80005ac:	b570      	push	{r4, r5, r6, lr}
 80005ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ba:	bf1d      	ittte	ne
 80005bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c0:	ea94 0f0c 	teqne	r4, ip
 80005c4:	ea95 0f0c 	teqne	r5, ip
 80005c8:	f000 f8de 	bleq	8000788 <__aeabi_dmul+0x1dc>
 80005cc:	442c      	add	r4, r5
 80005ce:	ea81 0603 	eor.w	r6, r1, r3
 80005d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005de:	bf18      	it	ne
 80005e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005ec:	d038      	beq.n	8000660 <__aeabi_dmul+0xb4>
 80005ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f2:	f04f 0500 	mov.w	r5, #0
 80005f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000602:	f04f 0600 	mov.w	r6, #0
 8000606:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060a:	f09c 0f00 	teq	ip, #0
 800060e:	bf18      	it	ne
 8000610:	f04e 0e01 	orrne.w	lr, lr, #1
 8000614:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000618:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800061c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000620:	d204      	bcs.n	800062c <__aeabi_dmul+0x80>
 8000622:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000626:	416d      	adcs	r5, r5
 8000628:	eb46 0606 	adc.w	r6, r6, r6
 800062c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000630:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000634:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000638:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800063c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000640:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000644:	bf88      	it	hi
 8000646:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064a:	d81e      	bhi.n	800068a <__aeabi_dmul+0xde>
 800064c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000664:	ea46 0101 	orr.w	r1, r6, r1
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	ea81 0103 	eor.w	r1, r1, r3
 8000670:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000674:	bfc2      	ittt	gt
 8000676:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067e:	bd70      	popgt	{r4, r5, r6, pc}
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f04f 0e00 	mov.w	lr, #0
 8000688:	3c01      	subs	r4, #1
 800068a:	f300 80ab 	bgt.w	80007e4 <__aeabi_dmul+0x238>
 800068e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000692:	bfde      	ittt	le
 8000694:	2000      	movle	r0, #0
 8000696:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069a:	bd70      	pople	{r4, r5, r6, pc}
 800069c:	f1c4 0400 	rsb	r4, r4, #0
 80006a0:	3c20      	subs	r4, #32
 80006a2:	da35      	bge.n	8000710 <__aeabi_dmul+0x164>
 80006a4:	340c      	adds	r4, #12
 80006a6:	dc1b      	bgt.n	80006e0 <__aeabi_dmul+0x134>
 80006a8:	f104 0414 	add.w	r4, r4, #20
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f305 	lsl.w	r3, r0, r5
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f205 	lsl.w	r2, r1, r5
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	fa21 f604 	lsr.w	r6, r1, r4
 80006d0:	eb42 0106 	adc.w	r1, r2, r6
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 040c 	rsb	r4, r4, #12
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ec:	fa20 f005 	lsr.w	r0, r0, r5
 80006f0:	fa01 f204 	lsl.w	r2, r1, r4
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	f141 0100 	adc.w	r1, r1, #0
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f205 	lsl.w	r2, r0, r5
 8000718:	ea4e 0e02 	orr.w	lr, lr, r2
 800071c:	fa20 f304 	lsr.w	r3, r0, r4
 8000720:	fa01 f205 	lsl.w	r2, r1, r5
 8000724:	ea43 0302 	orr.w	r3, r3, r2
 8000728:	fa21 f004 	lsr.w	r0, r1, r4
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	fa21 f204 	lsr.w	r2, r1, r4
 8000734:	ea20 0002 	bic.w	r0, r0, r2
 8000738:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800073c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000740:	bf08      	it	eq
 8000742:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f094 0f00 	teq	r4, #0
 800074c:	d10f      	bne.n	800076e <__aeabi_dmul+0x1c2>
 800074e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000752:	0040      	lsls	r0, r0, #1
 8000754:	eb41 0101 	adc.w	r1, r1, r1
 8000758:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800075c:	bf08      	it	eq
 800075e:	3c01      	subeq	r4, #1
 8000760:	d0f7      	beq.n	8000752 <__aeabi_dmul+0x1a6>
 8000762:	ea41 0106 	orr.w	r1, r1, r6
 8000766:	f095 0f00 	teq	r5, #0
 800076a:	bf18      	it	ne
 800076c:	4770      	bxne	lr
 800076e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000772:	0052      	lsls	r2, r2, #1
 8000774:	eb43 0303 	adc.w	r3, r3, r3
 8000778:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3d01      	subeq	r5, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1c6>
 8000782:	ea43 0306 	orr.w	r3, r3, r6
 8000786:	4770      	bx	lr
 8000788:	ea94 0f0c 	teq	r4, ip
 800078c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000790:	bf18      	it	ne
 8000792:	ea95 0f0c 	teqne	r5, ip
 8000796:	d00c      	beq.n	80007b2 <__aeabi_dmul+0x206>
 8000798:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079c:	bf18      	it	ne
 800079e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a2:	d1d1      	bne.n	8000748 <__aeabi_dmul+0x19c>
 80007a4:	ea81 0103 	eor.w	r1, r1, r3
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b6:	bf06      	itte	eq
 80007b8:	4610      	moveq	r0, r2
 80007ba:	4619      	moveq	r1, r3
 80007bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c0:	d019      	beq.n	80007f6 <__aeabi_dmul+0x24a>
 80007c2:	ea94 0f0c 	teq	r4, ip
 80007c6:	d102      	bne.n	80007ce <__aeabi_dmul+0x222>
 80007c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007cc:	d113      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007ce:	ea95 0f0c 	teq	r5, ip
 80007d2:	d105      	bne.n	80007e0 <__aeabi_dmul+0x234>
 80007d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d8:	bf1c      	itt	ne
 80007da:	4610      	movne	r0, r2
 80007dc:	4619      	movne	r1, r3
 80007de:	d10a      	bne.n	80007f6 <__aeabi_dmul+0x24a>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fe:	bd70      	pop	{r4, r5, r6, pc}

08000800 <__aeabi_ddiv>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000806:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080e:	bf1d      	ittte	ne
 8000810:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000814:	ea94 0f0c 	teqne	r4, ip
 8000818:	ea95 0f0c 	teqne	r5, ip
 800081c:	f000 f8a7 	bleq	800096e <__aeabi_ddiv+0x16e>
 8000820:	eba4 0405 	sub.w	r4, r4, r5
 8000824:	ea81 0e03 	eor.w	lr, r1, r3
 8000828:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800082c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000830:	f000 8088 	beq.w	8000944 <__aeabi_ddiv+0x144>
 8000834:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000838:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800083c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000840:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000844:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000848:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800084c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000850:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000854:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000858:	429d      	cmp	r5, r3
 800085a:	bf08      	it	eq
 800085c:	4296      	cmpeq	r6, r2
 800085e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000862:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000866:	d202      	bcs.n	800086e <__aeabi_ddiv+0x6e>
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	1ab6      	subs	r6, r6, r2
 8000870:	eb65 0503 	sbc.w	r5, r5, r3
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 000c 	orrcs.w	r0, r0, ip
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e0:	d018      	beq.n	8000914 <__aeabi_ddiv+0x114>
 80008e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fe:	d1c0      	bne.n	8000882 <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	d10b      	bne.n	800091e <__aeabi_ddiv+0x11e>
 8000906:	ea41 0100 	orr.w	r1, r1, r0
 800090a:	f04f 0000 	mov.w	r0, #0
 800090e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000912:	e7b6      	b.n	8000882 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000918:	bf04      	itt	eq
 800091a:	4301      	orreq	r1, r0
 800091c:	2000      	moveq	r0, #0
 800091e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000922:	bf88      	it	hi
 8000924:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000928:	f63f aeaf 	bhi.w	800068a <__aeabi_dmul+0xde>
 800092c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000930:	bf04      	itt	eq
 8000932:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093a:	f150 0000 	adcs.w	r0, r0, #0
 800093e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000948:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800094c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	e690      	b.n	800068a <__aeabi_dmul+0xde>
 8000968:	ea45 0e06 	orr.w	lr, r5, r6
 800096c:	e68d      	b.n	800068a <__aeabi_dmul+0xde>
 800096e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000972:	ea94 0f0c 	teq	r4, ip
 8000976:	bf08      	it	eq
 8000978:	ea95 0f0c 	teqeq	r5, ip
 800097c:	f43f af3b 	beq.w	80007f6 <__aeabi_dmul+0x24a>
 8000980:	ea94 0f0c 	teq	r4, ip
 8000984:	d10a      	bne.n	800099c <__aeabi_ddiv+0x19c>
 8000986:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098a:	f47f af34 	bne.w	80007f6 <__aeabi_dmul+0x24a>
 800098e:	ea95 0f0c 	teq	r5, ip
 8000992:	f47f af25 	bne.w	80007e0 <__aeabi_dmul+0x234>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e72c      	b.n	80007f6 <__aeabi_dmul+0x24a>
 800099c:	ea95 0f0c 	teq	r5, ip
 80009a0:	d106      	bne.n	80009b0 <__aeabi_ddiv+0x1b0>
 80009a2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a6:	f43f aefd 	beq.w	80007a4 <__aeabi_dmul+0x1f8>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e722      	b.n	80007f6 <__aeabi_dmul+0x24a>
 80009b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b4:	bf18      	it	ne
 80009b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ba:	f47f aec5 	bne.w	8000748 <__aeabi_dmul+0x19c>
 80009be:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c2:	f47f af0d 	bne.w	80007e0 <__aeabi_dmul+0x234>
 80009c6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ca:	f47f aeeb 	bne.w	80007a4 <__aeabi_dmul+0x1f8>
 80009ce:	e712      	b.n	80007f6 <__aeabi_dmul+0x24a>

080009d0 <__aeabi_uldivmod>:
 80009d0:	b953      	cbnz	r3, 80009e8 <__aeabi_uldivmod+0x18>
 80009d2:	b94a      	cbnz	r2, 80009e8 <__aeabi_uldivmod+0x18>
 80009d4:	2900      	cmp	r1, #0
 80009d6:	bf08      	it	eq
 80009d8:	2800      	cmpeq	r0, #0
 80009da:	bf1c      	itt	ne
 80009dc:	f04f 31ff 	movne.w	r1, #4294967295
 80009e0:	f04f 30ff 	movne.w	r0, #4294967295
 80009e4:	f000 b982 	b.w	8000cec <__aeabi_idiv0>
 80009e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009f0:	f000 f806 	bl	8000a00 <__udivmoddi4>
 80009f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009fc:	b004      	add	sp, #16
 80009fe:	4770      	bx	lr

08000a00 <__udivmoddi4>:
 8000a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000a06:	4604      	mov	r4, r0
 8000a08:	460f      	mov	r7, r1
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d148      	bne.n	8000aa0 <__udivmoddi4+0xa0>
 8000a0e:	428a      	cmp	r2, r1
 8000a10:	4694      	mov	ip, r2
 8000a12:	d961      	bls.n	8000ad8 <__udivmoddi4+0xd8>
 8000a14:	fab2 f382 	clz	r3, r2
 8000a18:	b143      	cbz	r3, 8000a2c <__udivmoddi4+0x2c>
 8000a1a:	f1c3 0120 	rsb	r1, r3, #32
 8000a1e:	409f      	lsls	r7, r3
 8000a20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a24:	409c      	lsls	r4, r3
 8000a26:	fa20 f101 	lsr.w	r1, r0, r1
 8000a2a:	430f      	orrs	r7, r1
 8000a2c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000a30:	fa1f fe8c 	uxth.w	lr, ip
 8000a34:	0c22      	lsrs	r2, r4, #16
 8000a36:	fbb7 f6f1 	udiv	r6, r7, r1
 8000a3a:	fb01 7716 	mls	r7, r1, r6, r7
 8000a3e:	fb06 f00e 	mul.w	r0, r6, lr
 8000a42:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a46:	4290      	cmp	r0, r2
 8000a48:	d908      	bls.n	8000a5c <__udivmoddi4+0x5c>
 8000a4a:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000a52:	d202      	bcs.n	8000a5a <__udivmoddi4+0x5a>
 8000a54:	4290      	cmp	r0, r2
 8000a56:	f200 8137 	bhi.w	8000cc8 <__udivmoddi4+0x2c8>
 8000a5a:	463e      	mov	r6, r7
 8000a5c:	1a12      	subs	r2, r2, r0
 8000a5e:	b2a4      	uxth	r4, r4
 8000a60:	fbb2 f0f1 	udiv	r0, r2, r1
 8000a64:	fb01 2210 	mls	r2, r1, r0, r2
 8000a68:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a70:	45a6      	cmp	lr, r4
 8000a72:	d908      	bls.n	8000a86 <__udivmoddi4+0x86>
 8000a74:	eb1c 0404 	adds.w	r4, ip, r4
 8000a78:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a7c:	d202      	bcs.n	8000a84 <__udivmoddi4+0x84>
 8000a7e:	45a6      	cmp	lr, r4
 8000a80:	f200 811c 	bhi.w	8000cbc <__udivmoddi4+0x2bc>
 8000a84:	4610      	mov	r0, r2
 8000a86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a8a:	eba4 040e 	sub.w	r4, r4, lr
 8000a8e:	2600      	movs	r6, #0
 8000a90:	b11d      	cbz	r5, 8000a9a <__udivmoddi4+0x9a>
 8000a92:	40dc      	lsrs	r4, r3
 8000a94:	2300      	movs	r3, #0
 8000a96:	e9c5 4300 	strd	r4, r3, [r5]
 8000a9a:	4631      	mov	r1, r6
 8000a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aa0:	428b      	cmp	r3, r1
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0xb8>
 8000aa4:	2d00      	cmp	r5, #0
 8000aa6:	f000 80fd 	beq.w	8000ca4 <__udivmoddi4+0x2a4>
 8000aaa:	2600      	movs	r6, #0
 8000aac:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	4631      	mov	r1, r6
 8000ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab8:	fab3 f683 	clz	r6, r3
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d14b      	bne.n	8000b58 <__udivmoddi4+0x158>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f0c0 80f2 	bcc.w	8000caa <__udivmoddi4+0x2aa>
 8000ac6:	4282      	cmp	r2, r0
 8000ac8:	f240 80ef 	bls.w	8000caa <__udivmoddi4+0x2aa>
 8000acc:	4630      	mov	r0, r6
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	d0e3      	beq.n	8000a9a <__udivmoddi4+0x9a>
 8000ad2:	e9c5 4700 	strd	r4, r7, [r5]
 8000ad6:	e7e0      	b.n	8000a9a <__udivmoddi4+0x9a>
 8000ad8:	b902      	cbnz	r2, 8000adc <__udivmoddi4+0xdc>
 8000ada:	deff      	udf	#255	; 0xff
 8000adc:	fab2 f382 	clz	r3, r2
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f040 809d 	bne.w	8000c20 <__udivmoddi4+0x220>
 8000ae6:	1a89      	subs	r1, r1, r2
 8000ae8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000aec:	b297      	uxth	r7, r2
 8000aee:	2601      	movs	r6, #1
 8000af0:	0c20      	lsrs	r0, r4, #16
 8000af2:	fbb1 f2fe 	udiv	r2, r1, lr
 8000af6:	fb0e 1112 	mls	r1, lr, r2, r1
 8000afa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000afe:	fb07 f002 	mul.w	r0, r7, r2
 8000b02:	4288      	cmp	r0, r1
 8000b04:	d90f      	bls.n	8000b26 <__udivmoddi4+0x126>
 8000b06:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000b0e:	bf2c      	ite	cs
 8000b10:	f04f 0901 	movcs.w	r9, #1
 8000b14:	f04f 0900 	movcc.w	r9, #0
 8000b18:	4288      	cmp	r0, r1
 8000b1a:	d903      	bls.n	8000b24 <__udivmoddi4+0x124>
 8000b1c:	f1b9 0f00 	cmp.w	r9, #0
 8000b20:	f000 80cf 	beq.w	8000cc2 <__udivmoddi4+0x2c2>
 8000b24:	4642      	mov	r2, r8
 8000b26:	1a09      	subs	r1, r1, r0
 8000b28:	b2a4      	uxth	r4, r4
 8000b2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b32:	fb00 f707 	mul.w	r7, r0, r7
 8000b36:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b3a:	42a7      	cmp	r7, r4
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x150>
 8000b3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x14e>
 8000b48:	42a7      	cmp	r7, r4
 8000b4a:	f200 80b4 	bhi.w	8000cb6 <__udivmoddi4+0x2b6>
 8000b4e:	4608      	mov	r0, r1
 8000b50:	1be4      	subs	r4, r4, r7
 8000b52:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000b56:	e79b      	b.n	8000a90 <__udivmoddi4+0x90>
 8000b58:	f1c6 0720 	rsb	r7, r6, #32
 8000b5c:	40b3      	lsls	r3, r6
 8000b5e:	fa01 f406 	lsl.w	r4, r1, r6
 8000b62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b66:	40f9      	lsrs	r1, r7
 8000b68:	40b2      	lsls	r2, r6
 8000b6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b76:	431c      	orrs	r4, r3
 8000b78:	fa1f fe8c 	uxth.w	lr, ip
 8000b7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b86:	fb09 1118 	mls	r1, r9, r8, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb08 f00e 	mul.w	r0, r8, lr
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d90f      	bls.n	8000bb6 <__udivmoddi4+0x1b6>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b9e:	bf2c      	ite	cs
 8000ba0:	f04f 0b01 	movcs.w	fp, #1
 8000ba4:	f04f 0b00 	movcc.w	fp, #0
 8000ba8:	4288      	cmp	r0, r1
 8000baa:	d903      	bls.n	8000bb4 <__udivmoddi4+0x1b4>
 8000bac:	f1bb 0f00 	cmp.w	fp, #0
 8000bb0:	f000 808d 	beq.w	8000cce <__udivmoddi4+0x2ce>
 8000bb4:	46d0      	mov	r8, sl
 8000bb6:	1a09      	subs	r1, r1, r0
 8000bb8:	b2a4      	uxth	r4, r4
 8000bba:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bbe:	fb09 1110 	mls	r1, r9, r0, r1
 8000bc2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bc6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bca:	458e      	cmp	lr, r1
 8000bcc:	d907      	bls.n	8000bde <__udivmoddi4+0x1de>
 8000bce:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd6:	d201      	bcs.n	8000bdc <__udivmoddi4+0x1dc>
 8000bd8:	458e      	cmp	lr, r1
 8000bda:	d87f      	bhi.n	8000cdc <__udivmoddi4+0x2dc>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000be2:	eba1 010e 	sub.w	r1, r1, lr
 8000be6:	fba0 9802 	umull	r9, r8, r0, r2
 8000bea:	4541      	cmp	r1, r8
 8000bec:	464c      	mov	r4, r9
 8000bee:	46c6      	mov	lr, r8
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0x1f8>
 8000bf2:	d106      	bne.n	8000c02 <__udivmoddi4+0x202>
 8000bf4:	454b      	cmp	r3, r9
 8000bf6:	d204      	bcs.n	8000c02 <__udivmoddi4+0x202>
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	ebb9 0402 	subs.w	r4, r9, r2
 8000bfe:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d070      	beq.n	8000ce8 <__udivmoddi4+0x2e8>
 8000c06:	1b1a      	subs	r2, r3, r4
 8000c08:	eb61 010e 	sbc.w	r1, r1, lr
 8000c0c:	fa22 f306 	lsr.w	r3, r2, r6
 8000c10:	fa01 f707 	lsl.w	r7, r1, r7
 8000c14:	40f1      	lsrs	r1, r6
 8000c16:	2600      	movs	r6, #0
 8000c18:	431f      	orrs	r7, r3
 8000c1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c1e:	e73c      	b.n	8000a9a <__udivmoddi4+0x9a>
 8000c20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c24:	f1c3 0020 	rsb	r0, r3, #32
 8000c28:	fa01 f203 	lsl.w	r2, r1, r3
 8000c2c:	fa21 f600 	lsr.w	r6, r1, r0
 8000c30:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c34:	fa24 f100 	lsr.w	r1, r4, r0
 8000c38:	fa1f f78c 	uxth.w	r7, ip
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	4311      	orrs	r1, r2
 8000c40:	fbb6 f0fe 	udiv	r0, r6, lr
 8000c44:	0c0a      	lsrs	r2, r1, #16
 8000c46:	fb0e 6610 	mls	r6, lr, r0, r6
 8000c4a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000c4e:	fb00 f607 	mul.w	r6, r0, r7
 8000c52:	4296      	cmp	r6, r2
 8000c54:	d90e      	bls.n	8000c74 <__udivmoddi4+0x274>
 8000c56:	eb1c 0202 	adds.w	r2, ip, r2
 8000c5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c5e:	bf2c      	ite	cs
 8000c60:	f04f 0901 	movcs.w	r9, #1
 8000c64:	f04f 0900 	movcc.w	r9, #0
 8000c68:	4296      	cmp	r6, r2
 8000c6a:	d902      	bls.n	8000c72 <__udivmoddi4+0x272>
 8000c6c:	f1b9 0f00 	cmp.w	r9, #0
 8000c70:	d031      	beq.n	8000cd6 <__udivmoddi4+0x2d6>
 8000c72:	4640      	mov	r0, r8
 8000c74:	1b92      	subs	r2, r2, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb2 f6fe 	udiv	r6, r2, lr
 8000c7c:	fb0e 2216 	mls	r2, lr, r6, r2
 8000c80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000c84:	fb06 f207 	mul.w	r2, r6, r7
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	d907      	bls.n	8000c9c <__udivmoddi4+0x29c>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c94:	d201      	bcs.n	8000c9a <__udivmoddi4+0x29a>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	d823      	bhi.n	8000ce2 <__udivmoddi4+0x2e2>
 8000c9a:	4646      	mov	r6, r8
 8000c9c:	1a89      	subs	r1, r1, r2
 8000c9e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca2:	e725      	b.n	8000af0 <__udivmoddi4+0xf0>
 8000ca4:	462e      	mov	r6, r5
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	e6f7      	b.n	8000a9a <__udivmoddi4+0x9a>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	461f      	mov	r7, r3
 8000cb4:	e70b      	b.n	8000ace <__udivmoddi4+0xce>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e749      	b.n	8000b50 <__udivmoddi4+0x150>
 8000cbc:	4464      	add	r4, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	e6e1      	b.n	8000a86 <__udivmoddi4+0x86>
 8000cc2:	3a02      	subs	r2, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	e72e      	b.n	8000b26 <__udivmoddi4+0x126>
 8000cc8:	3e02      	subs	r6, #2
 8000cca:	4462      	add	r2, ip
 8000ccc:	e6c6      	b.n	8000a5c <__udivmoddi4+0x5c>
 8000cce:	f1a8 0802 	sub.w	r8, r8, #2
 8000cd2:	4461      	add	r1, ip
 8000cd4:	e76f      	b.n	8000bb6 <__udivmoddi4+0x1b6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	e7cb      	b.n	8000c74 <__udivmoddi4+0x274>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	e77d      	b.n	8000bde <__udivmoddi4+0x1de>
 8000ce2:	3e02      	subs	r6, #2
 8000ce4:	4461      	add	r1, ip
 8000ce6:	e7d9      	b.n	8000c9c <__udivmoddi4+0x29c>
 8000ce8:	462e      	mov	r6, r5
 8000cea:	e6d6      	b.n	8000a9a <__udivmoddi4+0x9a>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <_ZN6BMX1609configAccEv>:


// /* Private Methods ---------------------------------------------------------*/


void BMX160::configAcc() {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af04      	add	r7, sp, #16
 8000cf6:	6078      	str	r0, [r7, #4]
	// Configure acceleration sampling rate as 800 Hz and every four are averaged
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, ACC_CONF_REG, I2C_MEMADD_SIZE_8BIT, &ACC_ODR_800_OSR4, 1, HAL_MAX_DELAY);
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	9302      	str	r3, [sp, #8]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <_ZN6BMX1609configAccEv+0x44>)
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2301      	movs	r3, #1
 8000d08:	2240      	movs	r2, #64	; 0x40
 8000d0a:	21d0      	movs	r1, #208	; 0xd0
 8000d0c:	480a      	ldr	r0, [pc, #40]	; (8000d38 <_ZN6BMX1609configAccEv+0x48>)
 8000d0e:	f002 fd61 	bl	80037d4 <HAL_I2C_Mem_Write>

	// Configure accelerometer to have range of +- 8g
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, ACC_RANGE_REG, I2C_MEMADD_SIZE_8BIT, &ACC_RANGE_8G, 1, HAL_MAX_DELAY);
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	9302      	str	r3, [sp, #8]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	9301      	str	r3, [sp, #4]
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_ZN6BMX1609configAccEv+0x4c>)
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	2301      	movs	r3, #1
 8000d22:	2241      	movs	r2, #65	; 0x41
 8000d24:	21d0      	movs	r1, #208	; 0xd0
 8000d26:	4804      	ldr	r0, [pc, #16]	; (8000d38 <_ZN6BMX1609configAccEv+0x48>)
 8000d28:	f002 fd54 	bl	80037d4 <HAL_I2C_Mem_Write>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000184 	.word	0x20000184
 8000d3c:	20000006 	.word	0x20000006

08000d40 <_ZN6BMX16010configGyroEv>:

void BMX160::configGyro() {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af04      	add	r7, sp, #16
 8000d46:	6078      	str	r0, [r7, #4]
	// Configure gyro sampling rate as 800 Hz and every four samples are averaged
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, GYR_CONF_REG, I2C_MEMADD_SIZE_8BIT, &GYRO_ODR_800_OSR4, 1, HAL_MAX_DELAY);
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	9302      	str	r3, [sp, #8]
 8000d4e:	2301      	movs	r3, #1
 8000d50:	9301      	str	r3, [sp, #4]
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <_ZN6BMX16010configGyroEv+0x44>)
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	2242      	movs	r2, #66	; 0x42
 8000d5a:	21d0      	movs	r1, #208	; 0xd0
 8000d5c:	480a      	ldr	r0, [pc, #40]	; (8000d88 <_ZN6BMX16010configGyroEv+0x48>)
 8000d5e:	f002 fd39 	bl	80037d4 <HAL_I2C_Mem_Write>

	// Configure gyroscope to have a range of +- 1000 deg/s
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, GYR_RANGE_REG, I2C_MEMADD_SIZE_8BIT, &GYRO_RANGE_1000, 1, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	9302      	str	r3, [sp, #8]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	9301      	str	r3, [sp, #4]
 8000d6c:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_ZN6BMX16010configGyroEv+0x4c>)
 8000d6e:	9300      	str	r3, [sp, #0]
 8000d70:	2301      	movs	r3, #1
 8000d72:	2243      	movs	r2, #67	; 0x43
 8000d74:	21d0      	movs	r1, #208	; 0xd0
 8000d76:	4804      	ldr	r0, [pc, #16]	; (8000d88 <_ZN6BMX16010configGyroEv+0x48>)
 8000d78:	f002 fd2c 	bl	80037d4 <HAL_I2C_Mem_Write>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2000000a 	.word	0x2000000a
 8000d88:	20000184 	.word	0x20000184
 8000d8c:	20000009 	.word	0x20000009

08000d90 <_ZN6BMX1609configMagEv>:

void BMX160::configMag() {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	6078      	str	r0, [r7, #4]
	7.) Write 0x02 to 0x4F, 0x4C to 0x4E, and 0x42 to 0x4D - prepare MAG_IF[0:3] for mag_if_data mode - done
	8.) Write 0x__ to MAG_CONF_REG to set ODR to 800 Hz - done
	9.) Write 0x00 to 0x4C
	*/
	// HAL_DELAYS break thread, these delays only run during initialization
	HAL_Delay(650);
 8000d98:	f240 208a 	movw	r0, #650	; 0x28a
 8000d9c:	f001 fa4a 	bl	8002234 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_0_REG, I2C_MEMADD_SIZE_8BIT, &MAG_SETUP_EN, 1, HAL_MAX_DELAY);
 8000da0:	f04f 33ff 	mov.w	r3, #4294967295
 8000da4:	9302      	str	r3, [sp, #8]
 8000da6:	2301      	movs	r3, #1
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	4b4d      	ldr	r3, [pc, #308]	; (8000ee0 <_ZN6BMX1609configMagEv+0x150>)
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2301      	movs	r3, #1
 8000db0:	224c      	movs	r2, #76	; 0x4c
 8000db2:	21d0      	movs	r1, #208	; 0xd0
 8000db4:	484b      	ldr	r0, [pc, #300]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000db6:	f002 fd0d 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_3_REG, I2C_MEMADD_SIZE_8BIT, &MAG_SLEEP_MODE, 1, HAL_MAX_DELAY);
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	9301      	str	r3, [sp, #4]
 8000dc4:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <_ZN6BMX1609configMagEv+0x158>)
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	224f      	movs	r2, #79	; 0x4f
 8000dcc:	21d0      	movs	r1, #208	; 0xd0
 8000dce:	4845      	ldr	r0, [pc, #276]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000dd0:	f002 fd00 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_2_REG, I2C_MEMADD_SIZE_8BIT, &MAG_MODE_REG, 1, HAL_MAX_DELAY);
 8000dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	4b43      	ldr	r3, [pc, #268]	; (8000eec <_ZN6BMX1609configMagEv+0x15c>)
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	224e      	movs	r2, #78	; 0x4e
 8000de6:	21d0      	movs	r1, #208	; 0xd0
 8000de8:	483e      	ldr	r0, [pc, #248]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000dea:	f002 fcf3 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_3_REG, I2C_MEMADD_SIZE_8BIT, &REP_XY_REGULAR_PRESET, 1, HAL_MAX_DELAY);
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	4b3d      	ldr	r3, [pc, #244]	; (8000ef0 <_ZN6BMX1609configMagEv+0x160>)
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	224f      	movs	r2, #79	; 0x4f
 8000e00:	21d0      	movs	r1, #208	; 0xd0
 8000e02:	4838      	ldr	r0, [pc, #224]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000e04:	f002 fce6 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_2_REG, I2C_MEMADD_SIZE_8BIT, &MAG_REPXY_REG, 1, HAL_MAX_DELAY);
 8000e08:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0c:	9302      	str	r3, [sp, #8]
 8000e0e:	2301      	movs	r3, #1
 8000e10:	9301      	str	r3, [sp, #4]
 8000e12:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <_ZN6BMX1609configMagEv+0x164>)
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	224e      	movs	r2, #78	; 0x4e
 8000e1a:	21d0      	movs	r1, #208	; 0xd0
 8000e1c:	4831      	ldr	r0, [pc, #196]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000e1e:	f002 fcd9 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_3_REG, I2C_MEMADD_SIZE_8BIT, &REP_Z_REGULAR_PRESET, 1, HAL_MAX_DELAY);
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	2301      	movs	r3, #1
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	4b32      	ldr	r3, [pc, #200]	; (8000ef8 <_ZN6BMX1609configMagEv+0x168>)
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	224f      	movs	r2, #79	; 0x4f
 8000e34:	21d0      	movs	r1, #208	; 0xd0
 8000e36:	482b      	ldr	r0, [pc, #172]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000e38:	f002 fccc 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_2_REG, I2C_MEMADD_SIZE_8BIT, &MAG_REPZ_REG, 1, HAL_MAX_DELAY);
 8000e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2301      	movs	r3, #1
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <_ZN6BMX1609configMagEv+0x16c>)
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	224e      	movs	r2, #78	; 0x4e
 8000e4e:	21d0      	movs	r1, #208	; 0xd0
 8000e50:	4824      	ldr	r0, [pc, #144]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000e52:	f002 fcbf 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_3_REG, I2C_MEMADD_SIZE_8BIT, &MAG_IF_3_DATA_MODE, 1, HAL_MAX_DELAY);
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <_ZN6BMX1609configMagEv+0x170>)
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	224f      	movs	r2, #79	; 0x4f
 8000e68:	21d0      	movs	r1, #208	; 0xd0
 8000e6a:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000e6c:	f002 fcb2 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_2_REG, I2C_MEMADD_SIZE_8BIT, &MAG_IF_2_DATA_MODE, 1, HAL_MAX_DELAY);
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <_ZN6BMX1609configMagEv+0x174>)
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	224e      	movs	r2, #78	; 0x4e
 8000e82:	21d0      	movs	r1, #208	; 0xd0
 8000e84:	4817      	ldr	r0, [pc, #92]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000e86:	f002 fca5 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_1_REG, I2C_MEMADD_SIZE_8BIT, &MAG_IF_1_DATA_MODE, 1, HAL_MAX_DELAY);
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2301      	movs	r3, #1
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <_ZN6BMX1609configMagEv+0x178>)
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	224d      	movs	r2, #77	; 0x4d
 8000e9c:	21d0      	movs	r1, #208	; 0xd0
 8000e9e:	4811      	ldr	r0, [pc, #68]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000ea0:	f002 fc98 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_CONF_REG, I2C_MEMADD_SIZE_8BIT, &MAG_REFRESH_50_HZ, 1, HAL_MAX_DELAY);
 8000ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea8:	9302      	str	r3, [sp, #8]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <_ZN6BMX1609configMagEv+0x17c>)
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	2244      	movs	r2, #68	; 0x44
 8000eb6:	21d0      	movs	r1, #208	; 0xd0
 8000eb8:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000eba:	f002 fc8b 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, MAG_IF_0_REG, I2C_MEMADD_SIZE_8BIT, &MAG_SETUP_DIS, 1, HAL_MAX_DELAY);
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec2:	9302      	str	r3, [sp, #8]
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	9301      	str	r3, [sp, #4]
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_ZN6BMX1609configMagEv+0x180>)
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	224c      	movs	r2, #76	; 0x4c
 8000ed0:	21d0      	movs	r1, #208	; 0xd0
 8000ed2:	4804      	ldr	r0, [pc, #16]	; (8000ee4 <_ZN6BMX1609configMagEv+0x154>)
 8000ed4:	f002 fc7e 	bl	80037d4 <HAL_I2C_Mem_Write>

}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000000b 	.word	0x2000000b
 8000ee4:	20000184 	.word	0x20000184
 8000ee8:	20000012 	.word	0x20000012
 8000eec:	20000002 	.word	0x20000002
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	20000001 	.word	0x20000001
 8000ef8:	2000000d 	.word	0x2000000d
 8000efc:	20000000 	.word	0x20000000
 8000f00:	2000000e 	.word	0x2000000e
 8000f04:	2000000f 	.word	0x2000000f
 8000f08:	20000010 	.word	0x20000010
 8000f0c:	20000011 	.word	0x20000011
 8000f10:	200000a4 	.word	0x200000a4

08000f14 <_ZN6BMX16012selfTestGyroEv>:

	if(acc_diff_x > 2*9.81 && acc_diff_y > 2*9.81 && acc_diff_z > 2*9.81) return true;
	else return false;
}

bool BMX160::selfTestGyro() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af04      	add	r7, sp, #16
 8000f1a:	6078      	str	r0, [r7, #4]
	uint8_t gyro_ok = 0b00000000;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, SELF_TEST_REG, I2C_MEMADD_SIZE_8BIT, &GYR_SELF_TEST_CMD, 1, HAL_MAX_DELAY);
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	9302      	str	r3, [sp, #8]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <_ZN6BMX16012selfTestGyroEv+0x5c>)
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	226d      	movs	r2, #109	; 0x6d
 8000f32:	21d0      	movs	r1, #208	; 0xd0
 8000f34:	480f      	ldr	r0, [pc, #60]	; (8000f74 <_ZN6BMX16012selfTestGyroEv+0x60>)
 8000f36:	f002 fc4d 	bl	80037d4 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Read(&hi2c2, BMX160_I2C_ADDR, STATUS_REG, I2C_MEMADD_SIZE_8BIT, &gyro_ok, 1, HAL_MAX_DELAY);
 8000f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3e:	9302      	str	r3, [sp, #8]
 8000f40:	2301      	movs	r3, #1
 8000f42:	9301      	str	r3, [sp, #4]
 8000f44:	f107 030f 	add.w	r3, r7, #15
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	221b      	movs	r2, #27
 8000f4e:	21d0      	movs	r1, #208	; 0xd0
 8000f50:	4808      	ldr	r0, [pc, #32]	; (8000f74 <_ZN6BMX16012selfTestGyroEv+0x60>)
 8000f52:	f002 fd53 	bl	80039fc <HAL_I2C_Mem_Read>
	// the bit that matters is the LSB, so use bitwise and to check LSB
	if(gyro_ok & 1) return true;
 8000f56:	7bfb      	ldrb	r3, [r7, #15]
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <_ZN6BMX16012selfTestGyroEv+0x50>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e000      	b.n	8000f66 <_ZN6BMX16012selfTestGyroEv+0x52>
	else return false;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000007 	.word	0x20000007
 8000f74:	20000184 	.word	0x20000184

08000f78 <_ZN6BMX1604scanEv>:

bool BMX160::scan() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_IsDeviceReady(&hi2c2, BMX160_I2C_ADDR, 50, HAL_MAX_DELAY) == HAL_OK) {
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295
 8000f84:	2232      	movs	r2, #50	; 0x32
 8000f86:	21d0      	movs	r1, #208	; 0xd0
 8000f88:	4808      	ldr	r0, [pc, #32]	; (8000fac <_ZN6BMX1604scanEv+0x34>)
 8000f8a:	f002 fe51 	bl	8003c30 <HAL_I2C_IsDeviceReady>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf0c      	ite	eq
 8000f94:	2301      	moveq	r3, #1
 8000f96:	2300      	movne	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <_ZN6BMX1604scanEv+0x2a>
		return true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <_ZN6BMX1604scanEv+0x2c>
	}
	return false;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000184 	.word	0x20000184

08000fb0 <_ZN6BMX1609calibrateEv>:

// Calibrates IMU so that any drift or offset is accounted for
void BMX160::calibrate(void) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	; 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	const int nSamplesForReliableAverage = 100;
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    IMUData_t TempImuData;
	IMUData_t TempImuCalibration;

	TempImuCalibration.accel_x = 0.0f;
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    TempImuCalibration.accel_y = 0.0f;
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    TempImuCalibration.accel_z = 0.0f;
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    TempImuCalibration.gyro_x = 0.0f;
 8000fe2:	f04f 0200 	mov.w	r2, #0
 8000fe6:	f04f 0300 	mov.w	r3, #0
 8000fea:	e9c7 2302 	strd	r2, r3, [r7, #8]
    TempImuCalibration.gyro_y = 0.0f;
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    TempImuCalibration.gyro_z = 0.0f;
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	f04f 0300 	mov.w	r3, #0
 8001002:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TempImuCalibration.mag_x = 0.0f;
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f04f 0300 	mov.w	r3, #0
 800100e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    TempImuCalibration.mag_y = 0.0f;
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f04f 0300 	mov.w	r3, #0
 800101a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    TempImuCalibration.mag_z = 0.0f;
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

    for (int i = 0; i < nSamplesForReliableAverage; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001034:	2b63      	cmp	r3, #99	; 0x63
 8001036:	dc31      	bgt.n	800109c <_ZN6BMX1609calibrateEv+0xec>
    {
        this->updateData();
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f881 	bl	8001140 <_ZN6BMX16010updateDataEv>
		// HAL_DELAYS break thread, these delays only run during initialization
        HAL_Delay(7);
 800103e:	2007      	movs	r0, #7
 8001040:	f001 f8f8 	bl	8002234 <HAL_Delay>

        this->GetResult(TempImuData);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800104e:	4611      	mov	r1, r2
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	4798      	blx	r3

        TempImuCalibration.gyro_x += TempImuData.gyro_x;
 8001054:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001058:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800105c:	f7ff f8f0 	bl	8000240 <__adddf3>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	e9c7 2302 	strd	r2, r3, [r7, #8]
        TempImuCalibration.gyro_y += TempImuData.gyro_y;
 8001068:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800106c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001070:	f7ff f8e6 	bl	8000240 <__adddf3>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	e9c7 2304 	strd	r2, r3, [r7, #16]
        TempImuCalibration.gyro_z += TempImuData.gyro_z;
 800107c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001080:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001084:	f7ff f8dc 	bl	8000240 <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < nSamplesForReliableAverage; i++)
 8001090:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001094:	3301      	adds	r3, #1
 8001096:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800109a:	e7c9      	b.n	8001030 <_ZN6BMX1609calibrateEv+0x80>

	// IMUCalibration.accel_x = norm;
    // IMUCalibration.accel_y = norm;
    // IMUCalibration.accel_z = norm;

    IMUCalibration.gyro_x = TempImuCalibration.gyro_x / (float) nSamplesForReliableAverage;
 800109c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b11      	ldr	r3, [pc, #68]	; (80010ec <_ZN6BMX1609calibrateEv+0x13c>)
 80010a6:	f7ff fbab 	bl	8000800 <__aeabi_ddiv>
 80010aa:	4602      	mov	r2, r0
 80010ac:	460b      	mov	r3, r1
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    IMUCalibration.gyro_y = TempImuCalibration.gyro_y / (float) nSamplesForReliableAverage;
 80010b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <_ZN6BMX1609calibrateEv+0x13c>)
 80010be:	f7ff fb9f 	bl	8000800 <__aeabi_ddiv>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	e9c1 2308 	strd	r2, r3, [r1, #32]
    IMUCalibration.gyro_z = TempImuCalibration.gyro_z / (float) nSamplesForReliableAverage;
 80010cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <_ZN6BMX1609calibrateEv+0x13c>)
 80010d6:	f7ff fb93 	bl	8000800 <__aeabi_ddiv>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

}
 80010e4:	bf00      	nop
 80010e6:	37b0      	adds	r7, #176	; 0xb0
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40590000 	.word	0x40590000

080010f0 <_ZN6BMX16011getInstanceEv>:


// /* Public Methods  ---------------------------------------------------------*/

BMX160& BMX160::getInstance() {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	static BMX160 singleton;
 80010f4:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_ZN6BMX16011getInstanceEv+0x48>)
 80010f6:	e8d3 3f8f 	ldab	r3, [r3]
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b00      	cmp	r3, #0
 8001102:	bf0c      	ite	eq
 8001104:	2301      	moveq	r3, #1
 8001106:	2300      	movne	r3, #0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b00      	cmp	r3, #0
 800110c:	d010      	beq.n	8001130 <_ZN6BMX16011getInstanceEv+0x40>
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <_ZN6BMX16011getInstanceEv+0x48>)
 8001110:	f006 fa00 	bl	8007514 <__cxa_guard_acquire>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	bf14      	ite	ne
 800111a:	2301      	movne	r3, #1
 800111c:	2300      	moveq	r3, #0
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <_ZN6BMX16011getInstanceEv+0x40>
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <_ZN6BMX16011getInstanceEv+0x4c>)
 8001126:	f000 f957 	bl	80013d8 <_ZN6BMX160C1Ev>
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <_ZN6BMX16011getInstanceEv+0x48>)
 800112c:	f006 f9fe 	bl	800752c <__cxa_guard_release>
	return singleton;
 8001130:	4b02      	ldr	r3, [pc, #8]	; (800113c <_ZN6BMX16011getInstanceEv+0x4c>)
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000118 	.word	0x20000118
 800113c:	200000a8 	.word	0x200000a8

08001140 <_ZN6BMX16010updateDataEv>:

void BMX160::updateData(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af04      	add	r7, sp, #16
 8001146:	6078      	str	r0, [r7, #4]
	// Just updates the rawIMUData and conducts some processing on it
	HAL_I2C_Mem_Read(&hi2c2, BMX160_I2C_ADDR, DATA_REG, I2C_MEMADD_SIZE_8BIT, rawImuData, 20, HAL_MAX_DELAY);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3304      	adds	r3, #4
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	9202      	str	r2, [sp, #8]
 8001152:	2214      	movs	r2, #20
 8001154:	9201      	str	r2, [sp, #4]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	2204      	movs	r2, #4
 800115c:	21d0      	movs	r1, #208	; 0xd0
 800115e:	4803      	ldr	r0, [pc, #12]	; (800116c <_ZN6BMX16010updateDataEv+0x2c>)
 8001160:	f002 fc4c 	bl	80039fc <HAL_I2C_Mem_Read>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000184 	.word	0x20000184

08001170 <_ZN6BMX1609GetResultER9IMUData_t>:

void BMX160::GetResult(IMUData_t &Data) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
	// // The 15:8 and 7:0 bits are in different registers. The bitmasking below joins them into one 16 bit integer
	this -> updateData();
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffe0 	bl	8001140 <_ZN6BMX16010updateDataEv>
	int16_t magx = (rawImuData[1]  << 8) | rawImuData[0];
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	795b      	ldrb	r3, [r3, #5]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	83fb      	strh	r3, [r7, #30]
	int16_t magy = (rawImuData[3]  << 8) | rawImuData[2];
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	79db      	ldrb	r3, [r3, #7]
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	b21a      	sxth	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	799b      	ldrb	r3, [r3, #6]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	83bb      	strh	r3, [r7, #28]
	int16_t magz = (rawImuData[5]  << 8) | rawImuData[4];
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7a5b      	ldrb	r3, [r3, #9]
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	b21a      	sxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7a1b      	ldrb	r3, [r3, #8]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	837b      	strh	r3, [r7, #26]
	int16_t rhall= (rawImuData[7]  << 8) | rawImuData[6];
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7adb      	ldrb	r3, [r3, #11]
 80011ba:	021b      	lsls	r3, r3, #8
 80011bc:	b21a      	sxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	7a9b      	ldrb	r3, [r3, #10]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	833b      	strh	r3, [r7, #24]
	int16_t gyrx = (rawImuData[9]  << 8) | rawImuData[8];
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	7b5b      	ldrb	r3, [r3, #13]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7b1b      	ldrb	r3, [r3, #12]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	82fb      	strh	r3, [r7, #22]
	int16_t gyry = (rawImuData[11] << 8) | rawImuData[10];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7bdb      	ldrb	r3, [r3, #15]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7b9b      	ldrb	r3, [r3, #14]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	82bb      	strh	r3, [r7, #20]
	int16_t gyrz = (rawImuData[13] << 8) | rawImuData[12];
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	7c5b      	ldrb	r3, [r3, #17]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7c1b      	ldrb	r3, [r3, #16]
 80011f8:	b21b      	sxth	r3, r3
 80011fa:	4313      	orrs	r3, r2
 80011fc:	827b      	strh	r3, [r7, #18]
	int16_t accx = (rawImuData[15] << 8) | rawImuData[14];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7cdb      	ldrb	r3, [r3, #19]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7c9b      	ldrb	r3, [r3, #18]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	823b      	strh	r3, [r7, #16]
	int16_t accy = (rawImuData[17] << 8) | rawImuData[16];
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	7d5b      	ldrb	r3, [r3, #21]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7d1b      	ldrb	r3, [r3, #20]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	81fb      	strh	r3, [r7, #14]
	int16_t accz = (rawImuData[19] << 8) | rawImuData[18];
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	7ddb      	ldrb	r3, [r3, #23]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7d9b      	ldrb	r3, [r3, #22]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	81bb      	strh	r3, [r7, #12]

	Data.mag_x = (static_cast<float> (magx) / MAG_ADJUST_FACTOR);
 8001234:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001240:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001244:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001248:	ee16 0a90 	vmov	r0, s13
 800124c:	f7ff f956 	bl	80004fc <__aeabi_f2d>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Data.mag_y = (static_cast<float> (magy) / MAG_ADJUST_FACTOR);
 800125a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800125e:	ee07 3a90 	vmov	s15, r3
 8001262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001266:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800126a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800126e:	ee16 0a90 	vmov	r0, s13
 8001272:	f7ff f943 	bl	80004fc <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Data.mag_z = (static_cast<float> (magz) / MAG_ADJUST_FACTOR);
 8001280:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001290:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001294:	ee16 0a90 	vmov	r0, s13
 8001298:	f7ff f930 	bl	80004fc <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	6839      	ldr	r1, [r7, #0]
 80012a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

	Data.accel_x = (static_cast<float>(accx) / ACC_RANGE_8_FACTOR); //- IMUCalibration.accel_x;
 80012a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80013b0 <_ZN6BMX1609GetResultER9IMUData_t+0x240>
 80012b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012ba:	ee16 0a90 	vmov	r0, s13
 80012be:	f7ff f91d 	bl	80004fc <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Data.accel_y = (static_cast<float>(accy) / ACC_RANGE_8_FACTOR); //- IMUCalibration.accel_y;
 80012cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d0:	ee07 3a90 	vmov	s15, r3
 80012d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80013b0 <_ZN6BMX1609GetResultER9IMUData_t+0x240>
 80012dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012e0:	ee16 0a90 	vmov	r0, s13
 80012e4:	f7ff f90a 	bl	80004fc <__aeabi_f2d>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Data.accel_z = (static_cast<float>(accz) / ACC_RANGE_8_FACTOR); //- IMUCalibration.accel_z;
 80012f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80013b0 <_ZN6BMX1609GetResultER9IMUData_t+0x240>
 8001302:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001306:	ee16 0a90 	vmov	r0, s13
 800130a:	f7ff f8f7 	bl	80004fc <__aeabi_f2d>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	Data.gyro_x = (static_cast<float>(gyrx) / GYRO_RANGE_1000_FACTOR) - IMUCalibration.gyro_x;
 8001318:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80013b4 <_ZN6BMX1609GetResultER9IMUData_t+0x244>
 8001328:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800132c:	ee16 0a90 	vmov	r0, s13
 8001330:	f7ff f8e4 	bl	80004fc <__aeabi_f2d>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800133a:	f7fe ff7f 	bl	800023c <__aeabi_dsub>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	6839      	ldr	r1, [r7, #0]
 8001344:	e9c1 2300 	strd	r2, r3, [r1]
	Data.gyro_y = (static_cast<float>(gyry) / GYRO_RANGE_1000_FACTOR) - IMUCalibration.gyro_y;
 8001348:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001354:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80013b4 <_ZN6BMX1609GetResultER9IMUData_t+0x244>
 8001358:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800135c:	ee16 0a90 	vmov	r0, s13
 8001360:	f7ff f8cc 	bl	80004fc <__aeabi_f2d>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800136a:	f7fe ff67 	bl	800023c <__aeabi_dsub>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	6839      	ldr	r1, [r7, #0]
 8001374:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Data.gyro_z = (static_cast<float>(gyrz) / GYRO_RANGE_1000_FACTOR) - IMUCalibration.gyro_z;
 8001378:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800137c:	ee07 3a90 	vmov	s15, r3
 8001380:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001384:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013b4 <_ZN6BMX1609GetResultER9IMUData_t+0x244>
 8001388:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800138c:	ee16 0a90 	vmov	r0, s13
 8001390:	f7ff f8b4 	bl	80004fc <__aeabi_f2d>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800139a:	f7fe ff4f 	bl	800023c <__aeabi_dsub>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	4083126f 	.word	0x4083126f
 80013b4:	44eae99a 	.word	0x44eae99a

080013b8 <_ZN3IMUC1Ev>:
  
  bool isDataNew;
  SensorErrorCodes sensorStatus; // 0 = SUCCESS, -1 = FAIL, 1 = BUSY
};

class IMU {
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <_ZN3IMUC1Ev+0x1c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	0800767c 	.word	0x0800767c

080013d8 <_ZN6BMX160C1Ev>:

BMX160::BMX160() {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ffe8 	bl	80013b8 <_ZN3IMUC1Ev>
 80013e8:	4a08      	ldr	r2, [pc, #32]	; (800140c <_ZN6BMX160C1Ev+0x34>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]
	HAL_I2C_Init(&hi2c2);
 80013ee:	4808      	ldr	r0, [pc, #32]	; (8001410 <_ZN6BMX160C1Ev+0x38>)
 80013f0:	f002 f960 	bl	80036b4 <HAL_I2C_Init>
	IMUInit();
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f80d 	bl	8001414 <_ZN6BMX1607IMUInitEv>
	this -> calibrate(); // Calibrate IMU and populate callibration struct for use
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fdd8 	bl	8000fb0 <_ZN6BMX1609calibrateEv>
}
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	08007670 	.word	0x08007670
 8001410:	20000184 	.word	0x20000184

08001414 <_ZN6BMX1607IMUInitEv>:

void BMX160::IMUInit(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af04      	add	r7, sp, #16
 800141a:	6078      	str	r0, [r7, #4]
	if (scan()) {
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff fdab 	bl	8000f78 <_ZN6BMX1604scanEv>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d01a      	beq.n	800145e <_ZN6BMX1607IMUInitEv+0x4a>
		setAllPowerModesToNormal();
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f81f 	bl	800146c <_ZN6BMX16024setAllPowerModesToNormalEv>
		configAcc();
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fc5e 	bl	8000cf0 <_ZN6BMX1609configAccEv>
		configGyro();
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fc83 	bl	8000d40 <_ZN6BMX16010configGyroEv>
		configMag();
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fca8 	bl	8000d90 <_ZN6BMX1609configMagEv>
		HAL_I2C_Mem_Read(&hi2c2, BMX160_I2C_ADDR, PMU_STATUS_REG, I2C_MEMADD_SIZE_8BIT, &powerStatus, 1, HAL_MAX_DELAY);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3368      	adds	r3, #104	; 0x68
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	9202      	str	r2, [sp, #8]
 800144a:	2201      	movs	r2, #1
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2301      	movs	r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	21d0      	movs	r1, #208	; 0xd0
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <_ZN6BMX1607IMUInitEv+0x54>)
 8001458:	f002 fad0 	bl	80039fc <HAL_I2C_Mem_Read>
		while(1)
		{

		}
	}
}
 800145c:	e000      	b.n	8001460 <_ZN6BMX1607IMUInitEv+0x4c>
		while(1)
 800145e:	e7fe      	b.n	800145e <_ZN6BMX1607IMUInitEv+0x4a>
}
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000184 	.word	0x20000184

0800146c <_ZN6BMX16024setAllPowerModesToNormalEv>:
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, CMD_REG, I2C_MEMADD_SIZE_8BIT, &ACC_NORMAL_MODE_CMD, 1, HAL_MAX_DELAY);
	HAL_Delay(10);
}


void BMX160::setAllPowerModesToNormal(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af04      	add	r7, sp, #16
 8001472:	6078      	str	r0, [r7, #4]

	// Set gyro to normal mode
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, CMD_REG, I2C_MEMADD_SIZE_8BIT, &GYRO_NORMAL_MODE_CMD, 1, HAL_MAX_DELAY);
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	2301      	movs	r3, #1
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <_ZN6BMX16024setAllPowerModesToNormalEv+0x70>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2301      	movs	r3, #1
 8001484:	227e      	movs	r2, #126	; 0x7e
 8001486:	21d0      	movs	r1, #208	; 0xd0
 8001488:	4815      	ldr	r0, [pc, #84]	; (80014e0 <_ZN6BMX16024setAllPowerModesToNormalEv+0x74>)
 800148a:	f002 f9a3 	bl	80037d4 <HAL_I2C_Mem_Write>
	// HAL_DELAYS break thread, these delays only run during initialization
	HAL_Delay(10);
 800148e:	200a      	movs	r0, #10
 8001490:	f000 fed0 	bl	8002234 <HAL_Delay>

	// Set accelerometer to normal mode
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, CMD_REG, I2C_MEMADD_SIZE_8BIT, &ACC_NORMAL_MODE_CMD, 1, HAL_MAX_DELAY);
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2301      	movs	r3, #1
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_ZN6BMX16024setAllPowerModesToNormalEv+0x78>)
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2301      	movs	r3, #1
 80014a4:	227e      	movs	r2, #126	; 0x7e
 80014a6:	21d0      	movs	r1, #208	; 0xd0
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <_ZN6BMX16024setAllPowerModesToNormalEv+0x74>)
 80014aa:	f002 f993 	bl	80037d4 <HAL_I2C_Mem_Write>
	// HAL_DELAYS break thread, these delays only run during initialization
	HAL_Delay(10);
 80014ae:	200a      	movs	r0, #10
 80014b0:	f000 fec0 	bl	8002234 <HAL_Delay>

	// Set magnetometer to normal mode
	HAL_I2C_Mem_Write(&hi2c2, BMX160_I2C_ADDR, CMD_REG, I2C_MEMADD_SIZE_8BIT, &MAG_NORMAL_MODE_CMD, 1, HAL_MAX_DELAY);
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <_ZN6BMX16024setAllPowerModesToNormalEv+0x7c>)
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	227e      	movs	r2, #126	; 0x7e
 80014c6:	21d0      	movs	r1, #208	; 0xd0
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <_ZN6BMX16024setAllPowerModesToNormalEv+0x74>)
 80014ca:	f002 f983 	bl	80037d4 <HAL_I2C_Mem_Write>
	// HAL_DELAYS break thread, these delays only run during initialization
	HAL_Delay(10);
 80014ce:	200a      	movs	r0, #10
 80014d0:	f000 feb0 	bl	8002234 <HAL_Delay>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000004 	.word	0x20000004
 80014e0:	20000184 	.word	0x20000184
 80014e4:	20000003 	.word	0x20000003
 80014e8:	20000005 	.word	0x20000005

080014ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800150e:	4b2f      	ldr	r3, [pc, #188]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001510:	4a2f      	ldr	r2, [pc, #188]	; (80015d0 <MX_ADC1_Init+0xe4>)
 8001512:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001516:	2200      	movs	r2, #0
 8001518:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <MX_ADC1_Init+0xe0>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <MX_ADC1_Init+0xe0>)
 800152e:	2204      	movs	r2, #4
 8001530:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001534:	2200      	movs	r2, #0
 8001536:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <MX_ADC1_Init+0xe0>)
 800153a:	2200      	movs	r2, #0
 800153c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800153e:	4b23      	ldr	r3, [pc, #140]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001540:	2201      	movs	r2, #1
 8001542:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800154c:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_ADC1_Init+0xe0>)
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001554:	2200      	movs	r2, #0
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_ADC1_Init+0xe0>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001562:	2200      	movs	r2, #0
 8001564:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800156e:	4817      	ldr	r0, [pc, #92]	; (80015cc <MX_ADC1_Init+0xe0>)
 8001570:	f001 f824 	bl	80025bc <HAL_ADC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800157a:	f000 fa61 	bl	8001a40 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	4810      	ldr	r0, [pc, #64]	; (80015cc <MX_ADC1_Init+0xe0>)
 800158a:	f001 fd73 	bl	8003074 <HAL_ADCEx_MultiModeConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001594:	f000 fa54 	bl	8001a40 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_ADC1_Init+0xe8>)
 800159a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800159c:	2306      	movs	r3, #6
 800159e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015a4:	237f      	movs	r3, #127	; 0x7f
 80015a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015a8:	2304      	movs	r3, #4
 80015aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_ADC1_Init+0xe0>)
 80015b6:	f001 f94d 	bl	8002854 <HAL_ADC_ConfigChannel>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80015c0:	f000 fa3e 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2000011c 	.word	0x2000011c
 80015d0:	42028000 	.word	0x42028000
 80015d4:	0c900008 	.word	0x0c900008

080015d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0ae      	sub	sp, #184	; 0xb8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2294      	movs	r2, #148	; 0x94
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f005 ffdd 	bl	80075b8 <memset>
  if(adcHandle->Instance==ADC1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <HAL_ADC_MspInit+0xa8>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d137      	bne.n	8001678 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001608:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800160c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800160e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4618      	mov	r0, r3
 800161c:	f004 f8ca 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001626:	f000 fa0b 	bl	8001a40 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800162a:	4b16      	ldr	r3, [pc, #88]	; (8001684 <HAL_ADC_MspInit+0xac>)
 800162c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162e:	4a15      	ldr	r2, [pc, #84]	; (8001684 <HAL_ADC_MspInit+0xac>)
 8001630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <HAL_ADC_MspInit+0xac>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_ADC_MspInit+0xac>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_ADC_MspInit+0xac>)
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_ADC_MspInit+0xac>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0304 	and.w	r3, r3, #4
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 800165a:	2304      	movs	r3, #4
 800165c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001660:	2303      	movs	r3, #3
 8001662:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001670:	4619      	mov	r1, r3
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <HAL_ADC_MspInit+0xb0>)
 8001674:	f001 fe86 	bl	8003384 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001678:	bf00      	nop
 800167a:	37b8      	adds	r7, #184	; 0xb8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	42028000 	.word	0x42028000
 8001684:	40021000 	.word	0x40021000
 8001688:	42020800 	.word	0x42020800

0800168c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	4a44      	ldr	r2, [pc, #272]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ae:	4b42      	ldr	r3, [pc, #264]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ba:	4b3f      	ldr	r3, [pc, #252]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a3e      	ldr	r2, [pc, #248]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016c0:	f043 0320 	orr.w	r3, r3, #32
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b3c      	ldr	r3, [pc, #240]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a38      	ldr	r2, [pc, #224]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016f0:	f043 0302 	orr.w	r3, r3, #2
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <MX_GPIO_Init+0x12c>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <MX_GPIO_Init+0x12c>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <MX_GPIO_Init+0x12c>)
 8001708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <MX_GPIO_Init+0x12c>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  HAL_PWREx_EnableVddIO2();
 800171a:	f003 f85d 	bl	80047d8 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSB_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001724:	4825      	ldr	r0, [pc, #148]	; (80017bc <MX_GPIO_Init+0x130>)
 8001726:	f001 ffad 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4824      	ldr	r0, [pc, #144]	; (80017c0 <MX_GPIO_Init+0x134>)
 8001730:	f001 ffa8 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	21a0      	movs	r1, #160	; 0xa0
 8001738:	4822      	ldr	r0, [pc, #136]	; (80017c4 <MX_GPIO_Init+0x138>)
 800173a:	f001 ffa3 	bl	8003684 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CSB_Pin|LED_RED_Pin;
 800173e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <MX_GPIO_Init+0x130>)
 8001758:	f001 fe14 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800175c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001762:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001766:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4814      	ldr	r0, [pc, #80]	; (80017c4 <MX_GPIO_Init+0x138>)
 8001774:	f001 fe06 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_GPIO_Init+0x134>)
 8001790:	f001 fdf8 	bl	8003384 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8001794:	23a0      	movs	r3, #160	; 0xa0
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001798:	2301      	movs	r3, #1
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4619      	mov	r1, r3
 80017aa:	4806      	ldr	r0, [pc, #24]	; (80017c4 <MX_GPIO_Init+0x138>)
 80017ac:	f001 fdea 	bl	8003384 <HAL_GPIO_Init>

}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	; 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	42020000 	.word	0x42020000
 80017c0:	42020800 	.word	0x42020800
 80017c4:	42020400 	.word	0x42020400

080017c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <MX_I2C2_Init+0x74>)
 80017ce:	4a1c      	ldr	r2, [pc, #112]	; (8001840 <MX_I2C2_Init+0x78>)
 80017d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40505681;
 80017d2:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_I2C2_Init+0x74>)
 80017d4:	4a1b      	ldr	r2, [pc, #108]	; (8001844 <MX_I2C2_Init+0x7c>)
 80017d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017d8:	4b18      	ldr	r3, [pc, #96]	; (800183c <MX_I2C2_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_I2C2_Init+0x74>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_I2C2_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017ea:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_I2C2_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C2_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C2_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C2_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <MX_I2C2_Init+0x74>)
 8001804:	f001 ff56 	bl	80036b4 <HAL_I2C_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800180e:	f000 f917 	bl	8001a40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4809      	ldr	r0, [pc, #36]	; (800183c <MX_I2C2_Init+0x74>)
 8001816:	f002 fdcb 	bl	80043b0 <HAL_I2CEx_ConfigAnalogFilter>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001820:	f000 f90e 	bl	8001a40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_I2C2_Init+0x74>)
 8001828:	f002 fe0d 	bl	8004446 <HAL_I2CEx_ConfigDigitalFilter>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001832:	f000 f905 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000184 	.word	0x20000184
 8001840:	40005800 	.word	0x40005800
 8001844:	40505681 	.word	0x40505681

08001848 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b0ae      	sub	sp, #184	; 0xb8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	2294      	movs	r2, #148	; 0x94
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f005 fea5 	bl	80075b8 <memset>
  if(i2cHandle->Instance==I2C2)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <HAL_I2C_MspInit+0xb0>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d13a      	bne.n	80018ee <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800187c:	2300      	movs	r3, #0
 800187e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	4618      	mov	r0, r3
 8001886:	f003 ff95 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001890:	f000 f8d6 	bl	8001a40 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	4a18      	ldr	r2, [pc, #96]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 800189a:	f043 0320 	orr.w	r3, r3, #32
 800189e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 80018a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a4:	f003 0320 	and.w	r3, r3, #32
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ac:	2303      	movs	r3, #3
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018b2:	2312      	movs	r3, #18
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018c4:	2304      	movs	r3, #4
 80018c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ce:	4619      	mov	r1, r3
 80018d0:	480b      	ldr	r0, [pc, #44]	; (8001900 <HAL_I2C_MspInit+0xb8>)
 80018d2:	f001 fd57 	bl	8003384 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 80018dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018e0:	6593      	str	r3, [r2, #88]	; 0x58
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_I2C_MspInit+0xb4>)
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	37b8      	adds	r7, #184	; 0xb8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40005800 	.word	0x40005800
 80018fc:	40021000 	.word	0x40021000
 8001900:	42021400 	.word	0x42021400

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b094      	sub	sp, #80	; 0x50
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800190a:	f000 fc1c 	bl	8002146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190e:	f000 f827 	bl	8001960 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001912:	f7ff febb 	bl	800168c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001916:	f7ff fde9 	bl	80014ec <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 800191a:	f000 fab5 	bl	8001e88 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800191e:	f000 f895 	bl	8001a4c <MX_RTC_Init>
  MX_UCPD1_Init();
 8001922:	f000 fa7b 	bl	8001e1c <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8001926:	f000 fb5d 	bl	8001fe4 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800192a:	f7ff ff4d 	bl	80017c8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800192e:	2201      	movs	r2, #1
 8001930:	2120      	movs	r1, #32
 8001932:	480a      	ldr	r0, [pc, #40]	; (800195c <main+0x58>)
 8001934:	f001 fea6 	bl	8003684 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  IMUData_t Data;
	  BMX160::getInstance().GetResult(Data);
 8001938:	f7ff fbda 	bl	80010f0 <_ZN6BMX16011getInstanceEv>
 800193c:	4603      	mov	r3, r0
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	4639      	mov	r1, r7
 8001944:	4618      	mov	r0, r3
 8001946:	4790      	blx	r2
	  BMX160::getInstance().selfTestGyro();
 8001948:	f7ff fbd2 	bl	80010f0 <_ZN6BMX16011getInstanceEv>
 800194c:	4603      	mov	r3, r0
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fae0 	bl	8000f14 <_ZN6BMX16012selfTestGyroEv>
	  HAL_Delay(100);
 8001954:	2064      	movs	r0, #100	; 0x64
 8001956:	f000 fc6d 	bl	8002234 <HAL_Delay>
  }
 800195a:	e7ed      	b.n	8001938 <main+0x34>
 800195c:	42020000 	.word	0x42020000

08001960 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b098      	sub	sp, #96	; 0x60
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0318 	add.w	r3, r7, #24
 800196a:	2248      	movs	r2, #72	; 0x48
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f005 fe22 	bl	80075b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	1d3b      	adds	r3, r7, #4
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8001982:	2000      	movs	r0, #0
 8001984:	f002 fecc 	bl	8004720 <HAL_PWREx_ControlVoltageScaling>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf14      	ite	ne
 800198e:	2301      	movne	r3, #1
 8001990:	2300      	moveq	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8001998:	f000 f852 	bl	8001a40 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800199c:	f002 fea2 	bl	80046e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80019a0:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <_Z18SystemClock_Configv+0xdc>)
 80019a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <_Z18SystemClock_Configv+0xdc>)
 80019a8:	f023 0318 	bic.w	r3, r3, #24
 80019ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 80019b0:	2334      	movs	r3, #52	; 0x34
 80019b2:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80019b4:	2381      	movs	r3, #129	; 0x81
 80019b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80019b8:	2301      	movs	r3, #1
 80019ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019bc:	2301      	movs	r3, #1
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019c4:	2360      	movs	r3, #96	; 0x60
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c8:	2302      	movs	r3, #2
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019cc:	2301      	movs	r3, #1
 80019ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d0:	2301      	movs	r3, #1
 80019d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80019d4:	2337      	movs	r3, #55	; 0x37
 80019d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019d8:	2307      	movs	r3, #7
 80019da:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e0:	2302      	movs	r3, #2
 80019e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e4:	f107 0318 	add.w	r3, r7, #24
 80019e8:	4618      	mov	r0, r3
 80019ea:	f002 ff29 	bl	8004840 <HAL_RCC_OscConfig>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80019fe:	f000 f81f 	bl	8001a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a02:	230f      	movs	r3, #15
 8001a04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a06:	2303      	movs	r3, #3
 8001a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2105      	movs	r1, #5
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f003 fbe6 	bl	80051ec <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001a30:	f000 f806 	bl	8001a40 <Error_Handler>
  }
}
 8001a34:	bf00      	nop
 8001a36:	3760      	adds	r7, #96	; 0x60
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000

08001a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a44:	b672      	cpsid	i
}
 8001a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <Error_Handler+0x8>
	...

08001a4c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
 8001a60:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a64:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <MX_RTC_Init+0x90>)
 8001a66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a70:	227f      	movs	r2, #127	; 0x7f
 8001a72:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a74:	4b18      	ldr	r3, [pc, #96]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a76:	22ff      	movs	r2, #255	; 0xff
 8001a78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001a80:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a92:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a9a:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001a9c:	f004 fba0 	bl	80061e0 <HAL_RTC_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001aa6:	f7ff ffcb 	bl	8001a40 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	4619      	mov	r1, r3
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <MX_RTC_Init+0x8c>)
 8001ac0:	f004 fc9c 	bl	80063fc <HAL_RTCEx_PrivilegeModeSet>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001aca:	f7ff ffb9 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200001d8 	.word	0x200001d8
 8001adc:	40002800 	.word	0x40002800

08001ae0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b0a8      	sub	sp, #160	; 0xa0
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2294      	movs	r2, #148	; 0x94
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 fd61 	bl	80075b8 <memset>
  if(rtcHandle->Instance==RTC)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a16      	ldr	r2, [pc, #88]	; (8001b54 <HAL_RTC_MspInit+0x74>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d124      	bne.n	8001b4a <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fe4e 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001b1e:	f7ff ff8f 	bl	8001a40 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b28:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001b32:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b3e:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <HAL_RTC_MspInit+0x78>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001b4a:	bf00      	nop
 8001b4c:	37a0      	adds	r7, #160	; 0xa0
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40002800 	.word	0x40002800
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6593      	str	r3, [r2, #88]	; 0x58
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MspInit+0x44>)
 8001b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40021000 	.word	0x40021000

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 fb00 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_kill>:

int _kill(int pid, int sig)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c12:	f005 fca7 	bl	8007564 <__errno>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2216      	movs	r2, #22
 8001c1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <_exit>:

void _exit (int status)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ffe7 	bl	8001c08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c3a:	e7fe      	b.n	8001c3a <_exit+0x12>

08001c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <SystemInit+0x20>)
 8001c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c46:	4a05      	ldr	r2, [pc, #20]	; (8001c5c <SystemInit+0x20>)
 8001c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001c66:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e005      	b.n	8001c8e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001c82:	4b48      	ldr	r3, [pc, #288]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001c8e:	4a46      	ldr	r2, [pc, #280]	; (8001da8 <SystemCoreClockUpdate+0x148>)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c96:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c98:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 030c 	and.w	r3, r3, #12
 8001ca0:	2b0c      	cmp	r3, #12
 8001ca2:	d866      	bhi.n	8001d72 <SystemCoreClockUpdate+0x112>
 8001ca4:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <SystemCoreClockUpdate+0x4c>)
 8001ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001caa:	bf00      	nop
 8001cac:	08001ce1 	.word	0x08001ce1
 8001cb0:	08001d73 	.word	0x08001d73
 8001cb4:	08001d73 	.word	0x08001d73
 8001cb8:	08001d73 	.word	0x08001d73
 8001cbc:	08001ce9 	.word	0x08001ce9
 8001cc0:	08001d73 	.word	0x08001d73
 8001cc4:	08001d73 	.word	0x08001d73
 8001cc8:	08001d73 	.word	0x08001d73
 8001ccc:	08001cf1 	.word	0x08001cf1
 8001cd0:	08001d73 	.word	0x08001d73
 8001cd4:	08001d73 	.word	0x08001d73
 8001cd8:	08001d73 	.word	0x08001d73
 8001cdc:	08001cf9 	.word	0x08001cf9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001ce0:	4a32      	ldr	r2, [pc, #200]	; (8001dac <SystemCoreClockUpdate+0x14c>)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	6013      	str	r3, [r2, #0]
      break;
 8001ce6:	e048      	b.n	8001d7a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <SystemCoreClockUpdate+0x14c>)
 8001cea:	4a31      	ldr	r2, [pc, #196]	; (8001db0 <SystemCoreClockUpdate+0x150>)
 8001cec:	601a      	str	r2, [r3, #0]
      break;
 8001cee:	e044      	b.n	8001d7a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <SystemCoreClockUpdate+0x14c>)
 8001cf2:	4a30      	ldr	r2, [pc, #192]	; (8001db4 <SystemCoreClockUpdate+0x154>)
 8001cf4:	601a      	str	r2, [r3, #0]
      break;
 8001cf6:	e040      	b.n	8001d7a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001cf8:	4b2a      	ldr	r3, [pc, #168]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	091b      	lsrs	r3, r3, #4
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	60bb      	str	r3, [r7, #8]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d003      	beq.n	8001d1e <SystemCoreClockUpdate+0xbe>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d006      	beq.n	8001d2a <SystemCoreClockUpdate+0xca>
 8001d1c:	e00b      	b.n	8001d36 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001d1e:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <SystemCoreClockUpdate+0x150>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	613b      	str	r3, [r7, #16]
          break;
 8001d28:	e00b      	b.n	8001d42 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001d2a:	4a22      	ldr	r2, [pc, #136]	; (8001db4 <SystemCoreClockUpdate+0x154>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d32:	613b      	str	r3, [r7, #16]
          break;
 8001d34:	e005      	b.n	8001d42 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	613b      	str	r3, [r7, #16]
          break;
 8001d40:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001d42:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001d54:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0e5b      	lsrs	r3, r3, #25
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	4a0f      	ldr	r2, [pc, #60]	; (8001dac <SystemCoreClockUpdate+0x14c>)
 8001d6e:	6013      	str	r3, [r2, #0]
      break;
 8001d70:	e003      	b.n	8001d7a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <SystemCoreClockUpdate+0x14c>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	6013      	str	r3, [r2, #0]
      break;
 8001d78:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <SystemCoreClockUpdate+0x144>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	091b      	lsrs	r3, r3, #4
 8001d80:	f003 030f 	and.w	r3, r3, #15
 8001d84:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <SystemCoreClockUpdate+0x158>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <SystemCoreClockUpdate+0x14c>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
 8001d94:	4a05      	ldr	r2, [pc, #20]	; (8001dac <SystemCoreClockUpdate+0x14c>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	371c      	adds	r7, #28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08007698 	.word	0x08007698
 8001dac:	20000014 	.word	0x20000014
 8001db0:	00f42400 	.word	0x00f42400
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	08007680 	.word	0x08007680

08001dbc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001dc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001dd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000

08001dec <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001df4:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4013      	ands	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40021000 	.word	0x40021000

08001e1c <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e22:	463b      	mov	r3, r7
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
 8001e30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001e32:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001e36:	f7ff ffd9 	bl	8001dec <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001e3a:	2002      	movs	r0, #2
 8001e3c:	f7ff ffbe 	bl	8001dbc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001e40:	2001      	movs	r0, #1
 8001e42:	f7ff ffbb 	bl	8001dbc <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	463b      	mov	r3, r7
 8001e56:	4619      	mov	r1, r3
 8001e58:	4809      	ldr	r0, [pc, #36]	; (8001e80 <MX_UCPD1_Init+0x64>)
 8001e5a:	f005 fab2 	bl	80073c2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001e64:	2303      	movs	r3, #3
 8001e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4804      	ldr	r0, [pc, #16]	; (8001e84 <MX_UCPD1_Init+0x68>)
 8001e72:	f005 faa6 	bl	80073c2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001e76:	bf00      	nop
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	42020400 	.word	0x42020400
 8001e84:	42020000 	.word	0x42020000

08001e88 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001e8c:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001e8e:	4a23      	ldr	r2, [pc, #140]	; (8001f1c <MX_LPUART1_UART_Init+0x94>)
 8001e90:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001e94:	4a22      	ldr	r2, [pc, #136]	; (8001f20 <MX_LPUART1_UART_Init+0x98>)
 8001e96:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e98:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001e9e:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001ea4:	4b1c      	ldr	r3, [pc, #112]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001eac:	220c      	movs	r2, #12
 8001eae:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ece:	4812      	ldr	r0, [pc, #72]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001ed0:	f004 fac0 	bl	8006454 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8001eda:	f7ff fdb1 	bl	8001a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ede:	2100      	movs	r1, #0
 8001ee0:	480d      	ldr	r0, [pc, #52]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001ee2:	f005 f859 	bl	8006f98 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001eec:	f7ff fda8 	bl	8001a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001ef4:	f005 f88e 	bl	8007014 <HAL_UARTEx_SetRxFifoThreshold>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001efe:	f7ff fd9f 	bl	8001a40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_LPUART1_UART_Init+0x90>)
 8001f04:	f005 f80f 	bl	8006f26 <HAL_UARTEx_DisableFifoMode>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001f0e:	f7ff fd97 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000200 	.word	0x20000200
 8001f1c:	40008000 	.word	0x40008000
 8001f20:	00033324 	.word	0x00033324

08001f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b0ae      	sub	sp, #184	; 0xb8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	2294      	movs	r2, #148	; 0x94
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f005 fb37 	bl	80075b8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <HAL_UART_MspInit+0xb4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d13d      	bne.n	8001fd0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f54:	2320      	movs	r3, #32
 8001f56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fc27 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f6c:	f7ff fd68 	bl	8001a40 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f70:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f74:	4a19      	ldr	r2, [pc, #100]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f7c:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f88:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	4a13      	ldr	r2, [pc, #76]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f94:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_UART_MspInit+0xb8>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001fa0:	f002 fc1a 	bl	80047d8 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8001fa4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001fbe:	2308      	movs	r3, #8
 8001fc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <HAL_UART_MspInit+0xbc>)
 8001fcc:	f001 f9da 	bl	8003384 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	37b8      	adds	r7, #184	; 0xb8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40008000 	.word	0x40008000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	42021800 	.word	0x42021800

08001fe4 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <MX_USB_PCD_Init+0x48>)
 8001fea:	4a11      	ldr	r2, [pc, #68]	; (8002030 <MX_USB_PCD_Init+0x4c>)
 8001fec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_USB_PCD_Init+0x48>)
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001ff4:	4b0d      	ldr	r3, [pc, #52]	; (800202c <MX_USB_PCD_Init+0x48>)
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ffa:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_USB_PCD_Init+0x48>)
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <MX_USB_PCD_Init+0x48>)
 8002002:	2200      	movs	r2, #0
 8002004:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_USB_PCD_Init+0x48>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800200c:	4b07      	ldr	r3, [pc, #28]	; (800202c <MX_USB_PCD_Init+0x48>)
 800200e:	2200      	movs	r2, #0
 8002010:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002012:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_USB_PCD_Init+0x48>)
 8002014:	2200      	movs	r2, #0
 8002016:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002018:	4804      	ldr	r0, [pc, #16]	; (800202c <MX_USB_PCD_Init+0x48>)
 800201a:	f002 fa60 	bl	80044de <HAL_PCD_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002024:	f7ff fd0c 	bl	8001a40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000294 	.word	0x20000294
 8002030:	4000d400 	.word	0x4000d400

08002034 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0ae      	sub	sp, #184	; 0xb8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2294      	movs	r2, #148	; 0x94
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f005 faaf 	bl	80075b8 <memset>
  if(pcdHandle->Instance==USB)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <HAL_PCD_MspInit+0xb4>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d13d      	bne.n	80020e0 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002064:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002068:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4618      	mov	r0, r3
 8002076:	f003 fb9d 	bl	80057b4 <HAL_RCCEx_PeriphCLKConfig>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002080:	f7ff fcde 	bl	8001a40 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_PCD_MspInit+0xb8>)
 8002086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002088:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_PCD_MspInit+0xb8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_PCD_MspInit+0xb8>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800209c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80020a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80020b6:	230a      	movs	r3, #10
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020c0:	4619      	mov	r1, r3
 80020c2:	480b      	ldr	r0, [pc, #44]	; (80020f0 <HAL_PCD_MspInit+0xbc>)
 80020c4:	f001 f95e 	bl	8003384 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80020c8:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_PCD_MspInit+0xb8>)
 80020ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020cc:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_PCD_MspInit+0xb8>)
 80020ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_PCD_MspInit+0xb8>)
 80020d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80020e0:	bf00      	nop
 80020e2:	37b8      	adds	r7, #184	; 0xb8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	4000d400 	.word	0x4000d400
 80020ec:	40021000 	.word	0x40021000
 80020f0:	42020000 	.word	0x42020000

080020f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800212c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020f8:	f7ff fda0 	bl	8001c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020fe:	e003      	b.n	8002108 <LoopCopyDataInit>

08002100 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002102:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002104:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002106:	3104      	adds	r1, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002108:	480a      	ldr	r0, [pc, #40]	; (8002134 <LoopForever+0xa>)
	ldr	r3, =_edata
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <LoopForever+0xe>)
	adds	r2, r0, r1
 800210c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800210e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002110:	d3f6      	bcc.n	8002100 <CopyDataInit>
	ldr	r2, =_sbss
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002114:	e002      	b.n	800211c <LoopFillZerobss>

08002116 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002116:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002118:	f842 3b04 	str.w	r3, [r2], #4

0800211c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <LoopForever+0x16>)
	cmp	r2, r3
 800211e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002120:	d3f9      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002122:	f005 fa25 	bl	8007570 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002126:	f7ff fbed 	bl	8001904 <main>

0800212a <LoopForever>:

LoopForever:
    b LoopForever
 800212a:	e7fe      	b.n	800212a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800212c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8002130:	08007710 	.word	0x08007710
	ldr	r0, =_sdata
 8002134:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002138:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 800213c:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8002140:	20000590 	.word	0x20000590

08002144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002144:	e7fe      	b.n	8002144 <ADC1_2_IRQHandler>

08002146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002150:	2004      	movs	r0, #4
 8002152:	f001 f8e5 	bl	8003320 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002156:	f7ff fd83 	bl	8001c60 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800215a:	2000      	movs	r0, #0
 800215c:	f000 f80e 	bl	800217c <HAL_InitTick>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	71fb      	strb	r3, [r7, #7]
 800216a:	e001      	b.n	8002170 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800216c:	f7ff fcf6 	bl	8001b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002170:	79fb      	ldrb	r3, [r7, #7]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
	...

0800217c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_InitTick+0x6c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d023      	beq.n	80021d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002190:	4b16      	ldr	r3, [pc, #88]	; (80021ec <HAL_InitTick+0x70>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_InitTick+0x6c>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80021a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 f8df 	bl	800336a <HAL_SYSTICK_Config>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b07      	cmp	r3, #7
 80021b6:	d809      	bhi.n	80021cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295
 80021c0:	f001 f8b9 	bl	8003336 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_InitTick+0x74>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
 80021ca:	e007      	b.n	80021dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
 80021d0:	e004      	b.n	80021dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	73fb      	strb	r3, [r7, #15]
 80021d6:	e001      	b.n	80021dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	2000001c 	.word	0x2000001c
 80021ec:	20000014 	.word	0x20000014
 80021f0:	20000018 	.word	0x20000018

080021f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	2000001c 	.word	0x2000001c
 8002218:	20000588 	.word	0x20000588

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000588 	.word	0x20000588

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800224e:	4b0a      	ldr	r3, [pc, #40]	; (8002278 <HAL_Delay+0x44>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000001c 	.word	0x2000001c

0800227c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	609a      	str	r2, [r3, #8]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
 80022f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	3360      	adds	r3, #96	; 0x60
 80022f6:	461a      	mov	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <LL_ADC_SetOffset+0x44>)
 8002306:	4013      	ands	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	4313      	orrs	r3, r2
 8002314:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	03fff000 	.word	0x03fff000

0800232c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3360      	adds	r3, #96	; 0x60
 800233a:	461a      	mov	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3360      	adds	r3, #96	; 0x60
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	431a      	orrs	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002382:	bf00      	nop
 8002384:	371c      	adds	r7, #28
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	615a      	str	r2, [r3, #20]
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3330      	adds	r3, #48	; 0x30
 80023c4:	461a      	mov	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	f003 030c 	and.w	r3, r3, #12
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	211f      	movs	r1, #31
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0e9b      	lsrs	r3, r3, #26
 80023ec:	f003 011f 	and.w	r1, r3, #31
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	431a      	orrs	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002400:	bf00      	nop
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3314      	adds	r3, #20
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	0e5b      	lsrs	r3, r3, #25
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	4413      	add	r3, r2
 800242a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	0d1b      	lsrs	r3, r3, #20
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2107      	movs	r1, #7
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	401a      	ands	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	0d1b      	lsrs	r3, r3, #20
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002456:	bf00      	nop
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	43db      	mvns	r3, r3
 800247e:	401a      	ands	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0318 	and.w	r3, r3, #24
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002488:	40d9      	lsrs	r1, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	400b      	ands	r3, r1
 800248e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002492:	431a      	orrs	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	0007ffff 	.word	0x0007ffff

080024ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80024bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6093      	str	r3, [r2, #8]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024e4:	d101      	bne.n	80024ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002508:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800250c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002534:	d101      	bne.n	800253a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <LL_ADC_IsEnabled+0x18>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <LL_ADC_IsEnabled+0x1a>
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b04      	cmp	r3, #4
 8002580:	d101      	bne.n	8002586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d101      	bne.n	80025ac <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e12e      	b.n	8002834 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7fe fff7 	bl	80015d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7ff ff67 	bl	80024d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff4d 	bl	80024ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff82 	bl	8002520 <LL_ADC_IsInternalRegulatorEnabled>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d115      	bne.n	800264e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff66 	bl	80024f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800262c:	4b83      	ldr	r3, [pc, #524]	; (800283c <HAL_ADC_Init+0x280>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	4a83      	ldr	r2, [pc, #524]	; (8002840 <HAL_ADC_Init+0x284>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	3301      	adds	r3, #1
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002640:	e002      	b.n	8002648 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3b01      	subs	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1f9      	bne.n	8002642 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff64 	bl	8002520 <LL_ADC_IsInternalRegulatorEnabled>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f043 0210 	orr.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff75 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002684:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b00      	cmp	r3, #0
 8002690:	f040 80c7 	bne.w	8002822 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	f040 80c3 	bne.w	8002822 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026a4:	f043 0202 	orr.w	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff49 	bl	8002548 <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d110      	bne.n	80026de <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026bc:	4861      	ldr	r0, [pc, #388]	; (8002844 <HAL_ADC_Init+0x288>)
 80026be:	f7ff ff43 	bl	8002548 <LL_ADC_IsEnabled>
 80026c2:	4604      	mov	r4, r0
 80026c4:	4860      	ldr	r0, [pc, #384]	; (8002848 <HAL_ADC_Init+0x28c>)
 80026c6:	f7ff ff3f 	bl	8002548 <LL_ADC_IsEnabled>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4323      	orrs	r3, r4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4619      	mov	r1, r3
 80026d8:	485c      	ldr	r0, [pc, #368]	; (800284c <HAL_ADC_Init+0x290>)
 80026da:	f7ff fdcf 	bl	800227c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7e5b      	ldrb	r3, [r3, #25]
 80026e2:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80026ee:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80026f4:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fc:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d106      	bne.n	800271a <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002710:	3b01      	subs	r3, #1
 8002712:	045b      	lsls	r3, r3, #17
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	2b00      	cmp	r3, #0
 8002720:	d009      	beq.n	8002736 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272e:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	4b44      	ldr	r3, [pc, #272]	; (8002850 <HAL_ADC_Init+0x294>)
 800273e:	4013      	ands	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	430b      	orrs	r3, r1
 8002748:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff ff20 	bl	8002594 <LL_ADC_INJ_IsConversionOngoing>
 8002754:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d140      	bne.n	80027de <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d13d      	bne.n	80027de <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	7e1b      	ldrb	r3, [r3, #24]
 800276a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800276c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002774:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002784:	f023 0306 	bic.w	r3, r3, #6
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6812      	ldr	r2, [r2, #0]
 800278c:	69b9      	ldr	r1, [r7, #24]
 800278e:	430b      	orrs	r3, r1
 8002790:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002798:	2b01      	cmp	r3, #1
 800279a:	d118      	bne.n	80027ce <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027a6:	f023 0304 	bic.w	r3, r3, #4
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027b2:	4311      	orrs	r1, r2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027b8:	4311      	orrs	r1, r2
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027be:	430a      	orrs	r2, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	e007      	b.n	80027de <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 0201 	bic.w	r2, r2, #1
 80027dc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10c      	bne.n	8002800 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	f023 010f 	bic.w	r1, r3, #15
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	1e5a      	subs	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
 80027fe:	e007      	b.n	8002810 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 020f 	bic.w	r2, r2, #15
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002814:	f023 0303 	bic.w	r3, r3, #3
 8002818:	f043 0201 	orr.w	r2, r3, #1
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	659a      	str	r2, [r3, #88]	; 0x58
 8002820:	e007      	b.n	8002832 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f043 0210 	orr.w	r2, r3, #16
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002832:	7ffb      	ldrb	r3, [r7, #31]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3724      	adds	r7, #36	; 0x24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd90      	pop	{r4, r7, pc}
 800283c:	20000014 	.word	0x20000014
 8002840:	053e2d63 	.word	0x053e2d63
 8002844:	42028000 	.word	0x42028000
 8002848:	42028100 	.word	0x42028100
 800284c:	42028300 	.word	0x42028300
 8002850:	fff0c007 	.word	0xfff0c007

08002854 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002854:	b590      	push	{r4, r7, lr}
 8002856:	b0b7      	sub	sp, #220	; 0xdc
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800286e:	2b01      	cmp	r3, #1
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x22>
 8002872:	2302      	movs	r3, #2
 8002874:	e3c1      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x7a6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fe73 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	f040 83a6 	bne.w	8002fdc <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	f7ff fd89 	bl	80023b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fe61 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 80028ac:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fe6d 	bl	8002594 <LL_ADC_INJ_IsConversionOngoing>
 80028ba:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f040 81c1 	bne.w	8002c4a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 81bc 	bne.w	8002c4a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028da:	d10f      	bne.n	80028fc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2200      	movs	r2, #0
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7ff fd90 	bl	800240c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fd4a 	bl	800238e <LL_ADC_SetSamplingTimeCommonConfig>
 80028fa:	e00e      	b.n	800291a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6818      	ldr	r0, [r3, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	6819      	ldr	r1, [r3, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	461a      	mov	r2, r3
 800290a:	f7ff fd7f 	bl	800240c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fd3a 	bl	800238e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d00a      	beq.n	8002952 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6919      	ldr	r1, [r3, #16]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800294c:	f7ff fcca 	bl	80022e4 <LL_ADC_SetOffset>
 8002950:	e17b      	b.n	8002c4a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fce7 	bl	800232c <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_ADC_ConfigChannel+0x12a>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fcdc 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	0e9b      	lsrs	r3, r3, #26
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	e01e      	b.n	80029bc <HAL_ADC_ConfigChannel+0x168>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fcd1 	bl	800232c <LL_ADC_GetOffsetChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800299c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e004      	b.n	80029ba <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80029b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x180>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	e018      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x1b2>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80029e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80029f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e004      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80029fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d106      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fca0 	bl	8002358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fc84 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x1f0>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fc79 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	f003 021f 	and.w	r2, r3, #31
 8002a42:	e01e      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x22e>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fc6e 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002a6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8002a76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d105      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x246>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	e018      	b.n	8002acc <HAL_ADC_ConfigChannel+0x278>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002aae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002ab6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8002ac2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fc3d 	bl	8002358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fc21 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x2b6>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fc16 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	e01e      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x2f4>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff fc0b 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002b30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e004      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8002b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x30c>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	e016      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x33a>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002b72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8002b80:	2320      	movs	r3, #32
 8002b82:	e004      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8002b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d106      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2200      	movs	r2, #0
 8002b98:	2102      	movs	r1, #2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fbdc 	bl	8002358 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2103      	movs	r1, #3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fbc0 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x378>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2103      	movs	r1, #3
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff fbb5 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	f003 021f 	and.w	r2, r3, #31
 8002bca:	e017      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x3a8>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2103      	movs	r1, #3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fbaa 	bl	800232c <LL_ADC_GetOffsetChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002be6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002be8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8002bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x3c0>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	0e9b      	lsrs	r3, r3, #26
 8002c0e:	f003 031f 	and.w	r3, r3, #31
 8002c12:	e011      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x3e4>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e003      	b.n	8002c38 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8002c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d106      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2103      	movs	r1, #3
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fb87 	bl	8002358 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff fc7a 	bl	8002548 <LL_ADC_IsEnabled>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f040 81c9 	bne.w	8002fee <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f7ff fbfb 	bl	8002464 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	4a8f      	ldr	r2, [pc, #572]	; (8002eb0 <HAL_ADC_ConfigChannel+0x65c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	f040 8131 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10b      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x44e>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	0e9b      	lsrs	r3, r3, #26
 8002c90:	3301      	adds	r3, #1
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	2b09      	cmp	r3, #9
 8002c98:	bf94      	ite	ls
 8002c9a:	2301      	movls	r3, #1
 8002c9c:	2300      	movhi	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e019      	b.n	8002cd6 <HAL_ADC_ConfigChannel+0x482>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cb2:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002cb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e003      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8002cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	bf94      	ite	ls
 8002cd0:	2301      	movls	r3, #1
 8002cd2:	2300      	movhi	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d079      	beq.n	8002dce <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d107      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x4a2>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	0e9b      	lsrs	r3, r3, #26
 8002cec:	3301      	adds	r3, #1
 8002cee:	069b      	lsls	r3, r3, #26
 8002cf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cf4:	e015      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x4ce>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfe:	fa93 f3a3 	rbit	r3, r3
 8002d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002d0e:	2320      	movs	r3, #32
 8002d10:	e003      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	069b      	lsls	r3, r3, #26
 8002d1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x4ee>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0e9b      	lsrs	r3, r3, #26
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	e017      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x51e>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4a:	fa93 f3a3 	rbit	r3, r3
 8002d4e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d52:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8002d5a:	2320      	movs	r3, #32
 8002d5c:	e003      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8002d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3301      	adds	r3, #1
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d72:	ea42 0103 	orr.w	r1, r2, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10a      	bne.n	8002d98 <HAL_ADC_ConfigChannel+0x544>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	3301      	adds	r3, #1
 8002d8a:	f003 021f 	and.w	r2, r3, #31
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	051b      	lsls	r3, r3, #20
 8002d96:	e018      	b.n	8002dca <HAL_ADC_ConfigChannel+0x576>
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f003 021f 	and.w	r2, r3, #31
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	4413      	add	r3, r2
 8002dc8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	e081      	b.n	8002ed2 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x596>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	0e9b      	lsrs	r3, r3, #26
 8002de0:	3301      	adds	r3, #1
 8002de2:	069b      	lsls	r3, r3, #26
 8002de4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002de8:	e015      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x5c2>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df2:	fa93 f3a3 	rbit	r3, r3
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8002e02:	2320      	movs	r3, #32
 8002e04:	e003      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	069b      	lsls	r3, r3, #26
 8002e12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x5e2>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	0e9b      	lsrs	r3, r3, #26
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2101      	movs	r1, #1
 8002e30:	fa01 f303 	lsl.w	r3, r1, r3
 8002e34:	e017      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x612>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	fa93 f3a3 	rbit	r3, r3
 8002e42:	61fb      	str	r3, [r7, #28]
  return result;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	e003      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	2101      	movs	r1, #1
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	ea42 0103 	orr.w	r1, r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_ADC_ConfigChannel+0x63e>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	f003 021f 	and.w	r2, r3, #31
 8002e82:	4613      	mov	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	4413      	add	r3, r2
 8002e88:	3b1e      	subs	r3, #30
 8002e8a:	051b      	lsls	r3, r3, #20
 8002e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e90:	e01e      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x67c>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	613b      	str	r3, [r7, #16]
  return result;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d104      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002eaa:	2320      	movs	r3, #32
 8002eac:	e006      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x668>
 8002eae:	bf00      	nop
 8002eb0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f003 021f 	and.w	r2, r3, #31
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b1e      	subs	r3, #30
 8002eca:	051b      	lsls	r3, r3, #20
 8002ecc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	6892      	ldr	r2, [r2, #8]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7ff fa98 	bl	800240c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8082 	beq.w	8002fee <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eea:	4847      	ldr	r0, [pc, #284]	; (8003008 <HAL_ADC_ConfigChannel+0x7b4>)
 8002eec:	f7ff f9ec 	bl	80022c8 <LL_ADC_GetCommonPathInternalCh>
 8002ef0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ef4:	4845      	ldr	r0, [pc, #276]	; (800300c <HAL_ADC_ConfigChannel+0x7b8>)
 8002ef6:	f7ff fb27 	bl	8002548 <LL_ADC_IsEnabled>
 8002efa:	4604      	mov	r4, r0
 8002efc:	4844      	ldr	r0, [pc, #272]	; (8003010 <HAL_ADC_ConfigChannel+0x7bc>)
 8002efe:	f7ff fb23 	bl	8002548 <LL_ADC_IsEnabled>
 8002f02:	4603      	mov	r3, r0
 8002f04:	4323      	orrs	r3, r4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d15e      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a41      	ldr	r2, [pc, #260]	; (8003014 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d127      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d121      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a39      	ldr	r2, [pc, #228]	; (800300c <HAL_ADC_ConfigChannel+0x7b8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d161      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f32:	4619      	mov	r1, r3
 8002f34:	4834      	ldr	r0, [pc, #208]	; (8003008 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f36:	f7ff f9b4 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f3a:	4b37      	ldr	r3, [pc, #220]	; (8003018 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	4a36      	ldr	r2, [pc, #216]	; (800301c <HAL_ADC_ConfigChannel+0x7c8>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	099b      	lsrs	r3, r3, #6
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8002f52:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002f54:	e002      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f9      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f62:	e044      	b.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2d      	ldr	r2, [pc, #180]	; (8003020 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d113      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a23      	ldr	r2, [pc, #140]	; (800300c <HAL_ADC_ConfigChannel+0x7b8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d134      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	481e      	ldr	r0, [pc, #120]	; (8003008 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f90:	f7ff f987 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f94:	e02b      	b.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d126      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fa0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d120      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a16      	ldr	r2, [pc, #88]	; (800300c <HAL_ADC_ConfigChannel+0x7b8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d11b      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4811      	ldr	r0, [pc, #68]	; (8003008 <HAL_ADC_ConfigChannel+0x7b4>)
 8002fc2:	f7ff f96e 	bl	80022a2 <LL_ADC_SetCommonPathInternalCh>
 8002fc6:	e012      	b.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fcc:	f043 0220 	orr.w	r2, r3, #32
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002fda:	e008      	b.n	8002fee <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002ff6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	37dc      	adds	r7, #220	; 0xdc
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	bf00      	nop
 8003004:	80080000 	.word	0x80080000
 8003008:	42028300 	.word	0x42028300
 800300c:	42028000 	.word	0x42028000
 8003010:	42028100 	.word	0x42028100
 8003014:	c7520000 	.word	0xc7520000
 8003018:	20000014 	.word	0x20000014
 800301c:	053e2d63 	.word	0x053e2d63
 8003020:	cb840000 	.word	0xcb840000
 8003024:	80000001 	.word	0x80000001

08003028 <LL_ADC_IsEnabled>:
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <LL_ADC_IsEnabled+0x18>
 800303c:	2301      	movs	r3, #1
 800303e:	e000      	b.n	8003042 <LL_ADC_IsEnabled+0x1a>
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_ADC_REG_IsConversionOngoing>:
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d101      	bne.n	8003066 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b0a1      	sub	sp, #132	; 0x84
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800308e:	2302      	movs	r3, #2
 8003090:	e089      	b.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800309a:	2300      	movs	r3, #0
 800309c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800309e:	2300      	movs	r3, #0
 80030a0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d102      	bne.n	80030b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80030ac:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	e001      	b.n	80030b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c0:	f043 0220 	orr.w	r2, r3, #32
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e068      	b.n	80031a6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff ffb9 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 80030dc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff ffb3 	bl	800304e <LL_ADC_REG_IsConversionOngoing>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d14a      	bne.n	8003184 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80030ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d147      	bne.n	8003184 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80030f4:	4b30      	ldr	r3, [pc, #192]	; (80031b8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80030f6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d027      	beq.n	8003150 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003112:	035b      	lsls	r3, r3, #13
 8003114:	430b      	orrs	r3, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800311a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311c:	4824      	ldr	r0, [pc, #144]	; (80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800311e:	f7ff ff83 	bl	8003028 <LL_ADC_IsEnabled>
 8003122:	4604      	mov	r4, r0
 8003124:	4823      	ldr	r0, [pc, #140]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003126:	f7ff ff7f 	bl	8003028 <LL_ADC_IsEnabled>
 800312a:	4603      	mov	r3, r0
 800312c:	4323      	orrs	r3, r4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d132      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800313a:	f023 030f 	bic.w	r3, r3, #15
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	6811      	ldr	r1, [r2, #0]
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	6892      	ldr	r2, [r2, #8]
 8003146:	430a      	orrs	r2, r1
 8003148:	431a      	orrs	r2, r3
 800314a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800314c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800314e:	e023      	b.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800315c:	4814      	ldr	r0, [pc, #80]	; (80031b0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 800315e:	f7ff ff63 	bl	8003028 <LL_ADC_IsEnabled>
 8003162:	4604      	mov	r4, r0
 8003164:	4813      	ldr	r0, [pc, #76]	; (80031b4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003166:	f7ff ff5f 	bl	8003028 <LL_ADC_IsEnabled>
 800316a:	4603      	mov	r3, r0
 800316c:	4323      	orrs	r3, r4
 800316e:	2b00      	cmp	r3, #0
 8003170:	d112      	bne.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003172:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800317a:	f023 030f 	bic.w	r3, r3, #15
 800317e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003180:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003182:	e009      	b.n	8003198 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003196:	e000      	b.n	800319a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003198:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80031a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3784      	adds	r7, #132	; 0x84
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd90      	pop	{r4, r7, pc}
 80031ae:	bf00      	nop
 80031b0:	42028000 	.word	0x42028000
 80031b4:	42028100 	.word	0x42028100
 80031b8:	42028300 	.word	0x42028300

080031bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ee:	4a04      	ldr	r2, [pc, #16]	; (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	60d3      	str	r3, [r2, #12]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003208:	4b04      	ldr	r3, [pc, #16]	; (800321c <__NVIC_GetPriorityGrouping+0x18>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 0307 	and.w	r3, r3, #7
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0152      	lsls	r2, r2, #5
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0152      	lsls	r2, r2, #5
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b03      	cmp	r3, #3
 8003290:	bf28      	it	cs
 8003292:	2303      	movcs	r3, #3
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3303      	adds	r3, #3
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b04      	subs	r3, #4
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ec:	d301      	bcc.n	80032f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00f      	b.n	8003312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <SysTick_Config+0x40>)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032fa:	2107      	movs	r1, #7
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f7ff ff8e 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <SysTick_Config+0x40>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800330a:	4b04      	ldr	r3, [pc, #16]	; (800331c <SysTick_Config+0x40>)
 800330c:	2207      	movs	r2, #7
 800330e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	e000e010 	.word	0xe000e010

08003320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff47 	bl	80031bc <__NVIC_SetPriorityGrouping>
}
 800332e:	bf00      	nop
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	4603      	mov	r3, r0
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	607a      	str	r2, [r7, #4]
 8003342:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff5e 	bl	8003204 <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff90 	bl	8003274 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5f 	bl	8003220 <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7ff ffb2 	bl	80032dc <SysTick_Config>
 8003378:	4603      	mov	r3, r0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003392:	e158      	b.n	8003646 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	4013      	ands	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 814a 	beq.w	8003640 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d005      	beq.n	80033c4 <HAL_GPIO_Init+0x40>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d130      	bne.n	8003426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033fa:	2201      	movs	r2, #1
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4013      	ands	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	091b      	lsrs	r3, r3, #4
 8003410:	f003 0201 	and.w	r2, r3, #1
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b03      	cmp	r3, #3
 8003430:	d017      	beq.n	8003462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	4013      	ands	r3, r2
 8003448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d123      	bne.n	80034b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	220f      	movs	r2, #15
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4013      	ands	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	691a      	ldr	r2, [r3, #16]
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	08da      	lsrs	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3208      	adds	r2, #8
 80034b0:	6939      	ldr	r1, [r7, #16]
 80034b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0203 	and.w	r2, r3, #3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80a4 	beq.w	8003640 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80034f8:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	3318      	adds	r3, #24
 8003500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0303 	and.w	r3, r3, #3
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	220f      	movs	r2, #15
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	4013      	ands	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_GPIO_Init+0x2e4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d025      	beq.n	8003570 <HAL_GPIO_Init+0x1ec>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a51      	ldr	r2, [pc, #324]	; (800366c <HAL_GPIO_Init+0x2e8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d01f      	beq.n	800356c <HAL_GPIO_Init+0x1e8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a50      	ldr	r2, [pc, #320]	; (8003670 <HAL_GPIO_Init+0x2ec>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d019      	beq.n	8003568 <HAL_GPIO_Init+0x1e4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a4f      	ldr	r2, [pc, #316]	; (8003674 <HAL_GPIO_Init+0x2f0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_GPIO_Init+0x1e0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4e      	ldr	r2, [pc, #312]	; (8003678 <HAL_GPIO_Init+0x2f4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00d      	beq.n	8003560 <HAL_GPIO_Init+0x1dc>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a4d      	ldr	r2, [pc, #308]	; (800367c <HAL_GPIO_Init+0x2f8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <HAL_GPIO_Init+0x1d8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <HAL_GPIO_Init+0x2fc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_GPIO_Init+0x1d4>
 8003554:	2306      	movs	r3, #6
 8003556:	e00c      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003558:	2307      	movs	r3, #7
 800355a:	e00a      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 800355c:	2305      	movs	r3, #5
 800355e:	e008      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003560:	2304      	movs	r3, #4
 8003562:	e006      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003564:	2303      	movs	r3, #3
 8003566:	e004      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003568:	2302      	movs	r3, #2
 800356a:	e002      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_GPIO_Init+0x1ee>
 8003570:	2300      	movs	r3, #0
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	f002 0203 	and.w	r2, r2, #3
 8003578:	00d2      	lsls	r2, r2, #3
 800357a:	4093      	lsls	r3, r2
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8003582:	4938      	ldr	r1, [pc, #224]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3318      	adds	r3, #24
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003590:	4b34      	ldr	r3, [pc, #208]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	43db      	mvns	r3, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b4:	4a2b      	ldr	r2, [pc, #172]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035ba:	4b2a      	ldr	r3, [pc, #168]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4013      	ands	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035de:	4a21      	ldr	r2, [pc, #132]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035e4:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800360a:	4a16      	ldr	r2, [pc, #88]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8003612:	4b14      	ldr	r3, [pc, #80]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 8003614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003618:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	43db      	mvns	r3, r3
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4013      	ands	r3, r2
 8003622:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <HAL_GPIO_Init+0x2e0>)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	3301      	adds	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	f47f ae9f 	bne.w	8003394 <HAL_GPIO_Init+0x10>
  }
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	4002f400 	.word	0x4002f400
 8003668:	42020000 	.word	0x42020000
 800366c:	42020400 	.word	0x42020400
 8003670:	42020800 	.word	0x42020800
 8003674:	42020c00 	.word	0x42020c00
 8003678:	42021000 	.word	0x42021000
 800367c:	42021400 	.word	0x42021400
 8003680:	42021800 	.word	0x42021800

08003684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
 8003690:	4613      	mov	r3, r2
 8003692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003694:	787b      	ldrb	r3, [r7, #1]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036a0:	e002      	b.n	80036a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e081      	b.n	80037ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d106      	bne.n	80036e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7fe f8b4 	bl	8001848 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2224      	movs	r2, #36	; 0x24
 80036e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 0201 	bic.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d107      	bne.n	800372e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	e006      	b.n	800373c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800373a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d104      	bne.n	800374e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800374c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800375c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691a      	ldr	r2, [r3, #16]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2220      	movs	r2, #32
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	817b      	strh	r3, [r7, #10]
 80037e6:	460b      	mov	r3, r1
 80037e8:	813b      	strh	r3, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	f040 80f9 	bne.w	80039ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_I2C_Mem_Write+0x34>
 8003802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800380e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0ed      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_I2C_Mem_Write+0x4e>
 800381e:	2302      	movs	r3, #2
 8003820:	e0e6      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800382a:	f7fe fcf7 	bl	800221c <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	2319      	movs	r3, #25
 8003836:	2201      	movs	r2, #1
 8003838:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fbcb 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d001      	beq.n	800384c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0d1      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2221      	movs	r2, #33	; 0x21
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2240      	movs	r2, #64	; 0x40
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003874:	88f8      	ldrh	r0, [r7, #6]
 8003876:	893a      	ldrh	r2, [r7, #8]
 8003878:	8979      	ldrh	r1, [r7, #10]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4603      	mov	r3, r0
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fadb 	bl	8003e40 <I2C_RequestMemoryWrite>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0a9      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2bff      	cmp	r3, #255	; 0xff
 80038a4:	d90e      	bls.n	80038c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	22ff      	movs	r2, #255	; 0xff
 80038aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	8979      	ldrh	r1, [r7, #10]
 80038b4:	2300      	movs	r3, #0
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fd45 	bl	800434c <I2C_TransferConfig>
 80038c2:	e00f      	b.n	80038e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	8979      	ldrh	r1, [r7, #10]
 80038d6:	2300      	movs	r3, #0
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 fd34 	bl	800434c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fbc4 	bl	8004076 <I2C_WaitOnTXISFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e07b      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	781a      	ldrb	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d034      	beq.n	800399c <HAL_I2C_Mem_Write+0x1c8>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003936:	2b00      	cmp	r3, #0
 8003938:	d130      	bne.n	800399c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	2200      	movs	r2, #0
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fb47 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e04d      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2bff      	cmp	r3, #255	; 0xff
 800395c:	d90e      	bls.n	800397c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	22ff      	movs	r2, #255	; 0xff
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	2300      	movs	r3, #0
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fce9 	bl	800434c <I2C_TransferConfig>
 800397a:	e00f      	b.n	800399c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	b2da      	uxtb	r2, r3
 800398c:	8979      	ldrh	r1, [r7, #10]
 800398e:	2300      	movs	r3, #0
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fcd8 	bl	800434c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d19e      	bne.n	80038e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fbaa 	bl	8004104 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e01a      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2220      	movs	r2, #32
 80039c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6859      	ldr	r1, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_I2C_Mem_Write+0x224>)
 80039ce:	400b      	ands	r3, r1
 80039d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	fe00e800 	.word	0xfe00e800

080039fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	4608      	mov	r0, r1
 8003a06:	4611      	mov	r1, r2
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	817b      	strh	r3, [r7, #10]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	813b      	strh	r3, [r7, #8]
 8003a12:	4613      	mov	r3, r2
 8003a14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	f040 80fd 	bne.w	8003c1e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a24:	6a3b      	ldr	r3, [r7, #32]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x34>
 8003a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0f1      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_I2C_Mem_Read+0x4e>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0ea      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a52:	f7fe fbe3 	bl	800221c <HAL_GetTick>
 8003a56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2319      	movs	r3, #25
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f000 fab7 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0d5      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2222      	movs	r2, #34	; 0x22
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2240      	movs	r2, #64	; 0x40
 8003a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9c:	88f8      	ldrh	r0, [r7, #6]
 8003a9e:	893a      	ldrh	r2, [r7, #8]
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	9301      	str	r3, [sp, #4]
 8003aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	4603      	mov	r3, r0
 8003aac:	68f8      	ldr	r0, [r7, #12]
 8003aae:	f000 fa1b 	bl	8003ee8 <I2C_RequestMemoryRead>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d005      	beq.n	8003ac4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0ad      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2bff      	cmp	r3, #255	; 0xff
 8003acc:	d90e      	bls.n	8003aec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	22ff      	movs	r2, #255	; 0xff
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	8979      	ldrh	r1, [r7, #10]
 8003adc:	4b52      	ldr	r3, [pc, #328]	; (8003c28 <HAL_I2C_Mem_Read+0x22c>)
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 fc31 	bl	800434c <I2C_TransferConfig>
 8003aea:	e00f      	b.n	8003b0c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	8979      	ldrh	r1, [r7, #10]
 8003afe:	4b4a      	ldr	r3, [pc, #296]	; (8003c28 <HAL_I2C_Mem_Read+0x22c>)
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 fc20 	bl	800434c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	2200      	movs	r2, #0
 8003b14:	2104      	movs	r1, #4
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fa5e 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e07c      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d034      	beq.n	8003bcc <HAL_I2C_Mem_Read+0x1d0>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d130      	bne.n	8003bcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	2200      	movs	r2, #0
 8003b72:	2180      	movs	r1, #128	; 0x80
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fa2f 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e04d      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	2bff      	cmp	r3, #255	; 0xff
 8003b8c:	d90e      	bls.n	8003bac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	22ff      	movs	r2, #255	; 0xff
 8003b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fbd1 	bl	800434c <I2C_TransferConfig>
 8003baa:	e00f      	b.n	8003bcc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	8979      	ldrh	r1, [r7, #10]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fbc0 	bl	800434c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d19a      	bne.n	8003b0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fa92 	bl	8004104 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e01a      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_I2C_Mem_Read+0x230>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	e000      	b.n	8003c20 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c1e:	2302      	movs	r3, #2
  }
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	80002400 	.word	0x80002400
 8003c2c:	fe00e800 	.word	0xfe00e800

08003c30 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	f040 80f1 	bne.w	8003e34 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c60:	d101      	bne.n	8003c66 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003c62:	2302      	movs	r3, #2
 8003c64:	e0e7      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_I2C_IsDeviceReady+0x44>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e0e0      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_I2C_IsDeviceReady+0x72>
 8003c92:	897b      	ldrh	r3, [r7, #10]
 8003c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ca0:	e004      	b.n	8003cac <HAL_I2C_IsDeviceReady+0x7c>
 8003ca2:	897b      	ldrh	r3, [r7, #10]
 8003ca4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ca8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fab3 	bl	800221c <HAL_GetTick>
 8003cb6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	bf0c      	ite	eq
 8003cc6:	2301      	moveq	r3, #1
 8003cc8:	2300      	movne	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 0310 	and.w	r3, r3, #16
 8003cd8:	2b10      	cmp	r3, #16
 8003cda:	bf0c      	ite	eq
 8003cdc:	2301      	moveq	r3, #1
 8003cde:	2300      	movne	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ce4:	e034      	b.n	8003d50 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d01a      	beq.n	8003d24 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fe fa95 	bl	800221c <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <HAL_I2C_IsDeviceReady+0xd4>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10f      	bne.n	8003d24 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d10:	f043 0220 	orr.w	r2, r3, #32
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e088      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	f003 0320 	and.w	r3, r3, #32
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	bf0c      	ite	eq
 8003d32:	2301      	moveq	r3, #1
 8003d34:	2300      	movne	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	bf0c      	ite	eq
 8003d48:	2301      	moveq	r3, #1
 8003d4a:	2300      	movne	r3, #0
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <HAL_I2C_IsDeviceReady+0x12c>
 8003d56:	7fbb      	ldrb	r3, [r7, #30]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0c4      	beq.n	8003ce6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b10      	cmp	r3, #16
 8003d68:	d01a      	beq.n	8003da0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2120      	movs	r1, #32
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f92f 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e058      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e04a      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	2200      	movs	r2, #0
 8003da8:	2120      	movs	r1, #32
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 f914 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e03d      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2210      	movs	r2, #16
 8003dc0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d118      	bne.n	8003e04 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	2120      	movs	r1, #32
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 f8f3 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e01c      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2220      	movs	r2, #32
 8003e02:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3301      	adds	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	f63f af3b 	bhi.w	8003c8a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2220      	movs	r2, #32
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003e34:	2302      	movs	r3, #2
  }
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3720      	adds	r7, #32
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	4608      	mov	r0, r1
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	817b      	strh	r3, [r7, #10]
 8003e52:	460b      	mov	r3, r1
 8003e54:	813b      	strh	r3, [r7, #8]
 8003e56:	4613      	mov	r3, r2
 8003e58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	8979      	ldrh	r1, [r7, #10]
 8003e60:	4b20      	ldr	r3, [pc, #128]	; (8003ee4 <I2C_RequestMemoryWrite+0xa4>)
 8003e62:	9300      	str	r3, [sp, #0]
 8003e64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fa6f 	bl	800434c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	69b9      	ldr	r1, [r7, #24]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f8ff 	bl	8004076 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e02c      	b.n	8003edc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e82:	88fb      	ldrh	r3, [r7, #6]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d105      	bne.n	8003e94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e88:	893b      	ldrh	r3, [r7, #8]
 8003e8a:	b2da      	uxtb	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	629a      	str	r2, [r3, #40]	; 0x28
 8003e92:	e015      	b.n	8003ec0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e94:	893b      	ldrh	r3, [r7, #8]
 8003e96:	0a1b      	lsrs	r3, r3, #8
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ea2:	69fa      	ldr	r2, [r7, #28]
 8003ea4:	69b9      	ldr	r1, [r7, #24]
 8003ea6:	68f8      	ldr	r0, [r7, #12]
 8003ea8:	f000 f8e5 	bl	8004076 <I2C_WaitOnTXISFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e012      	b.n	8003edc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb6:	893b      	ldrh	r3, [r7, #8]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f000 f884 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	80002000 	.word	0x80002000

08003ee8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	817b      	strh	r3, [r7, #10]
 8003efa:	460b      	mov	r3, r1
 8003efc:	813b      	strh	r3, [r7, #8]
 8003efe:	4613      	mov	r3, r2
 8003f00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	8979      	ldrh	r1, [r7, #10]
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <I2C_RequestMemoryRead+0xa4>)
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fa1c 	bl	800434c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f14:	69fa      	ldr	r2, [r7, #28]
 8003f16:	69b9      	ldr	r1, [r7, #24]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f8ac 	bl	8004076 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e02c      	b.n	8003f82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f28:	88fb      	ldrh	r3, [r7, #6]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d105      	bne.n	8003f3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2e:	893b      	ldrh	r3, [r7, #8]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
 8003f38:	e015      	b.n	8003f66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f3a:	893b      	ldrh	r3, [r7, #8]
 8003f3c:	0a1b      	lsrs	r3, r3, #8
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f48:	69fa      	ldr	r2, [r7, #28]
 8003f4a:	69b9      	ldr	r1, [r7, #24]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 f892 	bl	8004076 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e012      	b.n	8003f82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5c:	893b      	ldrh	r3, [r7, #8]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2140      	movs	r1, #64	; 0x40
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f831 	bl	8003fd8 <I2C_WaitOnFlagUntilTimeout>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	80002000 	.word	0x80002000

08003f90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d103      	bne.n	8003fae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2200      	movs	r2, #0
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d007      	beq.n	8003fcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699a      	ldr	r2, [r3, #24]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	619a      	str	r2, [r3, #24]
  }
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fe8:	e031      	b.n	800404e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d02d      	beq.n	800404e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff2:	f7fe f913 	bl	800221c <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d302      	bcc.n	8004008 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d122      	bne.n	800404e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	4013      	ands	r3, r2
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	429a      	cmp	r2, r3
 8004016:	bf0c      	ite	eq
 8004018:	2301      	moveq	r3, #1
 800401a:	2300      	movne	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	461a      	mov	r2, r3
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	429a      	cmp	r2, r3
 8004024:	d113      	bne.n	800404e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e00f      	b.n	800406e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699a      	ldr	r2, [r3, #24]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4013      	ands	r3, r2
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	bf0c      	ite	eq
 800405e:	2301      	moveq	r3, #1
 8004060:	2300      	movne	r3, #0
 8004062:	b2db      	uxtb	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	429a      	cmp	r2, r3
 800406a:	d0be      	beq.n	8003fea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004082:	e033      	b.n	80040ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68b9      	ldr	r1, [r7, #8]
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f87f 	bl	800418c <I2C_IsErrorOccurred>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e031      	b.n	80040fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d025      	beq.n	80040ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a0:	f7fe f8bc 	bl	800221c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d302      	bcc.n	80040b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d11a      	bne.n	80040ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d013      	beq.n	80040ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c8:	f043 0220 	orr.w	r2, r3, #32
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e007      	b.n	80040fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d1c4      	bne.n	8004084 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004110:	e02f      	b.n	8004172 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f838 	bl	800418c <I2C_IsErrorOccurred>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e02d      	b.n	8004182 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004126:	f7fe f879 	bl	800221c <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	429a      	cmp	r2, r3
 8004134:	d302      	bcc.n	800413c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d11a      	bne.n	8004172 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b20      	cmp	r3, #32
 8004148:	d013      	beq.n	8004172 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414e:	f043 0220 	orr.w	r2, r3, #32
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2220      	movs	r2, #32
 800415a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e007      	b.n	8004182 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b20      	cmp	r3, #32
 800417e:	d1c8      	bne.n	8004112 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	; 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041a6:	2300      	movs	r3, #0
 80041a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d068      	beq.n	800428a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2210      	movs	r2, #16
 80041be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041c0:	e049      	b.n	8004256 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d045      	beq.n	8004256 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fe f827 	bl	800221c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_IsErrorOccurred+0x54>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d13a      	bne.n	8004256 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004202:	d121      	bne.n	8004248 <I2C_IsErrorOccurred+0xbc>
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420a:	d01d      	beq.n	8004248 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800420c:	7cfb      	ldrb	r3, [r7, #19]
 800420e:	2b20      	cmp	r3, #32
 8004210:	d01a      	beq.n	8004248 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004220:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004222:	f7fd fffb 	bl	800221c <HAL_GetTick>
 8004226:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004228:	e00e      	b.n	8004248 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800422a:	f7fd fff7 	bl	800221c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b19      	cmp	r3, #25
 8004236:	d907      	bls.n	8004248 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f043 0320 	orr.w	r3, r3, #32
 800423e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004246:	e006      	b.n	8004256 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b20      	cmp	r3, #32
 8004254:	d1e9      	bne.n	800422a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	f003 0320 	and.w	r3, r3, #32
 8004260:	2b20      	cmp	r3, #32
 8004262:	d003      	beq.n	800426c <I2C_IsErrorOccurred+0xe0>
 8004264:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0aa      	beq.n	80041c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800426c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2220      	movs	r2, #32
 800427a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800427c:	6a3b      	ldr	r3, [r7, #32]
 800427e:	f043 0304 	orr.w	r3, r3, #4
 8004282:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00b      	beq.n	80042b4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f043 0308 	orr.w	r3, r3, #8
 80042c4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80042f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d01c      	beq.n	800433a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff fe45 	bl	8003f90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	4b0d      	ldr	r3, [pc, #52]	; (8004348 <I2C_IsErrorOccurred+0x1bc>)
 8004312:	400b      	ands	r3, r1
 8004314:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800433a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800433e:	4618      	mov	r0, r3
 8004340:	3728      	adds	r7, #40	; 0x28
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	fe00e800 	.word	0xfe00e800

0800434c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	460b      	mov	r3, r1
 8004358:	817b      	strh	r3, [r7, #10]
 800435a:	4613      	mov	r3, r2
 800435c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800435e:	897b      	ldrh	r3, [r7, #10]
 8004360:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004364:	7a7b      	ldrb	r3, [r7, #9]
 8004366:	041b      	lsls	r3, r3, #16
 8004368:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800436c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	4313      	orrs	r3, r2
 8004376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800437a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	0d5b      	lsrs	r3, r3, #21
 8004386:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800438a:	4b08      	ldr	r3, [pc, #32]	; (80043ac <I2C_TransferConfig+0x60>)
 800438c:	430b      	orrs	r3, r1
 800438e:	43db      	mvns	r3, r3
 8004390:	ea02 0103 	and.w	r1, r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	430a      	orrs	r2, r1
 800439c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	03ff63ff 	.word	0x03ff63ff

080043b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d138      	bne.n	8004438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e032      	b.n	800443a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b20      	cmp	r3, #32
 800445a:	d139      	bne.n	80044d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004466:	2302      	movs	r3, #2
 8004468:	e033      	b.n	80044d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2224      	movs	r2, #36	; 0x24
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044e0:	b08b      	sub	sp, #44	; 0x2c
 80044e2:	af06      	add	r7, sp, #24
 80044e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0cb      	b.n	8004688 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7fd fd95 	bl	8002034 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f002 ffc0 	bl	800749c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451c:	2300      	movs	r3, #0
 800451e:	73fb      	strb	r3, [r7, #15]
 8004520:	e040      	b.n	80045a4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	6879      	ldr	r1, [r7, #4]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	440b      	add	r3, r1
 8004532:	3301      	adds	r3, #1
 8004534:	2201      	movs	r2, #1
 8004536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	6879      	ldr	r1, [r7, #4]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	4613      	mov	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4413      	add	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	440b      	add	r3, r1
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	4613      	mov	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4413      	add	r3, r2
 8004558:	00db      	lsls	r3, r3, #3
 800455a:	440b      	add	r3, r1
 800455c:	3303      	adds	r3, #3
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004562:	7bfa      	ldrb	r2, [r7, #15]
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	4613      	mov	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	440b      	add	r3, r1
 8004570:	3338      	adds	r3, #56	; 0x38
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004576:	7bfa      	ldrb	r2, [r7, #15]
 8004578:	6879      	ldr	r1, [r7, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	333c      	adds	r3, #60	; 0x3c
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800458a:	7bfa      	ldrb	r2, [r7, #15]
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4413      	add	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	440b      	add	r3, r1
 8004598:	3340      	adds	r3, #64	; 0x40
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	3301      	adds	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
 80045a4:	7bfa      	ldrb	r2, [r7, #15]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d3b9      	bcc.n	8004522 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
 80045b2:	e044      	b.n	800463e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045b4:	7bfa      	ldrb	r2, [r7, #15]
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	440b      	add	r3, r1
 80045c2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80045ca:	7bfa      	ldrb	r2, [r7, #15]
 80045cc:	6879      	ldr	r1, [r7, #4]
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	440b      	add	r3, r1
 80045d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045dc:	7bfa      	ldrb	r2, [r7, #15]
 80045de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	440b      	add	r3, r1
 80045ee:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	440b      	add	r3, r1
 8004604:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800460c:	7bfa      	ldrb	r2, [r7, #15]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	440b      	add	r3, r1
 800461a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	440b      	add	r3, r1
 8004630:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	3301      	adds	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
 800463e:	7bfa      	ldrb	r2, [r7, #15]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d3b5      	bcc.n	80045b4 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	603b      	str	r3, [r7, #0]
 800464e:	687e      	ldr	r6, [r7, #4]
 8004650:	466d      	mov	r5, sp
 8004652:	f106 0410 	add.w	r4, r6, #16
 8004656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	1d33      	adds	r3, r6, #4
 8004660:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004662:	6838      	ldr	r0, [r7, #0]
 8004664:	f002 ff35 	bl	80074d2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d102      	bne.n	8004686 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f805 	bl	8004690 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004690 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	f043 0301 	orr.w	r3, r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	f043 0302 	orr.w	r3, r3, #2
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f2:	6013      	str	r3, [r2, #0]
}
 80046f4:	bf00      	nop
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40007000 	.word	0x40007000

08004704 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004708:	4b04      	ldr	r3, [pc, #16]	; (800471c <HAL_PWREx_GetVoltageRange+0x18>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40007000 	.word	0x40007000

08004720 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004728:	4b27      	ldr	r3, [pc, #156]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004730:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004732:	f000 f861 	bl	80047f8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004736:	4603      	mov	r3, r0
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	d101      	bne.n	8004742 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e03e      	b.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474e:	d101      	bne.n	8004754 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e035      	b.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004754:	68ba      	ldr	r2, [r7, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d101      	bne.n	8004760 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e02f      	b.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004760:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004768:	4917      	ldr	r1, [pc, #92]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004770:	4b16      	ldr	r3, [pc, #88]	; (80047cc <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	4a16      	ldr	r2, [pc, #88]	; (80047d0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	09db      	lsrs	r3, r3, #7
 800477e:	2232      	movs	r2, #50	; 0x32
 8004780:	fb02 f303 	mul.w	r3, r2, r3
 8004784:	4a13      	ldr	r2, [pc, #76]	; (80047d4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004786:	fba2 2303 	umull	r2, r3, r2, r3
 800478a:	08db      	lsrs	r3, r3, #3
 800478c:	3301      	adds	r3, #1
 800478e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004790:	e002      	b.n	8004798 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3b01      	subs	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a4:	d102      	bne.n	80047ac <HAL_PWREx_ControlVoltageScaling+0x8c>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f2      	bne.n	8004792 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	d101      	bne.n	80047be <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e000      	b.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40007000 	.word	0x40007000
 80047cc:	20000014 	.word	0x20000014
 80047d0:	0a7c5ac5 	.word	0x0a7c5ac5
 80047d4:	cccccccd 	.word	0xcccccccd

080047d8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	4a04      	ldr	r2, [pc, #16]	; (80047f4 <HAL_PWREx_EnableVddIO2+0x1c>)
 80047e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047e6:	6053      	str	r3, [r2, #4]
}
 80047e8:	bf00      	nop
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	40007000 	.word	0x40007000

080047f8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80047fe:	4b0f      	ldr	r3, [pc, #60]	; (800483c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 800480e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	e00a      	b.n	800482c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d103      	bne.n	8004828 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	e001      	b.n	800482c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004828:	2300      	movs	r3, #0
 800482a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 800482c:	687b      	ldr	r3, [r7, #4]
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40007000 	.word	0x40007000

08004840 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f000 bcc2 	b.w	80051d8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004854:	4b99      	ldr	r3, [pc, #612]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800485e:	4b97      	ldr	r3, [pc, #604]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80e9 	beq.w	8004a48 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d006      	beq.n	800488a <HAL_RCC_OscConfig+0x4a>
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	2b0c      	cmp	r3, #12
 8004880:	f040 8083 	bne.w	800498a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d17f      	bne.n	800498a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800488a:	4b8c      	ldr	r3, [pc, #560]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d006      	beq.n	80048a4 <HAL_RCC_OscConfig+0x64>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d102      	bne.n	80048a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	f000 bc9a 	b.w	80051d8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a8:	4b84      	ldr	r3, [pc, #528]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <HAL_RCC_OscConfig+0x7e>
 80048b4:	4b81      	ldr	r3, [pc, #516]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048bc:	e005      	b.n	80048ca <HAL_RCC_OscConfig+0x8a>
 80048be:	4b7f      	ldr	r3, [pc, #508]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d224      	bcs.n	8004918 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 fe9c 	bl	8005610 <RCC_SetFlashLatencyFromMSIRange>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	f000 bc7a 	b.w	80051d8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e4:	4b75      	ldr	r3, [pc, #468]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a74      	ldr	r2, [pc, #464]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80048ea:	f043 0308 	orr.w	r3, r3, #8
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b72      	ldr	r3, [pc, #456]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	496f      	ldr	r1, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004902:	4b6e      	ldr	r3, [pc, #440]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	496a      	ldr	r1, [pc, #424]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]
 8004916:	e026      	b.n	8004966 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004918:	4b68      	ldr	r3, [pc, #416]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a67      	ldr	r2, [pc, #412]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 800491e:	f043 0308 	orr.w	r3, r3, #8
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	4b65      	ldr	r3, [pc, #404]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	4962      	ldr	r1, [pc, #392]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004936:	4b61      	ldr	r3, [pc, #388]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	021b      	lsls	r3, r3, #8
 8004944:	495d      	ldr	r1, [pc, #372]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10a      	bne.n	8004966 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fe5b 	bl	8005610 <RCC_SetFlashLatencyFromMSIRange>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	f000 bc39 	b.w	80051d8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004966:	f000 fe17 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 800496a:	4603      	mov	r3, r0
 800496c:	4a54      	ldr	r2, [pc, #336]	; (8004ac0 <HAL_RCC_OscConfig+0x280>)
 800496e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004970:	4b54      	ldr	r3, [pc, #336]	; (8004ac4 <HAL_RCC_OscConfig+0x284>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7fd fc01 	bl	800217c <HAL_InitTick>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d060      	beq.n	8004a46 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	f000 bc27 	b.w	80051d8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d039      	beq.n	8004a06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004992:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a49      	ldr	r2, [pc, #292]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004998:	f043 0301 	orr.w	r3, r3, #1
 800499c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800499e:	f7fd fc3d 	bl	800221c <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049a4:	e00f      	b.n	80049c6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049a6:	f7fd fc39 	bl	800221c <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d908      	bls.n	80049c6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049b4:	4b41      	ldr	r3, [pc, #260]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f000 bc09 	b.w	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c6:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0e9      	beq.n	80049a6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d2:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a39      	ldr	r2, [pc, #228]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80049d8:	f043 0308 	orr.w	r3, r3, #8
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	4b37      	ldr	r3, [pc, #220]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	4934      	ldr	r1, [pc, #208]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	021b      	lsls	r3, r3, #8
 80049fe:	492f      	ldr	r1, [pc, #188]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	604b      	str	r3, [r1, #4]
 8004a04:	e020      	b.n	8004a48 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a06:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a2c      	ldr	r2, [pc, #176]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a12:	f7fd fc03 	bl	800221c <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a18:	e00e      	b.n	8004a38 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a1a:	f7fd fbff 	bl	800221c <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d907      	bls.n	8004a38 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a28:	4b24      	ldr	r3, [pc, #144]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e3cf      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a38:	4b20      	ldr	r3, [pc, #128]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1ea      	bne.n	8004a1a <HAL_RCC_OscConfig+0x1da>
 8004a44:	e000      	b.n	8004a48 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d07e      	beq.n	8004b52 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d005      	beq.n	8004a66 <HAL_RCC_OscConfig+0x226>
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b0c      	cmp	r3, #12
 8004a5e:	d10e      	bne.n	8004a7e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d10b      	bne.n	8004a7e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d06e      	beq.n	8004b50 <HAL_RCC_OscConfig+0x310>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d16a      	bne.n	8004b50 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e3ac      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d106      	bne.n	8004a96 <HAL_RCC_OscConfig+0x256>
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0b      	ldr	r2, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	e024      	b.n	8004ae0 <HAL_RCC_OscConfig+0x2a0>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a9e:	d113      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x288>
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a05      	ldr	r2, [pc, #20]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004aa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a02      	ldr	r2, [pc, #8]	; (8004abc <HAL_RCC_OscConfig+0x27c>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e012      	b.n	8004ae0 <HAL_RCC_OscConfig+0x2a0>
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	20000014 	.word	0x20000014
 8004ac4:	20000018 	.word	0x20000018
 8004ac8:	4b8b      	ldr	r3, [pc, #556]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a8a      	ldr	r2, [pc, #552]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a87      	ldr	r2, [pc, #540]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ada:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ade:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d019      	beq.n	8004b1c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fb98 	bl	800221c <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aee:	e00e      	b.n	8004b0e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fd fb94 	bl	800221c <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d907      	bls.n	8004b0e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004afe:	4b7e      	ldr	r3, [pc, #504]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e364      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0e:	4b7a      	ldr	r3, [pc, #488]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0ea      	beq.n	8004af0 <HAL_RCC_OscConfig+0x2b0>
 8004b1a:	e01a      	b.n	8004b52 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd fb7e 	bl	800221c <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b22:	e00e      	b.n	8004b42 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b24:	f7fd fb7a 	bl	800221c <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d907      	bls.n	8004b42 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b32:	4b71      	ldr	r3, [pc, #452]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e34a      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1ea      	bne.n	8004b24 <HAL_RCC_OscConfig+0x2e4>
 8004b4e:	e000      	b.n	8004b52 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d06c      	beq.n	8004c38 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_OscConfig+0x330>
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d119      	bne.n	8004b9e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d116      	bne.n	8004b9e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b70:	4b61      	ldr	r3, [pc, #388]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_OscConfig+0x348>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e327      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b5b      	ldr	r3, [pc, #364]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	4958      	ldr	r1, [pc, #352]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b9c:	e04c      	b.n	8004c38 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d029      	beq.n	8004bfa <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba6:	4b54      	ldr	r3, [pc, #336]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a53      	ldr	r2, [pc, #332]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb2:	f7fd fb33 	bl	800221c <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb8:	e00e      	b.n	8004bd8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bba:	f7fd fb2f 	bl	800221c <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d907      	bls.n	8004bd8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e2ff      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bd8:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0ea      	beq.n	8004bba <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be4:	4b44      	ldr	r3, [pc, #272]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	061b      	lsls	r3, r3, #24
 8004bf2:	4941      	ldr	r1, [pc, #260]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	604b      	str	r3, [r1, #4]
 8004bf8:	e01e      	b.n	8004c38 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfa:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a3e      	ldr	r2, [pc, #248]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c06:	f7fd fb09 	bl	800221c <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c0c:	e00e      	b.n	8004c2c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c0e:	f7fd fb05 	bl	800221c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d907      	bls.n	8004c2c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e2d5      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ea      	bne.n	8004c0e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0308 	and.w	r3, r3, #8
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d062      	beq.n	8004d0a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	695b      	ldr	r3, [r3, #20]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d038      	beq.n	8004cbe <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d108      	bne.n	8004c66 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004c54:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5a:	4a27      	ldr	r2, [pc, #156]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c5c:	f023 0310 	bic.w	r3, r3, #16
 8004c60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c64:	e007      	b.n	8004c76 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c6c:	4a22      	ldr	r2, [pc, #136]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c6e:	f043 0310 	orr.w	r3, r3, #16
 8004c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c7c:	4a1e      	ldr	r2, [pc, #120]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c7e:	f043 0301 	orr.w	r3, r3, #1
 8004c82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c86:	f7fd fac9 	bl	800221c <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c8c:	e00f      	b.n	8004cae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c8e:	f7fd fac5 	bl	800221c <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b07      	cmp	r3, #7
 8004c9a:	d908      	bls.n	8004cae <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e294      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cb4:	f003 0302 	and.w	r3, r3, #2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0e8      	beq.n	8004c8e <HAL_RCC_OscConfig+0x44e>
 8004cbc:	e025      	b.n	8004d0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc4:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cce:	f7fd faa5 	bl	800221c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd4:	e012      	b.n	8004cfc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd6:	f7fd faa1 	bl	800221c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b07      	cmp	r3, #7
 8004ce2:	d90b      	bls.n	8004cfc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <HAL_RCC_OscConfig+0x4b8>)
 8004ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e270      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cfc:	4ba8      	ldr	r3, [pc, #672]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1e5      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 812d 	beq.w	8004f72 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d1c:	4ba0      	ldr	r3, [pc, #640]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10d      	bne.n	8004d44 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d28:	4b9d      	ldr	r3, [pc, #628]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	4a9c      	ldr	r2, [pc, #624]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d32:	6593      	str	r3, [r2, #88]	; 0x58
 8004d34:	4b9a      	ldr	r3, [pc, #616]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d40:	2301      	movs	r3, #1
 8004d42:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d44:	4b97      	ldr	r3, [pc, #604]	; (8004fa4 <HAL_RCC_OscConfig+0x764>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d11e      	bne.n	8004d8e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d50:	4b94      	ldr	r3, [pc, #592]	; (8004fa4 <HAL_RCC_OscConfig+0x764>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a93      	ldr	r2, [pc, #588]	; (8004fa4 <HAL_RCC_OscConfig+0x764>)
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5c:	f7fd fa5e 	bl	800221c <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d62:	e00e      	b.n	8004d82 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d64:	f7fd fa5a 	bl	800221c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d907      	bls.n	8004d82 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d72:	4b8c      	ldr	r3, [pc, #560]	; (8004fa4 <HAL_RCC_OscConfig+0x764>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e22a      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d82:	4b88      	ldr	r3, [pc, #544]	; (8004fa4 <HAL_RCC_OscConfig+0x764>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ea      	beq.n	8004d64 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d01f      	beq.n	8004dda <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d010      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004da6:	4b7e      	ldr	r3, [pc, #504]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	4a7c      	ldr	r2, [pc, #496]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004dae:	f043 0304 	orr.w	r3, r3, #4
 8004db2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004db6:	4b7a      	ldr	r3, [pc, #488]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	4a78      	ldr	r2, [pc, #480]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dc6:	e018      	b.n	8004dfa <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004dc8:	4b75      	ldr	r3, [pc, #468]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	4a74      	ldr	r2, [pc, #464]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dd8:	e00f      	b.n	8004dfa <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004dda:	4b71      	ldr	r3, [pc, #452]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	4a6f      	ldr	r2, [pc, #444]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004de2:	f023 0301 	bic.w	r3, r3, #1
 8004de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dea:	4b6d      	ldr	r3, [pc, #436]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	4a6b      	ldr	r2, [pc, #428]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004df2:	f023 0304 	bic.w	r3, r3, #4
 8004df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d068      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e02:	f7fd fa0b 	bl	800221c <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e08:	e011      	b.n	8004e2e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fd fa07 	bl	800221c <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d908      	bls.n	8004e2e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e1c:	4b60      	ldr	r3, [pc, #384]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e1d4      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e2e:	4b5c      	ldr	r3, [pc, #368]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f003 0302 	and.w	r3, r3, #2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0e6      	beq.n	8004e0a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d022      	beq.n	8004e8e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e48:	4b55      	ldr	r3, [pc, #340]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	4a54      	ldr	r2, [pc, #336]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e58:	e011      	b.n	8004e7e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5a:	f7fd f9df 	bl	800221c <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d908      	bls.n	8004e7e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e1ac      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004e7e:	4b48      	ldr	r3, [pc, #288]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d0e6      	beq.n	8004e5a <HAL_RCC_OscConfig+0x61a>
 8004e8c:	e068      	b.n	8004f60 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004e8e:	4b44      	ldr	r3, [pc, #272]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e94:	4a42      	ldr	r2, [pc, #264]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004e9e:	e011      	b.n	8004ec4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea0:	f7fd f9bc 	bl	800221c <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d908      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004eb2:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e189      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004ec4:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e6      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x660>
 8004ed2:	e045      	b.n	8004f60 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fd f9a2 	bl	800221c <HAL_GetTick>
 8004ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eda:	e011      	b.n	8004f00 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004edc:	f7fd f99e 	bl	800221c <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d908      	bls.n	8004f00 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eee:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e16b      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e6      	bne.n	8004edc <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004f0e:	4b24      	ldr	r3, [pc, #144]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d021      	beq.n	8004f60 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004f1c:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f22:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f2c:	e011      	b.n	8004f52 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fd f975 	bl	800221c <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d908      	bls.n	8004f52 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f40:	4b17      	ldr	r3, [pc, #92]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e142      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004f52:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e6      	bne.n	8004f2e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f60:	7ffb      	ldrb	r3, [r7, #31]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d105      	bne.n	8004f72 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f66:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0320 	and.w	r3, r3, #32
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d04f      	beq.n	800501e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d028      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f8c:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <HAL_RCC_OscConfig+0x760>)
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f96:	f7fd f941 	bl	800221c <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004f9c:	e014      	b.n	8004fc8 <HAL_RCC_OscConfig+0x788>
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004fa8:	f7fd f938 	bl	800221c <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d908      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fb6:	4b8a      	ldr	r3, [pc, #552]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8004fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fbc:	f003 0302 	and.w	r3, r3, #2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e107      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004fc8:	4b85      	ldr	r3, [pc, #532]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8004fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0e8      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x768>
 8004fd6:	e022      	b.n	800501e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fd8:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8004fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004fde:	4a80      	ldr	r2, [pc, #512]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe8:	f7fd f918 	bl	800221c <HAL_GetTick>
 8004fec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004fee:	e00f      	b.n	8005010 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ff0:	f7fd f914 	bl	800221c <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d908      	bls.n	8005010 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ffe:	4b78      	ldr	r3, [pc, #480]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005000:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e0e3      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005010:	4b73      	ldr	r3, [pc, #460]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005012:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e8      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80d7 	beq.w	80051d6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005028:	4b6d      	ldr	r3, [pc, #436]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b0c      	cmp	r3, #12
 8005032:	f000 8091 	beq.w	8005158 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	2b02      	cmp	r3, #2
 800503c:	d166      	bne.n	800510c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800503e:	4b68      	ldr	r3, [pc, #416]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a67      	ldr	r2, [pc, #412]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005044:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fd f8e7 	bl	800221c <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005050:	e00e      	b.n	8005070 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005052:	f7fd f8e3 	bl	800221c <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d907      	bls.n	8005070 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005060:	4b5f      	ldr	r3, [pc, #380]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e0b3      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005070:	4b5b      	ldr	r3, [pc, #364]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1ea      	bne.n	8005052 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800507c:	4b58      	ldr	r3, [pc, #352]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	4b58      	ldr	r3, [pc, #352]	; (80051e4 <HAL_RCC_OscConfig+0x9a4>)
 8005082:	4013      	ands	r3, r2
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800508c:	3a01      	subs	r2, #1
 800508e:	0112      	lsls	r2, r2, #4
 8005090:	4311      	orrs	r1, r2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005096:	0212      	lsls	r2, r2, #8
 8005098:	4311      	orrs	r1, r2
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800509e:	0852      	lsrs	r2, r2, #1
 80050a0:	3a01      	subs	r2, #1
 80050a2:	0552      	lsls	r2, r2, #21
 80050a4:	4311      	orrs	r1, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80050aa:	0852      	lsrs	r2, r2, #1
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0652      	lsls	r2, r2, #25
 80050b0:	4311      	orrs	r1, r2
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050b6:	06d2      	lsls	r2, r2, #27
 80050b8:	430a      	orrs	r2, r1
 80050ba:	4949      	ldr	r1, [pc, #292]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c0:	4b47      	ldr	r3, [pc, #284]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a46      	ldr	r2, [pc, #280]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 80050c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80050cc:	4b44      	ldr	r3, [pc, #272]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4a43      	ldr	r2, [pc, #268]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 80050d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d8:	f7fd f8a0 	bl	800221c <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	e00e      	b.n	80050fe <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e0:	f7fd f89c 	bl	800221c <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d907      	bls.n	80050fe <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ee:	4b3c      	ldr	r3, [pc, #240]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e06c      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050fe:	4b38      	ldr	r3, [pc, #224]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0ea      	beq.n	80050e0 <HAL_RCC_OscConfig+0x8a0>
 800510a:	e064      	b.n	80051d6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510c:	4b34      	ldr	r3, [pc, #208]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a33      	ldr	r2, [pc, #204]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fd f880 	bl	800221c <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800511e:	e00e      	b.n	800513e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005120:	f7fd f87c 	bl	800221c <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d907      	bls.n	800513e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800512e:	4b2c      	ldr	r3, [pc, #176]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 800513a:	2303      	movs	r3, #3
 800513c:	e04c      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800513e:	4b28      	ldr	r3, [pc, #160]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1ea      	bne.n	8005120 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800514a:	4b25      	ldr	r3, [pc, #148]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	4924      	ldr	r1, [pc, #144]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005150:	4b25      	ldr	r3, [pc, #148]	; (80051e8 <HAL_RCC_OscConfig+0x9a8>)
 8005152:	4013      	ands	r3, r2
 8005154:	60cb      	str	r3, [r1, #12]
 8005156:	e03e      	b.n	80051d6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e039      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005164:	4b1e      	ldr	r3, [pc, #120]	; (80051e0 <HAL_RCC_OscConfig+0x9a0>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0203 	and.w	r2, r3, #3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	429a      	cmp	r2, r3
 8005176:	d12c      	bne.n	80051d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005182:	3b01      	subs	r3, #1
 8005184:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005186:	429a      	cmp	r2, r3
 8005188:	d123      	bne.n	80051d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d11b      	bne.n	80051d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d113      	bne.n	80051d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b4:	085b      	lsrs	r3, r3, #1
 80051b6:	3b01      	subs	r3, #1
 80051b8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	3b01      	subs	r3, #1
 80051cc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d001      	beq.n	80051d6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40021000 	.word	0x40021000
 80051e4:	019f800c 	.word	0x019f800c
 80051e8:	feeefffc 	.word	0xfeeefffc

080051ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e11c      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005204:	4b90      	ldr	r3, [pc, #576]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 030f 	and.w	r3, r3, #15
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d910      	bls.n	8005234 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005212:	4b8d      	ldr	r3, [pc, #564]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f023 020f 	bic.w	r2, r3, #15
 800521a:	498b      	ldr	r1, [pc, #556]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005222:	4b89      	ldr	r3, [pc, #548]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d001      	beq.n	8005234 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e104      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d010      	beq.n	8005262 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689a      	ldr	r2, [r3, #8]
 8005244:	4b81      	ldr	r3, [pc, #516]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524c:	429a      	cmp	r2, r3
 800524e:	d908      	bls.n	8005262 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005250:	4b7e      	ldr	r3, [pc, #504]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	497b      	ldr	r1, [pc, #492]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 8085 	beq.w	800537a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2b03      	cmp	r3, #3
 8005276:	d11f      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005278:	4b74      	ldr	r3, [pc, #464]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e0da      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005288:	f000 fa26 	bl	80056d8 <RCC_GetSysClockFreqFromPLLSource>
 800528c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4a6f      	ldr	r2, [pc, #444]	; (8005450 <HAL_RCC_ClockConfig+0x264>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d947      	bls.n	8005326 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005296:	4b6d      	ldr	r3, [pc, #436]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d141      	bne.n	8005326 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052a2:	4b6a      	ldr	r3, [pc, #424]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052aa:	4a68      	ldr	r2, [pc, #416]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80052ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	617b      	str	r3, [r7, #20]
 80052b6:	e036      	b.n	8005326 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d107      	bne.n	80052d0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c0:	4b62      	ldr	r3, [pc, #392]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d115      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0b6      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052d8:	4b5c      	ldr	r3, [pc, #368]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0aa      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052e8:	4b58      	ldr	r3, [pc, #352]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e0a2      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80052f8:	f000 f8b0 	bl	800545c <HAL_RCC_GetSysClockFreq>
 80052fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	4a53      	ldr	r2, [pc, #332]	; (8005450 <HAL_RCC_ClockConfig+0x264>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d90f      	bls.n	8005326 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005306:	4b51      	ldr	r3, [pc, #324]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005312:	4b4e      	ldr	r3, [pc, #312]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531a:	4a4c      	ldr	r2, [pc, #304]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005322:	2380      	movs	r3, #128	; 0x80
 8005324:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005326:	4b49      	ldr	r3, [pc, #292]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f023 0203 	bic.w	r2, r3, #3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	4946      	ldr	r1, [pc, #280]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005334:	4313      	orrs	r3, r2
 8005336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005338:	f7fc ff70 	bl	800221c <HAL_GetTick>
 800533c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800533e:	e013      	b.n	8005368 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005340:	f7fc ff6c 	bl	800221c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d90a      	bls.n	8005368 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005352:	4b3e      	ldr	r3, [pc, #248]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 020c 	and.w	r2, r3, #12
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e06a      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005368:	4b38      	ldr	r3, [pc, #224]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 020c 	and.w	r2, r3, #12
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	429a      	cmp	r2, r3
 8005378:	d1e2      	bne.n	8005340 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d105      	bne.n	800538c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005380:	4b32      	ldr	r3, [pc, #200]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a31      	ldr	r2, [pc, #196]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800538a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d010      	beq.n	80053ba <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689a      	ldr	r2, [r3, #8]
 800539c:	4b2b      	ldr	r3, [pc, #172]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d208      	bcs.n	80053ba <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b28      	ldr	r3, [pc, #160]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4925      	ldr	r1, [pc, #148]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053ba:	4b23      	ldr	r3, [pc, #140]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d210      	bcs.n	80053ea <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c8:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f023 020f 	bic.w	r2, r3, #15
 80053d0:	491d      	ldr	r1, [pc, #116]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d8:	4b1b      	ldr	r3, [pc, #108]	; (8005448 <HAL_RCC_ClockConfig+0x25c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 030f 	and.w	r3, r3, #15
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e029      	b.n	800543e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	4912      	ldr	r1, [pc, #72]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005404:	4313      	orrs	r3, r2
 8005406:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0308 	and.w	r3, r3, #8
 8005410:	2b00      	cmp	r3, #0
 8005412:	d009      	beq.n	8005428 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	490a      	ldr	r1, [pc, #40]	; (800544c <HAL_RCC_ClockConfig+0x260>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005428:	f000 f8b6 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 800542c:	4603      	mov	r3, r0
 800542e:	4a09      	ldr	r2, [pc, #36]	; (8005454 <HAL_RCC_ClockConfig+0x268>)
 8005430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCC_ClockConfig+0x26c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f7fc fea0 	bl	800217c <HAL_InitTick>
 800543c:	4603      	mov	r3, r0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40022000 	.word	0x40022000
 800544c:	40021000 	.word	0x40021000
 8005450:	04c4b400 	.word	0x04c4b400
 8005454:	20000014 	.word	0x20000014
 8005458:	20000018 	.word	0x20000018

0800545c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800545c:	b480      	push	{r7}
 800545e:	b089      	sub	sp, #36	; 0x24
 8005460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	61fb      	str	r3, [r7, #28]
 8005466:	2300      	movs	r3, #0
 8005468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800546a:	4b47      	ldr	r3, [pc, #284]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 030c 	and.w	r3, r3, #12
 8005472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005474:	4b44      	ldr	r3, [pc, #272]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d005      	beq.n	8005490 <HAL_RCC_GetSysClockFreq+0x34>
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	2b0c      	cmp	r3, #12
 8005488:	d121      	bne.n	80054ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d11e      	bne.n	80054ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005490:	4b3d      	ldr	r3, [pc, #244]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0308 	and.w	r3, r3, #8
 8005498:	2b00      	cmp	r3, #0
 800549a:	d107      	bne.n	80054ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800549c:	4b3a      	ldr	r3, [pc, #232]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 800549e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	e005      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054ac:	4b36      	ldr	r3, [pc, #216]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	091b      	lsrs	r3, r3, #4
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80054b8:	4a34      	ldr	r2, [pc, #208]	; (800558c <HAL_RCC_GetSysClockFreq+0x130>)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054c0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10d      	bne.n	80054e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054cc:	e00a      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d102      	bne.n	80054da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054d4:	4b2e      	ldr	r3, [pc, #184]	; (8005590 <HAL_RCC_GetSysClockFreq+0x134>)
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	e004      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b08      	cmp	r3, #8
 80054de:	d101      	bne.n	80054e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80054e0:	4b2c      	ldr	r3, [pc, #176]	; (8005594 <HAL_RCC_GetSysClockFreq+0x138>)
 80054e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	2b0c      	cmp	r3, #12
 80054e8:	d146      	bne.n	8005578 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80054ea:	4b27      	ldr	r3, [pc, #156]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054f4:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	091b      	lsrs	r3, r3, #4
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	3301      	adds	r3, #1
 8005500:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d003      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0xb4>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d00d      	beq.n	800552a <HAL_RCC_GetSysClockFreq+0xce>
 800550e:	e019      	b.n	8005544 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005510:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <HAL_RCC_GetSysClockFreq+0x134>)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	fbb2 f3f3 	udiv	r3, r2, r3
 8005518:	4a1b      	ldr	r2, [pc, #108]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 800551a:	68d2      	ldr	r2, [r2, #12]
 800551c:	0a12      	lsrs	r2, r2, #8
 800551e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005522:	fb02 f303 	mul.w	r3, r2, r3
 8005526:	617b      	str	r3, [r7, #20]
        break;
 8005528:	e019      	b.n	800555e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800552a:	4a1a      	ldr	r2, [pc, #104]	; (8005594 <HAL_RCC_GetSysClockFreq+0x138>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005534:	68d2      	ldr	r2, [r2, #12]
 8005536:	0a12      	lsrs	r2, r2, #8
 8005538:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800553c:	fb02 f303 	mul.w	r3, r2, r3
 8005540:	617b      	str	r3, [r7, #20]
        break;
 8005542:	e00c      	b.n	800555e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	fbb2 f3f3 	udiv	r3, r2, r3
 800554c:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 800554e:	68d2      	ldr	r2, [r2, #12]
 8005550:	0a12      	lsrs	r2, r2, #8
 8005552:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	617b      	str	r3, [r7, #20]
        break;
 800555c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800555e:	4b0a      	ldr	r3, [pc, #40]	; (8005588 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	0e5b      	lsrs	r3, r3, #25
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	3301      	adds	r3, #1
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005578:	69bb      	ldr	r3, [r7, #24]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40021000 	.word	0x40021000
 800558c:	08007698 	.word	0x08007698
 8005590:	00f42400 	.word	0x00f42400
 8005594:	007a1200 	.word	0x007a1200

08005598 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 800559c:	f7ff ff5e 	bl	800545c <HAL_RCC_GetSysClockFreq>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetHCLKFreq+0x20>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	091b      	lsrs	r3, r3, #4
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	4903      	ldr	r1, [pc, #12]	; (80055bc <HAL_RCC_GetHCLKFreq+0x24>)
 80055ae:	5ccb      	ldrb	r3, [r1, r3]
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	08007680 	.word	0x08007680

080055c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055c4:	f7ff ffe8 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	0a1b      	lsrs	r3, r3, #8
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	4903      	ldr	r1, [pc, #12]	; (80055e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d6:	5ccb      	ldrb	r3, [r1, r3]
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000
 80055e4:	08007690 	.word	0x08007690

080055e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055ec:	f7ff ffd4 	bl	8005598 <HAL_RCC_GetHCLKFreq>
 80055f0:	4602      	mov	r2, r0
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	0adb      	lsrs	r3, r3, #11
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	4903      	ldr	r1, [pc, #12]	; (800560c <HAL_RCC_GetPCLK2Freq+0x24>)
 80055fe:	5ccb      	ldrb	r3, [r1, r3]
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	40021000 	.word	0x40021000
 800560c:	08007690 	.word	0x08007690

08005610 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800561c:	4b2c      	ldr	r3, [pc, #176]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005628:	f7ff f86c 	bl	8004704 <HAL_PWREx_GetVoltageRange>
 800562c:	6138      	str	r0, [r7, #16]
 800562e:	e014      	b.n	800565a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005630:	4b27      	ldr	r3, [pc, #156]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005634:	4a26      	ldr	r2, [pc, #152]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800563a:	6593      	str	r3, [r2, #88]	; 0x58
 800563c:	4b24      	ldr	r3, [pc, #144]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005648:	f7ff f85c 	bl	8004704 <HAL_PWREx_GetVoltageRange>
 800564c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 800564e:	4b20      	ldr	r3, [pc, #128]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005652:	4a1f      	ldr	r2, [pc, #124]	; (80056d0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005658:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005666:	d10b      	bne.n	8005680 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2b80      	cmp	r3, #128	; 0x80
 800566c:	d919      	bls.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2ba0      	cmp	r3, #160	; 0xa0
 8005672:	d902      	bls.n	800567a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005674:	2302      	movs	r3, #2
 8005676:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005678:	e013      	b.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800567a:	2301      	movs	r3, #1
 800567c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800567e:	e010      	b.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	d902      	bls.n	800568c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005686:	2303      	movs	r3, #3
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e00a      	b.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b80      	cmp	r3, #128	; 0x80
 8005690:	d102      	bne.n	8005698 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005692:	2302      	movs	r3, #2
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	e004      	b.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b70      	cmp	r3, #112	; 0x70
 800569c:	d101      	bne.n	80056a2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800569e:	2301      	movs	r3, #1
 80056a0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056a2:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f023 020f 	bic.w	r2, r3, #15
 80056aa:	490a      	ldr	r1, [pc, #40]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d001      	beq.n	80056c4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e000      	b.n	80056c6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80056c4:	2300      	movs	r3, #0
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40022000 	.word	0x40022000

080056d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80056de:	4b31      	ldr	r3, [pc, #196]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056e8:	4b2e      	ldr	r3, [pc, #184]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	091b      	lsrs	r3, r3, #4
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	3301      	adds	r3, #1
 80056f4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d015      	beq.n	8005728 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d839      	bhi.n	8005776 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d01c      	beq.n	8005742 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d133      	bne.n	8005776 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800570e:	4a26      	ldr	r2, [pc, #152]	; (80057a8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	fbb2 f3f3 	udiv	r3, r2, r3
 8005716:	4a23      	ldr	r2, [pc, #140]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005718:	68d2      	ldr	r2, [r2, #12]
 800571a:	0a12      	lsrs	r2, r2, #8
 800571c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005720:	fb02 f303 	mul.w	r3, r2, r3
 8005724:	613b      	str	r3, [r7, #16]
      break;
 8005726:	e029      	b.n	800577c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005728:	4a20      	ldr	r2, [pc, #128]	; (80057ac <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005732:	68d2      	ldr	r2, [r2, #12]
 8005734:	0a12      	lsrs	r2, r2, #8
 8005736:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800573a:	fb02 f303 	mul.w	r3, r2, r3
 800573e:	613b      	str	r3, [r7, #16]
      break;
 8005740:	e01c      	b.n	800577c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005742:	4b18      	ldr	r3, [pc, #96]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d107      	bne.n	800575e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800574e:	4b15      	ldr	r3, [pc, #84]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005754:	0a1b      	lsrs	r3, r3, #8
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e005      	b.n	800576a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800575e:	4b11      	ldr	r3, [pc, #68]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	091b      	lsrs	r3, r3, #4
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800576a:	4a11      	ldr	r2, [pc, #68]	; (80057b0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005772:	613b      	str	r3, [r7, #16]
        break;
 8005774:	e002      	b.n	800577c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	613b      	str	r3, [r7, #16]
      break;
 800577a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 800577c:	4b09      	ldr	r3, [pc, #36]	; (80057a4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	0e5b      	lsrs	r3, r3, #25
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	3301      	adds	r3, #1
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	fbb2 f3f3 	udiv	r3, r2, r3
 8005794:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005796:	683b      	ldr	r3, [r7, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	371c      	adds	r7, #28
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	40021000 	.word	0x40021000
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	007a1200 	.word	0x007a1200
 80057b0:	08007698 	.word	0x08007698

080057b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b088      	sub	sp, #32
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057bc:	2300      	movs	r3, #0
 80057be:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057c0:	2300      	movs	r3, #0
 80057c2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d040      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057d4:	2b80      	cmp	r3, #128	; 0x80
 80057d6:	d02a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057d8:	2b80      	cmp	r3, #128	; 0x80
 80057da:	d825      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057dc:	2b60      	cmp	r3, #96	; 0x60
 80057de:	d026      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80057e0:	2b60      	cmp	r3, #96	; 0x60
 80057e2:	d821      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057e4:	2b40      	cmp	r3, #64	; 0x40
 80057e6:	d006      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d81d      	bhi.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d010      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80057f4:	e018      	b.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80057f6:	4b8f      	ldr	r3, [pc, #572]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	4a8e      	ldr	r2, [pc, #568]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005800:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005802:	e015      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fb56 	bl	8005ebc <RCCEx_PLLSAI1_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005814:	e00c      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3320      	adds	r3, #32
 800581a:	2100      	movs	r1, #0
 800581c:	4618      	mov	r0, r3
 800581e:	f000 fc33 	bl	8006088 <RCCEx_PLLSAI2_Config>
 8005822:	4603      	mov	r3, r0
 8005824:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005826:	e003      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	77fb      	strb	r3, [r7, #31]
        break;
 800582c:	e000      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800582e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005830:	7ffb      	ldrb	r3, [r7, #31]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10b      	bne.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005836:	4b7f      	ldr	r3, [pc, #508]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800583c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005844:	497b      	ldr	r1, [pc, #492]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800584c:	e001      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584e:	7ffb      	ldrb	r3, [r7, #31]
 8005850:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d047      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005866:	d030      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800586c:	d82a      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800586e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005872:	d02a      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005878:	d824      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800587a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800587e:	d008      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005884:	d81e      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800588a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800588e:	d010      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005890:	e018      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005892:	4b68      	ldr	r3, [pc, #416]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	4a67      	ldr	r2, [pc, #412]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800589c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800589e:	e015      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3304      	adds	r3, #4
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fb08 	bl	8005ebc <RCCEx_PLLSAI1_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058b0:	e00c      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	3320      	adds	r3, #32
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fbe5 	bl	8006088 <RCCEx_PLLSAI2_Config>
 80058be:	4603      	mov	r3, r0
 80058c0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058c2:	e003      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	77fb      	strb	r3, [r7, #31]
        break;
 80058c8:	e000      	b.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80058ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058cc:	7ffb      	ldrb	r3, [r7, #31]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10b      	bne.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058d2:	4b58      	ldr	r3, [pc, #352]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80058d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4954      	ldr	r1, [pc, #336]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80058e8:	e001      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ea:	7ffb      	ldrb	r3, [r7, #31]
 80058ec:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f000 80ab 	beq.w	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058fc:	2300      	movs	r3, #0
 80058fe:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005900:	4b4c      	ldr	r3, [pc, #304]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10d      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800590c:	4b49      	ldr	r3, [pc, #292]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005910:	4a48      	ldr	r2, [pc, #288]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	6593      	str	r3, [r2, #88]	; 0x58
 8005918:	4b46      	ldr	r3, [pc, #280]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800591a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005924:	2301      	movs	r3, #1
 8005926:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005928:	4b43      	ldr	r3, [pc, #268]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a42      	ldr	r2, [pc, #264]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800592e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005932:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005934:	f7fc fc72 	bl	800221c <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800593a:	e00f      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800593c:	f7fc fc6e 	bl	800221c <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d908      	bls.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800594a:	4b3b      	ldr	r3, [pc, #236]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800595a:	e006      	b.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800595c:	4b36      	ldr	r3, [pc, #216]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0e9      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005968:	e000      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800596a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800596c:	7ffb      	ldrb	r3, [r7, #31]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d164      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005972:	4b30      	ldr	r3, [pc, #192]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01f      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	429a      	cmp	r2, r3
 800598e:	d019      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005990:	4b28      	ldr	r3, [pc, #160]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800599a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800599c:	4b25      	ldr	r3, [pc, #148]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a2:	4a24      	ldr	r2, [pc, #144]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059ac:	4b21      	ldr	r3, [pc, #132]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b2:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01f      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ce:	f7fc fc25 	bl	800221c <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059d4:	e012      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d6:	f7fc fc21 	bl	800221c <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d909      	bls.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059e8:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10a      	bne.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80059fa:	e007      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059fc:	4b0d      	ldr	r3, [pc, #52]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0e5      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005a0a:	e000      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005a0c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005a0e:	7ffb      	ldrb	r3, [r7, #31]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10c      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a14:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a24:	4903      	ldr	r1, [pc, #12]	; (8005a34 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a2e:	7ffb      	ldrb	r3, [r7, #31]
 8005a30:	77bb      	strb	r3, [r7, #30]
 8005a32:	e005      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005a34:	40021000 	.word	0x40021000
 8005a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3c:	7ffb      	ldrb	r3, [r7, #31]
 8005a3e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a46:	4b9c      	ldr	r3, [pc, #624]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	4a9b      	ldr	r2, [pc, #620]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a5e:	4b96      	ldr	r3, [pc, #600]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f023 0203 	bic.w	r2, r3, #3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	4992      	ldr	r1, [pc, #584]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0302 	and.w	r3, r3, #2
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a80:	4b8d      	ldr	r3, [pc, #564]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	f023 020c 	bic.w	r2, r3, #12
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	498a      	ldr	r1, [pc, #552]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00a      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aa2:	4b85      	ldr	r3, [pc, #532]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab0:	4981      	ldr	r1, [pc, #516]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ac4:	4b7c      	ldr	r3, [pc, #496]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	4979      	ldr	r1, [pc, #484]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0310 	and.w	r3, r3, #16
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00a      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ae6:	4b74      	ldr	r3, [pc, #464]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	4970      	ldr	r1, [pc, #448]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00a      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b08:	4b6b      	ldr	r3, [pc, #428]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b16:	4968      	ldr	r1, [pc, #416]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b2a:	4b63      	ldr	r3, [pc, #396]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b38:	495f      	ldr	r1, [pc, #380]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00a      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b4c:	4b5a      	ldr	r3, [pc, #360]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b5a:	4957      	ldr	r1, [pc, #348]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005b6e:	4b52      	ldr	r3, [pc, #328]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b7c:	494e      	ldr	r1, [pc, #312]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d031      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b98:	d00e      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005b9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b9e:	d814      	bhi.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d015      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ba8:	d10f      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005baa:	4b43      	ldr	r3, [pc, #268]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	4a42      	ldr	r2, [pc, #264]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bb6:	e00c      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f97c 	bl	8005ebc <RCCEx_PLLSAI1_Config>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	77fb      	strb	r3, [r7, #31]
        break;
 8005bce:	e000      	b.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8005bd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bd2:	7ffb      	ldrb	r3, [r7, #31]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bd8:	4b37      	ldr	r3, [pc, #220]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005be6:	4934      	ldr	r1, [pc, #208]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bee:	e001      	b.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf0:	7ffb      	ldrb	r3, [r7, #31]
 8005bf2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	492a      	ldr	r1, [pc, #168]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00a      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c22:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c30:	4921      	ldr	r1, [pc, #132]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c44:	4b1c      	ldr	r3, [pc, #112]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	4919      	ldr	r1, [pc, #100]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00a      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c6c:	f023 0203 	bic.w	r2, r3, #3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c74:	4910      	ldr	r1, [pc, #64]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d02b      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c88:	4b0b      	ldr	r3, [pc, #44]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c96:	4908      	ldr	r1, [pc, #32]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca6:	d109      	bne.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	4a02      	ldr	r2, [pc, #8]	; (8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cb2:	60d3      	str	r3, [r2, #12]
 8005cb4:	e014      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005cb6:	bf00      	nop
 8005cb8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	2101      	movs	r1, #1
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f8f5 	bl	8005ebc <RCCEx_PLLSAI1_Config>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d04a      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf4:	d108      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8005cf6:	4b70      	ldr	r3, [pc, #448]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cfc:	4a6e      	ldr	r2, [pc, #440]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d02:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005d06:	e012      	b.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005d08:	4b6b      	ldr	r3, [pc, #428]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d16:	4968      	ldr	r1, [pc, #416]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d1e:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d24:	4a64      	ldr	r2, [pc, #400]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d36:	d10d      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f8bc 	bl	8005ebc <RCCEx_PLLSAI1_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d48:	7ffb      	ldrb	r3, [r7, #31]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d019      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
 8005d50:	77bb      	strb	r3, [r7, #30]
 8005d52:	e016      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d5c:	d106      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d5e:	4b56      	ldr	r3, [pc, #344]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4a55      	ldr	r2, [pc, #340]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d68:	60d3      	str	r3, [r2, #12]
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d74:	d105      	bne.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d76:	4b50      	ldr	r3, [pc, #320]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	4a4f      	ldr	r2, [pc, #316]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d80:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d028      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d9c:	4946      	ldr	r1, [pc, #280]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dac:	d106      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dae:	4b42      	ldr	r3, [pc, #264]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	4a41      	ldr	r2, [pc, #260]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005db4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005db8:	60d3      	str	r3, [r2, #12]
 8005dba:	e011      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc4:	d10c      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	2101      	movs	r1, #1
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f875 	bl	8005ebc <RCCEx_PLLSAI1_Config>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005dd6:	7ffb      	ldrb	r3, [r7, #31]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8005ddc:	7ffb      	ldrb	r3, [r7, #31]
 8005dde:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d01e      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005dec:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfc:	492e      	ldr	r1, [pc, #184]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e0e:	d10c      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	3304      	adds	r3, #4
 8005e14:	2102      	movs	r1, #2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 f850 	bl	8005ebc <RCCEx_PLLSAI1_Config>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005e20:	7ffb      	ldrb	r3, [r7, #31]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8005e26:	7ffb      	ldrb	r3, [r7, #31]
 8005e28:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e3c:	f023 0204 	bic.w	r2, r3, #4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e46:	491c      	ldr	r1, [pc, #112]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e5a:	4b17      	ldr	r3, [pc, #92]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e60:	f023 0218 	bic.w	r2, r3, #24
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6a:	4913      	ldr	r1, [pc, #76]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d017      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e8e:	490a      	ldr	r1, [pc, #40]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea0:	d105      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ea2:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eac:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005eae:	7fbb      	ldrb	r3, [r7, #30]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	40021000 	.word	0x40021000

08005ebc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d018      	beq.n	8005f04 <RCCEx_PLLSAI1_Config+0x48>
 8005ed2:	2b03      	cmp	r3, #3
 8005ed4:	d81f      	bhi.n	8005f16 <RCCEx_PLLSAI1_Config+0x5a>
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d002      	beq.n	8005ee0 <RCCEx_PLLSAI1_Config+0x24>
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d009      	beq.n	8005ef2 <RCCEx_PLLSAI1_Config+0x36>
 8005ede:	e01a      	b.n	8005f16 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ee0:	4b65      	ldr	r3, [pc, #404]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d117      	bne.n	8005f1c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef0:	e014      	b.n	8005f1c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ef2:	4b61      	ldr	r3, [pc, #388]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d110      	bne.n	8005f20 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f02:	e00d      	b.n	8005f20 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8005f04:	4b5c      	ldr	r3, [pc, #368]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f14:	e006      	b.n	8005f24 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1a:	e004      	b.n	8005f26 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005f1c:	bf00      	nop
 8005f1e:	e002      	b.n	8005f26 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005f20:	bf00      	nop
 8005f22:	e000      	b.n	8005f26 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8005f24:	bf00      	nop
  }

  if (status == HAL_OK)
 8005f26:	7bfb      	ldrb	r3, [r7, #15]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f040 809f 	bne.w	800606c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005f2e:	4b52      	ldr	r3, [pc, #328]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a51      	ldr	r2, [pc, #324]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f3a:	f7fc f96f 	bl	800221c <HAL_GetTick>
 8005f3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f40:	e00f      	b.n	8005f62 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f42:	f7fc f96b 	bl	800221c <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d908      	bls.n	8005f62 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f50:	4b49      	ldr	r3, [pc, #292]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d009      	beq.n	8005f70 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005f60:	e006      	b.n	8005f70 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f62:	4b45      	ldr	r3, [pc, #276]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1e9      	bne.n	8005f42 <RCCEx_PLLSAI1_Config+0x86>
 8005f6e:	e000      	b.n	8005f72 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8005f70:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d179      	bne.n	800606c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d116      	bne.n	8005fac <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f7e:	4b3e      	ldr	r3, [pc, #248]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005f80:	691a      	ldr	r2, [r3, #16]
 8005f82:	4b3e      	ldr	r3, [pc, #248]	; (800607c <RCCEx_PLLSAI1_Config+0x1c0>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	6892      	ldr	r2, [r2, #8]
 8005f8a:	0211      	lsls	r1, r2, #8
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	68d2      	ldr	r2, [r2, #12]
 8005f90:	06d2      	lsls	r2, r2, #27
 8005f92:	4311      	orrs	r1, r2
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6852      	ldr	r2, [r2, #4]
 8005f98:	3a01      	subs	r2, #1
 8005f9a:	0112      	lsls	r2, r2, #4
 8005f9c:	4311      	orrs	r1, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	4934      	ldr	r1, [pc, #208]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	610b      	str	r3, [r1, #16]
 8005faa:	e033      	b.n	8006014 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d118      	bne.n	8005fe4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fb2:	4b31      	ldr	r3, [pc, #196]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	4b32      	ldr	r3, [pc, #200]	; (8006080 <RCCEx_PLLSAI1_Config+0x1c4>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	6892      	ldr	r2, [r2, #8]
 8005fbe:	0211      	lsls	r1, r2, #8
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6912      	ldr	r2, [r2, #16]
 8005fc4:	0852      	lsrs	r2, r2, #1
 8005fc6:	3a01      	subs	r2, #1
 8005fc8:	0552      	lsls	r2, r2, #21
 8005fca:	4311      	orrs	r1, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6852      	ldr	r2, [r2, #4]
 8005fd0:	3a01      	subs	r2, #1
 8005fd2:	0112      	lsls	r2, r2, #4
 8005fd4:	4311      	orrs	r1, r2
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	4926      	ldr	r1, [pc, #152]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	610b      	str	r3, [r1, #16]
 8005fe2:	e017      	b.n	8006014 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005fe4:	4b24      	ldr	r3, [pc, #144]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8005fe6:	691a      	ldr	r2, [r3, #16]
 8005fe8:	4b26      	ldr	r3, [pc, #152]	; (8006084 <RCCEx_PLLSAI1_Config+0x1c8>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	6892      	ldr	r2, [r2, #8]
 8005ff0:	0211      	lsls	r1, r2, #8
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6952      	ldr	r2, [r2, #20]
 8005ff6:	0852      	lsrs	r2, r2, #1
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	0652      	lsls	r2, r2, #25
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6852      	ldr	r2, [r2, #4]
 8006002:	3a01      	subs	r2, #1
 8006004:	0112      	lsls	r2, r2, #4
 8006006:	4311      	orrs	r1, r2
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	491a      	ldr	r1, [pc, #104]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006010:	4313      	orrs	r3, r2
 8006012:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006014:	4b18      	ldr	r3, [pc, #96]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 800601a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800601e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006020:	f7fc f8fc 	bl	800221c <HAL_GetTick>
 8006024:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006026:	e00f      	b.n	8006048 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006028:	f7fc f8f8 	bl	800221c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d908      	bls.n	8006048 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006036:	4b10      	ldr	r3, [pc, #64]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006046:	e006      	b.n	8006056 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006048:	4b0b      	ldr	r3, [pc, #44]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0e9      	beq.n	8006028 <RCCEx_PLLSAI1_Config+0x16c>
 8006054:	e000      	b.n	8006058 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006056:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	4904      	ldr	r1, [pc, #16]	; (8006078 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	40021000 	.word	0x40021000
 800607c:	07ff800c 	.word	0x07ff800c
 8006080:	ff9f800c 	.word	0xff9f800c
 8006084:	f9ff800c 	.word	0xf9ff800c

08006088 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d018      	beq.n	80060d0 <RCCEx_PLLSAI2_Config+0x48>
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d81f      	bhi.n	80060e2 <RCCEx_PLLSAI2_Config+0x5a>
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d002      	beq.n	80060ac <RCCEx_PLLSAI2_Config+0x24>
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d009      	beq.n	80060be <RCCEx_PLLSAI2_Config+0x36>
 80060aa:	e01a      	b.n	80060e2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060ac:	4b4a      	ldr	r3, [pc, #296]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0302 	and.w	r3, r3, #2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d117      	bne.n	80060e8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060bc:	e014      	b.n	80060e8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060be:	4b46      	ldr	r3, [pc, #280]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d110      	bne.n	80060ec <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060ce:	e00d      	b.n	80060ec <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80060d0:	4b41      	ldr	r3, [pc, #260]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e0:	e006      	b.n	80060f0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
      break;
 80060e6:	e004      	b.n	80060f2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80060e8:	bf00      	nop
 80060ea:	e002      	b.n	80060f2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80060ec:	bf00      	nop
 80060ee:	e000      	b.n	80060f2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80060f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80060f2:	7bfb      	ldrb	r3, [r7, #15]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d169      	bne.n	80061cc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060f8:	4b37      	ldr	r3, [pc, #220]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a36      	ldr	r2, [pc, #216]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80060fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006104:	f7fc f88a 	bl	800221c <HAL_GetTick>
 8006108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800610a:	e00f      	b.n	800612c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800610c:	f7fc f886 	bl	800221c <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d908      	bls.n	800612c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800611a:	4b2f      	ldr	r3, [pc, #188]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d009      	beq.n	800613a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800612a:	e006      	b.n	800613a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800612c:	4b2a      	ldr	r3, [pc, #168]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e9      	bne.n	800610c <RCCEx_PLLSAI2_Config+0x84>
 8006138:	e000      	b.n	800613c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800613a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d144      	bne.n	80061cc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d115      	bne.n	8006174 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006148:	4b23      	ldr	r3, [pc, #140]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 800614a:	695a      	ldr	r2, [r3, #20]
 800614c:	4b23      	ldr	r3, [pc, #140]	; (80061dc <RCCEx_PLLSAI2_Config+0x154>)
 800614e:	4013      	ands	r3, r2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6892      	ldr	r2, [r2, #8]
 8006154:	0211      	lsls	r1, r2, #8
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	68d2      	ldr	r2, [r2, #12]
 800615a:	06d2      	lsls	r2, r2, #27
 800615c:	4311      	orrs	r1, r2
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	6852      	ldr	r2, [r2, #4]
 8006162:	3a01      	subs	r2, #1
 8006164:	0112      	lsls	r2, r2, #4
 8006166:	4311      	orrs	r1, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	491a      	ldr	r1, [pc, #104]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 8006170:	4313      	orrs	r3, r2
 8006172:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006174:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 800617a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fc f84c 	bl	800221c <HAL_GetTick>
 8006184:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006186:	e00f      	b.n	80061a8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006188:	f7fc f848 	bl	800221c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d908      	bls.n	80061a8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006196:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d109      	bne.n	80061b6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80061a6:	e006      	b.n	80061b6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80061a8:	4b0b      	ldr	r3, [pc, #44]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d0e9      	beq.n	8006188 <RCCEx_PLLSAI2_Config+0x100>
 80061b4:	e000      	b.n	80061b8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80061b6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d106      	bne.n	80061cc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	4904      	ldr	r1, [pc, #16]	; (80061d8 <RCCEx_PLLSAI2_Config+0x150>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40021000 	.word	0x40021000
 80061dc:	07ff800c 	.word	0x07ff800c

080061e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d066      	beq.n	80062c0 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fb fc6a 	bl	8001ae0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b10      	cmp	r3, #16
 8006220:	d045      	beq.n	80062ae <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006222:	4b2a      	ldr	r3, [pc, #168]	; (80062cc <HAL_RTC_Init+0xec>)
 8006224:	22ca      	movs	r2, #202	; 0xca
 8006226:	625a      	str	r2, [r3, #36]	; 0x24
 8006228:	4b28      	ldr	r3, [pc, #160]	; (80062cc <HAL_RTC_Init+0xec>)
 800622a:	2253      	movs	r2, #83	; 0x53
 800622c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f872 	bl	8006318 <RTC_EnterInitMode>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d121      	bne.n	8006282 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800623e:	4b23      	ldr	r3, [pc, #140]	; (80062cc <HAL_RTC_Init+0xec>)
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	4a22      	ldr	r2, [pc, #136]	; (80062cc <HAL_RTC_Init+0xec>)
 8006244:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800624c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800624e:	4b1f      	ldr	r3, [pc, #124]	; (80062cc <HAL_RTC_Init+0xec>)
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6859      	ldr	r1, [r3, #4]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	4319      	orrs	r1, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	430b      	orrs	r3, r1
 8006262:	491a      	ldr	r1, [pc, #104]	; (80062cc <HAL_RTC_Init+0xec>)
 8006264:	4313      	orrs	r3, r2
 8006266:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68da      	ldr	r2, [r3, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	4916      	ldr	r1, [pc, #88]	; (80062cc <HAL_RTC_Init+0xec>)
 8006274:	4313      	orrs	r3, r2
 8006276:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f881 	bl	8006380 <RTC_ExitInitMode>
 800627e:	4603      	mov	r3, r0
 8006280:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006282:	7bfb      	ldrb	r3, [r7, #15]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10e      	bne.n	80062a6 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8006288:	4b10      	ldr	r3, [pc, #64]	; (80062cc <HAL_RTC_Init+0xec>)
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a19      	ldr	r1, [r3, #32]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	4319      	orrs	r1, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	430b      	orrs	r3, r1
 80062a0:	490a      	ldr	r1, [pc, #40]	; (80062cc <HAL_RTC_Init+0xec>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <HAL_RTC_Init+0xec>)
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24
 80062ac:	e001      	b.n	80062b2 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d103      	bne.n	80062c0 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40002800 	.word	0x40002800

080062d0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <HAL_RTC_WaitForSynchro+0x40>)
 80062da:	4a0e      	ldr	r2, [pc, #56]	; (8006314 <HAL_RTC_WaitForSynchro+0x44>)
 80062dc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80062de:	f7fb ff9d 	bl	800221c <HAL_GetTick>
 80062e2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062e4:	e009      	b.n	80062fa <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80062e6:	f7fb ff99 	bl	800221c <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062f4:	d901      	bls.n	80062fa <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e006      	b.n	8006308 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <HAL_RTC_WaitForSynchro+0x40>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f003 0320 	and.w	r3, r3, #32
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0ef      	beq.n	80062e6 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40002800 	.word	0x40002800
 8006314:	0001005c 	.word	0x0001005c

08006318 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006324:	4b15      	ldr	r3, [pc, #84]	; (800637c <RTC_EnterInitMode+0x64>)
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d120      	bne.n	8006372 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006330:	4b12      	ldr	r3, [pc, #72]	; (800637c <RTC_EnterInitMode+0x64>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <RTC_EnterInitMode+0x64>)
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800633c:	f7fb ff6e 	bl	800221c <HAL_GetTick>
 8006340:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006342:	e00d      	b.n	8006360 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006344:	f7fb ff6a 	bl	800221c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006352:	d905      	bls.n	8006360 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2203      	movs	r2, #3
 800635c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006360:	4b06      	ldr	r3, [pc, #24]	; (800637c <RTC_EnterInitMode+0x64>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <RTC_EnterInitMode+0x5a>
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b03      	cmp	r3, #3
 8006370:	d1e8      	bne.n	8006344 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
}
 8006374:	4618      	mov	r0, r3
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40002800 	.word	0x40002800

08006380 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800638c:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <RTC_ExitInitMode+0x78>)
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	4a19      	ldr	r2, [pc, #100]	; (80063f8 <RTC_ExitInitMode+0x78>)
 8006392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006396:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006398:	4b17      	ldr	r3, [pc, #92]	; (80063f8 <RTC_ExitInitMode+0x78>)
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10c      	bne.n	80063be <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7ff ff93 	bl	80062d0 <HAL_RTC_WaitForSynchro>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01e      	beq.n	80063ee <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2203      	movs	r2, #3
 80063b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	e017      	b.n	80063ee <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063be:	4b0e      	ldr	r3, [pc, #56]	; (80063f8 <RTC_ExitInitMode+0x78>)
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	4a0d      	ldr	r2, [pc, #52]	; (80063f8 <RTC_ExitInitMode+0x78>)
 80063c4:	f023 0320 	bic.w	r3, r3, #32
 80063c8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7ff ff80 	bl	80062d0 <HAL_RTC_WaitForSynchro>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d005      	beq.n	80063e2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2203      	movs	r2, #3
 80063da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <RTC_ExitInitMode+0x78>)
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	4a04      	ldr	r2, [pc, #16]	; (80063f8 <RTC_ExitInitMode+0x78>)
 80063e8:	f043 0320 	orr.w	r3, r3, #32
 80063ec:	6193      	str	r3, [r2, #24]
  }

  return status;
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40002800 	.word	0x40002800

080063fc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	490f      	ldr	r1, [pc, #60]	; (800644c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006410:	4313      	orrs	r3, r2
 8006412:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	490c      	ldr	r1, [pc, #48]	; (8006450 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800641e:	4313      	orrs	r3, r2
 8006420:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006424:	6a1b      	ldr	r3, [r3, #32]
 8006426:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	6919      	ldr	r1, [r3, #16]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	695b      	ldr	r3, [r3, #20]
 8006432:	041b      	lsls	r3, r3, #16
 8006434:	430b      	orrs	r3, r1
 8006436:	4906      	ldr	r1, [pc, #24]	; (8006450 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006438:	4313      	orrs	r3, r2
 800643a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40002800 	.word	0x40002800
 8006450:	40003400 	.word	0x40003400

08006454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e042      	b.n	80064ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646c:	2b00      	cmp	r3, #0
 800646e:	d106      	bne.n	800647e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f7fb fd53 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2224      	movs	r2, #36	; 0x24
 8006482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f022 0201 	bic.w	r2, r2, #1
 8006494:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f82c 	bl	80064f4 <UART_SetConfig>
 800649c:	4603      	mov	r3, r0
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	e022      	b.n	80064ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fb20 	bl	8006af4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689a      	ldr	r2, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f042 0201 	orr.w	r2, r2, #1
 80064e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fba7 	bl	8006c38 <UART_CheckIdleState>
 80064ea:	4603      	mov	r3, r0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f8:	b08c      	sub	sp, #48	; 0x30
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	689a      	ldr	r2, [r3, #8]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	431a      	orrs	r2, r3
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	431a      	orrs	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	69db      	ldr	r3, [r3, #28]
 8006518:	4313      	orrs	r3, r2
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	4baa      	ldr	r3, [pc, #680]	; (80067cc <UART_SetConfig+0x2d8>)
 8006524:	4013      	ands	r3, r2
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800652c:	430b      	orrs	r3, r1
 800652e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a9f      	ldr	r2, [pc, #636]	; (80067d0 <UART_SetConfig+0x2dc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d004      	beq.n	8006560 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800655c:	4313      	orrs	r3, r2
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800656a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006574:	430b      	orrs	r3, r1
 8006576:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	f023 010f 	bic.w	r1, r3, #15
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a90      	ldr	r2, [pc, #576]	; (80067d4 <UART_SetConfig+0x2e0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d125      	bne.n	80065e4 <UART_SetConfig+0xf0>
 8006598:	4b8f      	ldr	r3, [pc, #572]	; (80067d8 <UART_SetConfig+0x2e4>)
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d81a      	bhi.n	80065dc <UART_SetConfig+0xe8>
 80065a6:	a201      	add	r2, pc, #4	; (adr r2, 80065ac <UART_SetConfig+0xb8>)
 80065a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ac:	080065bd 	.word	0x080065bd
 80065b0:	080065cd 	.word	0x080065cd
 80065b4:	080065c5 	.word	0x080065c5
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e116      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80065c4:	2302      	movs	r3, #2
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e112      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80065cc:	2304      	movs	r3, #4
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e10e      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80065d4:	2308      	movs	r3, #8
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065da:	e10a      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e2:	e106      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a7c      	ldr	r2, [pc, #496]	; (80067dc <UART_SetConfig+0x2e8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d138      	bne.n	8006660 <UART_SetConfig+0x16c>
 80065ee:	4b7a      	ldr	r3, [pc, #488]	; (80067d8 <UART_SetConfig+0x2e4>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f4:	f003 030c 	and.w	r3, r3, #12
 80065f8:	2b0c      	cmp	r3, #12
 80065fa:	d82d      	bhi.n	8006658 <UART_SetConfig+0x164>
 80065fc:	a201      	add	r2, pc, #4	; (adr r2, 8006604 <UART_SetConfig+0x110>)
 80065fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006602:	bf00      	nop
 8006604:	08006639 	.word	0x08006639
 8006608:	08006659 	.word	0x08006659
 800660c:	08006659 	.word	0x08006659
 8006610:	08006659 	.word	0x08006659
 8006614:	08006649 	.word	0x08006649
 8006618:	08006659 	.word	0x08006659
 800661c:	08006659 	.word	0x08006659
 8006620:	08006659 	.word	0x08006659
 8006624:	08006641 	.word	0x08006641
 8006628:	08006659 	.word	0x08006659
 800662c:	08006659 	.word	0x08006659
 8006630:	08006659 	.word	0x08006659
 8006634:	08006651 	.word	0x08006651
 8006638:	2300      	movs	r3, #0
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663e:	e0d8      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006646:	e0d4      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800664e:	e0d0      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006656:	e0cc      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800665e:	e0c8      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a5e      	ldr	r2, [pc, #376]	; (80067e0 <UART_SetConfig+0x2ec>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d125      	bne.n	80066b6 <UART_SetConfig+0x1c2>
 800666a:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <UART_SetConfig+0x2e4>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d016      	beq.n	80066a6 <UART_SetConfig+0x1b2>
 8006678:	2b30      	cmp	r3, #48	; 0x30
 800667a:	d818      	bhi.n	80066ae <UART_SetConfig+0x1ba>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d00a      	beq.n	8006696 <UART_SetConfig+0x1a2>
 8006680:	2b20      	cmp	r3, #32
 8006682:	d814      	bhi.n	80066ae <UART_SetConfig+0x1ba>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <UART_SetConfig+0x19a>
 8006688:	2b10      	cmp	r3, #16
 800668a:	d008      	beq.n	800669e <UART_SetConfig+0x1aa>
 800668c:	e00f      	b.n	80066ae <UART_SetConfig+0x1ba>
 800668e:	2300      	movs	r3, #0
 8006690:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006694:	e0ad      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006696:	2302      	movs	r3, #2
 8006698:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669c:	e0a9      	b.n	80067f2 <UART_SetConfig+0x2fe>
 800669e:	2304      	movs	r3, #4
 80066a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a4:	e0a5      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80066a6:	2308      	movs	r3, #8
 80066a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ac:	e0a1      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80066ae:	2310      	movs	r3, #16
 80066b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b4:	e09d      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a4a      	ldr	r2, [pc, #296]	; (80067e4 <UART_SetConfig+0x2f0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d125      	bne.n	800670c <UART_SetConfig+0x218>
 80066c0:	4b45      	ldr	r3, [pc, #276]	; (80067d8 <UART_SetConfig+0x2e4>)
 80066c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066ca:	2bc0      	cmp	r3, #192	; 0xc0
 80066cc:	d016      	beq.n	80066fc <UART_SetConfig+0x208>
 80066ce:	2bc0      	cmp	r3, #192	; 0xc0
 80066d0:	d818      	bhi.n	8006704 <UART_SetConfig+0x210>
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d00a      	beq.n	80066ec <UART_SetConfig+0x1f8>
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d814      	bhi.n	8006704 <UART_SetConfig+0x210>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <UART_SetConfig+0x1f0>
 80066de:	2b40      	cmp	r3, #64	; 0x40
 80066e0:	d008      	beq.n	80066f4 <UART_SetConfig+0x200>
 80066e2:	e00f      	b.n	8006704 <UART_SetConfig+0x210>
 80066e4:	2300      	movs	r3, #0
 80066e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ea:	e082      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80066ec:	2302      	movs	r3, #2
 80066ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f2:	e07e      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80066f4:	2304      	movs	r3, #4
 80066f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fa:	e07a      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80066fc:	2308      	movs	r3, #8
 80066fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006702:	e076      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006704:	2310      	movs	r3, #16
 8006706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670a:	e072      	b.n	80067f2 <UART_SetConfig+0x2fe>
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a35      	ldr	r2, [pc, #212]	; (80067e8 <UART_SetConfig+0x2f4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d12a      	bne.n	800676c <UART_SetConfig+0x278>
 8006716:	4b30      	ldr	r3, [pc, #192]	; (80067d8 <UART_SetConfig+0x2e4>)
 8006718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800671c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006720:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006724:	d01a      	beq.n	800675c <UART_SetConfig+0x268>
 8006726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800672a:	d81b      	bhi.n	8006764 <UART_SetConfig+0x270>
 800672c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006730:	d00c      	beq.n	800674c <UART_SetConfig+0x258>
 8006732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006736:	d815      	bhi.n	8006764 <UART_SetConfig+0x270>
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <UART_SetConfig+0x250>
 800673c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006740:	d008      	beq.n	8006754 <UART_SetConfig+0x260>
 8006742:	e00f      	b.n	8006764 <UART_SetConfig+0x270>
 8006744:	2300      	movs	r3, #0
 8006746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674a:	e052      	b.n	80067f2 <UART_SetConfig+0x2fe>
 800674c:	2302      	movs	r3, #2
 800674e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006752:	e04e      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675a:	e04a      	b.n	80067f2 <UART_SetConfig+0x2fe>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006762:	e046      	b.n	80067f2 <UART_SetConfig+0x2fe>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676a:	e042      	b.n	80067f2 <UART_SetConfig+0x2fe>
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <UART_SetConfig+0x2dc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d13a      	bne.n	80067ec <UART_SetConfig+0x2f8>
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <UART_SetConfig+0x2e4>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006780:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006784:	d01a      	beq.n	80067bc <UART_SetConfig+0x2c8>
 8006786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800678a:	d81b      	bhi.n	80067c4 <UART_SetConfig+0x2d0>
 800678c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006790:	d00c      	beq.n	80067ac <UART_SetConfig+0x2b8>
 8006792:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006796:	d815      	bhi.n	80067c4 <UART_SetConfig+0x2d0>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d003      	beq.n	80067a4 <UART_SetConfig+0x2b0>
 800679c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a0:	d008      	beq.n	80067b4 <UART_SetConfig+0x2c0>
 80067a2:	e00f      	b.n	80067c4 <UART_SetConfig+0x2d0>
 80067a4:	2300      	movs	r3, #0
 80067a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067aa:	e022      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80067ac:	2302      	movs	r3, #2
 80067ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b2:	e01e      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80067b4:	2304      	movs	r3, #4
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ba:	e01a      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80067bc:	2308      	movs	r3, #8
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c2:	e016      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80067c4:	2310      	movs	r3, #16
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ca:	e012      	b.n	80067f2 <UART_SetConfig+0x2fe>
 80067cc:	cfff69f3 	.word	0xcfff69f3
 80067d0:	40008000 	.word	0x40008000
 80067d4:	40013800 	.word	0x40013800
 80067d8:	40021000 	.word	0x40021000
 80067dc:	40004400 	.word	0x40004400
 80067e0:	40004800 	.word	0x40004800
 80067e4:	40004c00 	.word	0x40004c00
 80067e8:	40005000 	.word	0x40005000
 80067ec:	2310      	movs	r3, #16
 80067ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4ab0      	ldr	r2, [pc, #704]	; (8006ab8 <UART_SetConfig+0x5c4>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	f040 809b 	bne.w	8006934 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006802:	2b08      	cmp	r3, #8
 8006804:	d827      	bhi.n	8006856 <UART_SetConfig+0x362>
 8006806:	a201      	add	r2, pc, #4	; (adr r2, 800680c <UART_SetConfig+0x318>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006857 	.word	0x08006857
 800681c:	08006847 	.word	0x08006847
 8006820:	08006857 	.word	0x08006857
 8006824:	08006857 	.word	0x08006857
 8006828:	08006857 	.word	0x08006857
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fe fec6 	bl	80055c0 <HAL_RCC_GetPCLK1Freq>
 8006834:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006836:	e014      	b.n	8006862 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fe fed6 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 800683c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800683e:	e010      	b.n	8006862 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b9e      	ldr	r3, [pc, #632]	; (8006abc <UART_SetConfig+0x5c8>)
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006844:	e00d      	b.n	8006862 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fe fe09 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800684a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800684c:	e009      	b.n	8006862 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006854:	e005      	b.n	8006862 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 8130 	beq.w	8006aca <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686e:	4a94      	ldr	r2, [pc, #592]	; (8006ac0 <UART_SetConfig+0x5cc>)
 8006870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006874:	461a      	mov	r2, r3
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	fbb3 f3f2 	udiv	r3, r3, r2
 800687c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	4613      	mov	r3, r2
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	4413      	add	r3, r2
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	429a      	cmp	r2, r3
 800688c:	d305      	bcc.n	800689a <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	429a      	cmp	r2, r3
 8006898:	d903      	bls.n	80068a2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068a0:	e113      	b.n	8006aca <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a4:	2200      	movs	r2, #0
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	60fa      	str	r2, [r7, #12]
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ae:	4a84      	ldr	r2, [pc, #528]	; (8006ac0 <UART_SetConfig+0x5cc>)
 80068b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2200      	movs	r2, #0
 80068b8:	603b      	str	r3, [r7, #0]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068c4:	f7fa f884 	bl	80009d0 <__aeabi_uldivmod>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4610      	mov	r0, r2
 80068ce:	4619      	mov	r1, r3
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	020b      	lsls	r3, r1, #8
 80068da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068de:	0202      	lsls	r2, r0, #8
 80068e0:	6979      	ldr	r1, [r7, #20]
 80068e2:	6849      	ldr	r1, [r1, #4]
 80068e4:	0849      	lsrs	r1, r1, #1
 80068e6:	2000      	movs	r0, #0
 80068e8:	460c      	mov	r4, r1
 80068ea:	4605      	mov	r5, r0
 80068ec:	eb12 0804 	adds.w	r8, r2, r4
 80068f0:	eb43 0905 	adc.w	r9, r3, r5
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	469a      	mov	sl, r3
 80068fc:	4693      	mov	fp, r2
 80068fe:	4652      	mov	r2, sl
 8006900:	465b      	mov	r3, fp
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7fa f863 	bl	80009d0 <__aeabi_uldivmod>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4613      	mov	r3, r2
 8006910:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006918:	d308      	bcc.n	800692c <UART_SetConfig+0x438>
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006920:	d204      	bcs.n	800692c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	60da      	str	r2, [r3, #12]
 800692a:	e0ce      	b.n	8006aca <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006932:	e0ca      	b.n	8006aca <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800693c:	d166      	bne.n	8006a0c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800693e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006942:	2b08      	cmp	r3, #8
 8006944:	d827      	bhi.n	8006996 <UART_SetConfig+0x4a2>
 8006946:	a201      	add	r2, pc, #4	; (adr r2, 800694c <UART_SetConfig+0x458>)
 8006948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694c:	08006971 	.word	0x08006971
 8006950:	08006979 	.word	0x08006979
 8006954:	08006981 	.word	0x08006981
 8006958:	08006997 	.word	0x08006997
 800695c:	08006987 	.word	0x08006987
 8006960:	08006997 	.word	0x08006997
 8006964:	08006997 	.word	0x08006997
 8006968:	08006997 	.word	0x08006997
 800696c:	0800698f 	.word	0x0800698f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006970:	f7fe fe26 	bl	80055c0 <HAL_RCC_GetPCLK1Freq>
 8006974:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006976:	e014      	b.n	80069a2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006978:	f7fe fe36 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 800697c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800697e:	e010      	b.n	80069a2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006980:	4b4e      	ldr	r3, [pc, #312]	; (8006abc <UART_SetConfig+0x5c8>)
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006984:	e00d      	b.n	80069a2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006986:	f7fe fd69 	bl	800545c <HAL_RCC_GetSysClockFreq>
 800698a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800698c:	e009      	b.n	80069a2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800698e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006994:	e005      	b.n	80069a2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80069a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8090 	beq.w	8006aca <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	4a44      	ldr	r2, [pc, #272]	; (8006ac0 <UART_SetConfig+0x5cc>)
 80069b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b4:	461a      	mov	r2, r3
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80069bc:	005a      	lsls	r2, r3, #1
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	441a      	add	r2, r3
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	2b0f      	cmp	r3, #15
 80069d4:	d916      	bls.n	8006a04 <UART_SetConfig+0x510>
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069dc:	d212      	bcs.n	8006a04 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f023 030f 	bic.w	r3, r3, #15
 80069e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	8bfb      	ldrh	r3, [r7, #30]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	8bfa      	ldrh	r2, [r7, #30]
 8006a00:	60da      	str	r2, [r3, #12]
 8006a02:	e062      	b.n	8006aca <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a0a:	e05e      	b.n	8006aca <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d828      	bhi.n	8006a66 <UART_SetConfig+0x572>
 8006a14:	a201      	add	r2, pc, #4	; (adr r2, 8006a1c <UART_SetConfig+0x528>)
 8006a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a1a:	bf00      	nop
 8006a1c:	08006a41 	.word	0x08006a41
 8006a20:	08006a49 	.word	0x08006a49
 8006a24:	08006a51 	.word	0x08006a51
 8006a28:	08006a67 	.word	0x08006a67
 8006a2c:	08006a57 	.word	0x08006a57
 8006a30:	08006a67 	.word	0x08006a67
 8006a34:	08006a67 	.word	0x08006a67
 8006a38:	08006a67 	.word	0x08006a67
 8006a3c:	08006a5f 	.word	0x08006a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a40:	f7fe fdbe 	bl	80055c0 <HAL_RCC_GetPCLK1Freq>
 8006a44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a46:	e014      	b.n	8006a72 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a48:	f7fe fdce 	bl	80055e8 <HAL_RCC_GetPCLK2Freq>
 8006a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a4e:	e010      	b.n	8006a72 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a50:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <UART_SetConfig+0x5c8>)
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a54:	e00d      	b.n	8006a72 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fe fd01 	bl	800545c <HAL_RCC_GetSysClockFreq>
 8006a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a5c:	e009      	b.n	8006a72 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a64:	e005      	b.n	8006a72 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a70:	bf00      	nop
    }

    if (pclk != 0U)
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d028      	beq.n	8006aca <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	4a10      	ldr	r2, [pc, #64]	; (8006ac0 <UART_SetConfig+0x5cc>)
 8006a7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a82:	461a      	mov	r2, r3
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	085b      	lsrs	r3, r3, #1
 8006a90:	441a      	add	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	2b0f      	cmp	r3, #15
 8006aa0:	d910      	bls.n	8006ac4 <UART_SetConfig+0x5d0>
 8006aa2:	6a3b      	ldr	r3, [r7, #32]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa8:	d20c      	bcs.n	8006ac4 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60da      	str	r2, [r3, #12]
 8006ab4:	e009      	b.n	8006aca <UART_SetConfig+0x5d6>
 8006ab6:	bf00      	nop
 8006ab8:	40008000 	.word	0x40008000
 8006abc:	00f42400 	.word	0x00f42400
 8006ac0:	080076d8 	.word	0x080076d8
      }
      else
      {
        ret = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2200      	movs	r2, #0
 8006ade:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006ae6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3730      	adds	r7, #48	; 0x30
 8006aee:	46bd      	mov	sp, r7
 8006af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	f003 0320 	and.w	r3, r3, #32
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d01a      	beq.n	8006c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bf2:	d10a      	bne.n	8006c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	605a      	str	r2, [r3, #4]
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b098      	sub	sp, #96	; 0x60
 8006c3c:	af02      	add	r7, sp, #8
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c48:	f7fb fae8 	bl	800221c <HAL_GetTick>
 8006c4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0308 	and.w	r3, r3, #8
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d12f      	bne.n	8006cbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c64:	2200      	movs	r2, #0
 8006c66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f88e 	bl	8006d8c <UART_WaitOnFlagUntilTimeout>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d022      	beq.n	8006cbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c94:	647b      	str	r3, [r7, #68]	; 0x44
 8006c96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e6      	bne.n	8006c76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e063      	b.n	8006d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d149      	bne.n	8006d5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f857 	bl	8006d8c <UART_WaitOnFlagUntilTimeout>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d03c      	beq.n	8006d5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
 8006d04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e6      	bne.n	8006ce4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3308      	adds	r3, #8
 8006d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3308      	adds	r3, #8
 8006d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d36:	61fa      	str	r2, [r7, #28]
 8006d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3a:	69b9      	ldr	r1, [r7, #24]
 8006d3c:	69fa      	ldr	r2, [r7, #28]
 8006d3e:	e841 2300 	strex	r3, r2, [r1]
 8006d42:	617b      	str	r3, [r7, #20]
   return(result);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1e5      	bne.n	8006d16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e012      	b.n	8006d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3758      	adds	r7, #88	; 0x58
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d9c:	e049      	b.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da4:	d045      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da6:	f7fb fa39 	bl	800221c <HAL_GetTick>
 8006daa:	4602      	mov	r2, r0
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	69ba      	ldr	r2, [r7, #24]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d302      	bcc.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d101      	bne.n	8006dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e048      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0304 	and.w	r3, r3, #4
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d031      	beq.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	f003 0308 	and.w	r3, r3, #8
 8006dd8:	2b08      	cmp	r3, #8
 8006dda:	d110      	bne.n	8006dfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2208      	movs	r2, #8
 8006de2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f838 	bl	8006e5a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2208      	movs	r2, #8
 8006dee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e029      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0c:	d111      	bne.n	8006e32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 f81e 	bl	8006e5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2220      	movs	r2, #32
 8006e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e00f      	b.n	8006e52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69da      	ldr	r2, [r3, #28]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	bf0c      	ite	eq
 8006e42:	2301      	moveq	r3, #1
 8006e44:	2300      	movne	r3, #0
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d0a6      	beq.n	8006d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b095      	sub	sp, #84	; 0x54
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e80:	643b      	str	r3, [r7, #64]	; 0x40
 8006e82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3308      	adds	r3, #8
 8006e9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec0:	e841 2300 	strex	r3, r2, [r1]
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e3      	bne.n	8006e94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d118      	bne.n	8006f06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f023 0310 	bic.w	r3, r3, #16
 8006ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6979      	ldr	r1, [r7, #20]
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	613b      	str	r3, [r7, #16]
   return(result);
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2220      	movs	r2, #32
 8006f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006f1a:	bf00      	nop
 8006f1c:	3754      	adds	r7, #84	; 0x54
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b085      	sub	sp, #20
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_UARTEx_DisableFifoMode+0x16>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e027      	b.n	8006f8c <HAL_UARTEx_DisableFifoMode+0x66>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2224      	movs	r2, #36	; 0x24
 8006f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0201 	bic.w	r2, r2, #1
 8006f62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d101      	bne.n	8006fb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fac:	2302      	movs	r3, #2
 8006fae:	e02d      	b.n	800700c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2224      	movs	r2, #36	; 0x24
 8006fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0201 	bic.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	430a      	orrs	r2, r1
 8006fea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f84f 	bl	8007090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e02d      	b.n	8007088 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2224      	movs	r2, #36	; 0x24
 8007038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0201 	bic.w	r2, r2, #1
 8007052:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	430a      	orrs	r2, r1
 8007066:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f811 	bl	8007090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800709c:	2b00      	cmp	r3, #0
 800709e:	d108      	bne.n	80070b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070b0:	e031      	b.n	8007116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070b2:	2308      	movs	r3, #8
 80070b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070b6:	2308      	movs	r3, #8
 80070b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	0e5b      	lsrs	r3, r3, #25
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	f003 0307 	and.w	r3, r3, #7
 80070c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	0f5b      	lsrs	r3, r3, #29
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	7b3a      	ldrb	r2, [r7, #12]
 80070de:	4911      	ldr	r1, [pc, #68]	; (8007124 <UARTEx_SetNbDataToProcess+0x94>)
 80070e0:	5c8a      	ldrb	r2, [r1, r2]
 80070e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80070e6:	7b3a      	ldrb	r2, [r7, #12]
 80070e8:	490f      	ldr	r1, [pc, #60]	; (8007128 <UARTEx_SetNbDataToProcess+0x98>)
 80070ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80070ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	7b7a      	ldrb	r2, [r7, #13]
 80070fc:	4909      	ldr	r1, [pc, #36]	; (8007124 <UARTEx_SetNbDataToProcess+0x94>)
 80070fe:	5c8a      	ldrb	r2, [r1, r2]
 8007100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007104:	7b7a      	ldrb	r2, [r7, #13]
 8007106:	4908      	ldr	r1, [pc, #32]	; (8007128 <UARTEx_SetNbDataToProcess+0x98>)
 8007108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800710a:	fb93 f3f2 	sdiv	r3, r3, r2
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	080076f0 	.word	0x080076f0
 8007128:	080076f8 	.word	0x080076f8

0800712c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800712c:	b480      	push	{r7}
 800712e:	b08b      	sub	sp, #44	; 0x2c
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	fa93 f3a3 	rbit	r3, r3
 8007146:	613b      	str	r3, [r7, #16]
  return result;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007152:	2320      	movs	r3, #32
 8007154:	e003      	b.n	800715e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	fab3 f383 	clz	r3, r3
 800715c:	b2db      	uxtb	r3, r3
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	2103      	movs	r1, #3
 8007162:	fa01 f303 	lsl.w	r3, r1, r3
 8007166:	43db      	mvns	r3, r3
 8007168:	401a      	ands	r2, r3
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	fa93 f3a3 	rbit	r3, r3
 8007174:	61fb      	str	r3, [r7, #28]
  return result;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	d101      	bne.n	8007184 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007180:	2320      	movs	r3, #32
 8007182:	e003      	b.n	800718c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007186:	fab3 f383 	clz	r3, r3
 800718a:	b2db      	uxtb	r3, r3
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	fa01 f303 	lsl.w	r3, r1, r3
 8007194:	431a      	orrs	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	601a      	str	r2, [r3, #0]
}
 800719a:	bf00      	nop
 800719c:	372c      	adds	r7, #44	; 0x2c
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80071a6:	b480      	push	{r7}
 80071a8:	b085      	sub	sp, #20
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	43db      	mvns	r3, r3
 80071ba:	401a      	ands	r2, r3
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6879      	ldr	r1, [r7, #4]
 80071c0:	fb01 f303 	mul.w	r3, r1, r3
 80071c4:	431a      	orrs	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	605a      	str	r2, [r3, #4]
}
 80071ca:	bf00      	nop
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b08b      	sub	sp, #44	; 0x2c
 80071da:	af00      	add	r7, sp, #0
 80071dc:	60f8      	str	r0, [r7, #12]
 80071de:	60b9      	str	r1, [r7, #8]
 80071e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	fa93 f3a3 	rbit	r3, r3
 80071f0:	613b      	str	r3, [r7, #16]
  return result;
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80071fc:	2320      	movs	r3, #32
 80071fe:	e003      	b.n	8007208 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	fab3 f383 	clz	r3, r3
 8007206:	b2db      	uxtb	r3, r3
 8007208:	005b      	lsls	r3, r3, #1
 800720a:	2103      	movs	r1, #3
 800720c:	fa01 f303 	lsl.w	r3, r1, r3
 8007210:	43db      	mvns	r3, r3
 8007212:	401a      	ands	r2, r3
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007218:	6a3b      	ldr	r3, [r7, #32]
 800721a:	fa93 f3a3 	rbit	r3, r3
 800721e:	61fb      	str	r3, [r7, #28]
  return result;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800722a:	2320      	movs	r3, #32
 800722c:	e003      	b.n	8007236 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	fab3 f383 	clz	r3, r3
 8007234:	b2db      	uxtb	r3, r3
 8007236:	005b      	lsls	r3, r3, #1
 8007238:	6879      	ldr	r1, [r7, #4]
 800723a:	fa01 f303 	lsl.w	r3, r1, r3
 800723e:	431a      	orrs	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8007244:	bf00      	nop
 8007246:	372c      	adds	r7, #44	; 0x2c
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007250:	b480      	push	{r7}
 8007252:	b08b      	sub	sp, #44	; 0x2c
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	fa93 f3a3 	rbit	r3, r3
 800726a:	613b      	str	r3, [r7, #16]
  return result;
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007276:	2320      	movs	r3, #32
 8007278:	e003      	b.n	8007282 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	fab3 f383 	clz	r3, r3
 8007280:	b2db      	uxtb	r3, r3
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	2103      	movs	r1, #3
 8007286:	fa01 f303 	lsl.w	r3, r1, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	401a      	ands	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	fa93 f3a3 	rbit	r3, r3
 8007298:	61fb      	str	r3, [r7, #28]
  return result;
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80072a4:	2320      	movs	r3, #32
 80072a6:	e003      	b.n	80072b0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	fab3 f383 	clz	r3, r3
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	005b      	lsls	r3, r3, #1
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	fa01 f303 	lsl.w	r3, r1, r3
 80072b8:	431a      	orrs	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	60da      	str	r2, [r3, #12]
}
 80072be:	bf00      	nop
 80072c0:	372c      	adds	r7, #44	; 0x2c
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b08b      	sub	sp, #44	; 0x2c
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	fa93 f3a3 	rbit	r3, r3
 80072e4:	613b      	str	r3, [r7, #16]
  return result;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d101      	bne.n	80072f4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80072f0:	2320      	movs	r3, #32
 80072f2:	e003      	b.n	80072fc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	fab3 f383 	clz	r3, r3
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	210f      	movs	r1, #15
 8007300:	fa01 f303 	lsl.w	r3, r1, r3
 8007304:	43db      	mvns	r3, r3
 8007306:	401a      	ands	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800730c:	6a3b      	ldr	r3, [r7, #32]
 800730e:	fa93 f3a3 	rbit	r3, r3
 8007312:	61fb      	str	r3, [r7, #28]
  return result;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800731e:	2320      	movs	r3, #32
 8007320:	e003      	b.n	800732a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	fab3 f383 	clz	r3, r3
 8007328:	b2db      	uxtb	r3, r3
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	6879      	ldr	r1, [r7, #4]
 800732e:	fa01 f303 	lsl.w	r3, r1, r3
 8007332:	431a      	orrs	r2, r3
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8007338:	bf00      	nop
 800733a:	372c      	adds	r7, #44	; 0x2c
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007344:	b480      	push	{r7}
 8007346:	b08b      	sub	sp, #44	; 0x2c
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	0a1b      	lsrs	r3, r3, #8
 8007358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	fa93 f3a3 	rbit	r3, r3
 8007360:	613b      	str	r3, [r7, #16]
  return result;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800736c:	2320      	movs	r3, #32
 800736e:	e003      	b.n	8007378 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	fab3 f383 	clz	r3, r3
 8007376:	b2db      	uxtb	r3, r3
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	210f      	movs	r1, #15
 800737c:	fa01 f303 	lsl.w	r3, r1, r3
 8007380:	43db      	mvns	r3, r3
 8007382:	401a      	ands	r2, r3
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	0a1b      	lsrs	r3, r3, #8
 8007388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	fa93 f3a3 	rbit	r3, r3
 8007390:	61fb      	str	r3, [r7, #28]
  return result;
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	2b00      	cmp	r3, #0
 800739a:	d101      	bne.n	80073a0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800739c:	2320      	movs	r3, #32
 800739e:	e003      	b.n	80073a8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	fab3 f383 	clz	r3, r3
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	fa01 f303 	lsl.w	r3, r1, r3
 80073b0:	431a      	orrs	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80073b6:	bf00      	nop
 80073b8:	372c      	adds	r7, #44	; 0x2c
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	fa93 f3a3 	rbit	r3, r3
 80073d8:	60fb      	str	r3, [r7, #12]
  return result;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <LL_GPIO_Init+0x26>
    return 32U;
 80073e4:	2320      	movs	r3, #32
 80073e6:	e003      	b.n	80073f0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	fab3 f383 	clz	r3, r3
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80073f2:	e047      	b.n	8007484 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	2101      	movs	r1, #1
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	fa01 f303 	lsl.w	r3, r1, r3
 8007400:	4013      	ands	r3, r2
 8007402:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d039      	beq.n	800747e <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d003      	beq.n	800741a <LL_GPIO_Init+0x58>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d10d      	bne.n	8007436 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	461a      	mov	r2, r3
 8007420:	69b9      	ldr	r1, [r7, #24]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff fed7 	bl	80071d6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	461a      	mov	r2, r3
 800742e:	69b9      	ldr	r1, [r7, #24]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff feb8 	bl	80071a6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	461a      	mov	r2, r3
 800743c:	69b9      	ldr	r1, [r7, #24]
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7ff ff06 	bl	8007250 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d111      	bne.n	8007470 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2bff      	cmp	r3, #255	; 0xff
 8007450:	d807      	bhi.n	8007462 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	461a      	mov	r2, r3
 8007458:	69b9      	ldr	r1, [r7, #24]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff ff35 	bl	80072ca <LL_GPIO_SetAFPin_0_7>
 8007460:	e006      	b.n	8007470 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	461a      	mov	r2, r3
 8007468:	69b9      	ldr	r1, [r7, #24]
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f7ff ff6a 	bl	8007344 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	461a      	mov	r2, r3
 8007476:	69b9      	ldr	r1, [r7, #24]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f7ff fe57 	bl	800712c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3301      	adds	r3, #1
 8007482:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	fa22 f303 	lsr.w	r3, r2, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1b0      	bne.n	80073f4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80074a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80074a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	43db      	mvns	r3, r3
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	4013      	ands	r3, r2
 80074bc:	b29a      	uxth	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80074d2:	b084      	sub	sp, #16
 80074d4:	b480      	push	{r7}
 80074d6:	b083      	sub	sp, #12
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	f107 0014 	add.w	r0, r7, #20
 80074e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	b004      	add	sp, #16
 8007512:	4770      	bx	lr

08007514 <__cxa_guard_acquire>:
 8007514:	6803      	ldr	r3, [r0, #0]
 8007516:	07db      	lsls	r3, r3, #31
 8007518:	d406      	bmi.n	8007528 <__cxa_guard_acquire+0x14>
 800751a:	7843      	ldrb	r3, [r0, #1]
 800751c:	b103      	cbz	r3, 8007520 <__cxa_guard_acquire+0xc>
 800751e:	deff      	udf	#255	; 0xff
 8007520:	2301      	movs	r3, #1
 8007522:	7043      	strb	r3, [r0, #1]
 8007524:	4618      	mov	r0, r3
 8007526:	4770      	bx	lr
 8007528:	2000      	movs	r0, #0
 800752a:	4770      	bx	lr

0800752c <__cxa_guard_release>:
 800752c:	2301      	movs	r3, #1
 800752e:	6003      	str	r3, [r0, #0]
 8007530:	4770      	bx	lr

08007532 <__cxa_pure_virtual>:
 8007532:	b508      	push	{r3, lr}
 8007534:	f000 f80a 	bl	800754c <_ZSt9terminatev>

08007538 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8007538:	b508      	push	{r3, lr}
 800753a:	4780      	blx	r0
 800753c:	f000 f80b 	bl	8007556 <abort>

08007540 <_ZSt13get_terminatev>:
 8007540:	4b01      	ldr	r3, [pc, #4]	; (8007548 <_ZSt13get_terminatev+0x8>)
 8007542:	e8d3 0faf 	lda	r0, [r3]
 8007546:	4770      	bx	lr
 8007548:	20000020 	.word	0x20000020

0800754c <_ZSt9terminatev>:
 800754c:	b508      	push	{r3, lr}
 800754e:	f7ff fff7 	bl	8007540 <_ZSt13get_terminatev>
 8007552:	f7ff fff1 	bl	8007538 <_ZN10__cxxabiv111__terminateEPFvvE>

08007556 <abort>:
 8007556:	2006      	movs	r0, #6
 8007558:	b508      	push	{r3, lr}
 800755a:	f000 f85d 	bl	8007618 <raise>
 800755e:	2001      	movs	r0, #1
 8007560:	f7fa fb62 	bl	8001c28 <_exit>

08007564 <__errno>:
 8007564:	4b01      	ldr	r3, [pc, #4]	; (800756c <__errno+0x8>)
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	20000024 	.word	0x20000024

08007570 <__libc_init_array>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	4d0d      	ldr	r5, [pc, #52]	; (80075a8 <__libc_init_array+0x38>)
 8007574:	2600      	movs	r6, #0
 8007576:	4c0d      	ldr	r4, [pc, #52]	; (80075ac <__libc_init_array+0x3c>)
 8007578:	1b64      	subs	r4, r4, r5
 800757a:	10a4      	asrs	r4, r4, #2
 800757c:	42a6      	cmp	r6, r4
 800757e:	d109      	bne.n	8007594 <__libc_init_array+0x24>
 8007580:	4d0b      	ldr	r5, [pc, #44]	; (80075b0 <__libc_init_array+0x40>)
 8007582:	2600      	movs	r6, #0
 8007584:	4c0b      	ldr	r4, [pc, #44]	; (80075b4 <__libc_init_array+0x44>)
 8007586:	f000 f863 	bl	8007650 <_init>
 800758a:	1b64      	subs	r4, r4, r5
 800758c:	10a4      	asrs	r4, r4, #2
 800758e:	42a6      	cmp	r6, r4
 8007590:	d105      	bne.n	800759e <__libc_init_array+0x2e>
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	f855 3b04 	ldr.w	r3, [r5], #4
 8007598:	3601      	adds	r6, #1
 800759a:	4798      	blx	r3
 800759c:	e7ee      	b.n	800757c <__libc_init_array+0xc>
 800759e:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a2:	3601      	adds	r6, #1
 80075a4:	4798      	blx	r3
 80075a6:	e7f2      	b.n	800758e <__libc_init_array+0x1e>
 80075a8:	08007708 	.word	0x08007708
 80075ac:	08007708 	.word	0x08007708
 80075b0:	08007708 	.word	0x08007708
 80075b4:	0800770c 	.word	0x0800770c

080075b8 <memset>:
 80075b8:	4402      	add	r2, r0
 80075ba:	4603      	mov	r3, r0
 80075bc:	4293      	cmp	r3, r2
 80075be:	d100      	bne.n	80075c2 <memset+0xa>
 80075c0:	4770      	bx	lr
 80075c2:	f803 1b01 	strb.w	r1, [r3], #1
 80075c6:	e7f9      	b.n	80075bc <memset+0x4>

080075c8 <_raise_r>:
 80075c8:	291f      	cmp	r1, #31
 80075ca:	b538      	push	{r3, r4, r5, lr}
 80075cc:	4604      	mov	r4, r0
 80075ce:	460d      	mov	r5, r1
 80075d0:	d904      	bls.n	80075dc <_raise_r+0x14>
 80075d2:	2316      	movs	r3, #22
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	bd38      	pop	{r3, r4, r5, pc}
 80075dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80075de:	b112      	cbz	r2, 80075e6 <_raise_r+0x1e>
 80075e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075e4:	b94b      	cbnz	r3, 80075fa <_raise_r+0x32>
 80075e6:	4620      	mov	r0, r4
 80075e8:	f000 f830 	bl	800764c <_getpid_r>
 80075ec:	462a      	mov	r2, r5
 80075ee:	4601      	mov	r1, r0
 80075f0:	4620      	mov	r0, r4
 80075f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075f6:	f000 b817 	b.w	8007628 <_kill_r>
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d00a      	beq.n	8007614 <_raise_r+0x4c>
 80075fe:	1c59      	adds	r1, r3, #1
 8007600:	d103      	bne.n	800760a <_raise_r+0x42>
 8007602:	2316      	movs	r3, #22
 8007604:	6003      	str	r3, [r0, #0]
 8007606:	2001      	movs	r0, #1
 8007608:	e7e7      	b.n	80075da <_raise_r+0x12>
 800760a:	2400      	movs	r4, #0
 800760c:	4628      	mov	r0, r5
 800760e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007612:	4798      	blx	r3
 8007614:	2000      	movs	r0, #0
 8007616:	e7e0      	b.n	80075da <_raise_r+0x12>

08007618 <raise>:
 8007618:	4b02      	ldr	r3, [pc, #8]	; (8007624 <raise+0xc>)
 800761a:	4601      	mov	r1, r0
 800761c:	6818      	ldr	r0, [r3, #0]
 800761e:	f7ff bfd3 	b.w	80075c8 <_raise_r>
 8007622:	bf00      	nop
 8007624:	20000024 	.word	0x20000024

08007628 <_kill_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	2300      	movs	r3, #0
 800762c:	4d06      	ldr	r5, [pc, #24]	; (8007648 <_kill_r+0x20>)
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	4611      	mov	r1, r2
 8007634:	602b      	str	r3, [r5, #0]
 8007636:	f7fa fae7 	bl	8001c08 <_kill>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d102      	bne.n	8007644 <_kill_r+0x1c>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	b103      	cbz	r3, 8007644 <_kill_r+0x1c>
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	bf00      	nop
 8007648:	2000058c 	.word	0x2000058c

0800764c <_getpid_r>:
 800764c:	f7fa bad4 	b.w	8001bf8 <_getpid>

08007650 <_init>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	bf00      	nop
 8007654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007656:	bc08      	pop	{r3}
 8007658:	469e      	mov	lr, r3
 800765a:	4770      	bx	lr

0800765c <_fini>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	bf00      	nop
 8007660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007662:	bc08      	pop	{r3}
 8007664:	469e      	mov	lr, r3
 8007666:	4770      	bx	lr
