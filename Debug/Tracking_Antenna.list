
Tracking_Antenna.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009038  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f60  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a18c  0800a18c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a18c  0800a18c  0001a18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a194  0800a194  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a194  0800a194  0001a194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a19c  0800a19c  0001a19c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a1a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000177c  20000078  0800a21c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017f4  0800a21c  000217f4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d844  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058bc  00000000  00000000  0004d8f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  000531b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001998  00000000  00000000  00054d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ce17  00000000  00000000  00056700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031611  00000000  00000000  00093517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018c441  00000000  00000000  000c4b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00250f69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077cc  00000000  00000000  00250fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000078 	.word	0x20000078
 8000210:	00000000 	.word	0x00000000
 8000214:	08009214 	.word	0x08009214

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000007c 	.word	0x2000007c
 8000230:	08009214 	.word	0x08009214

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN14CircularBuffer4readEPhi>:
    } 
    res = buf[(readPtr + dist) % size];  
    return 1;
}

uint8_t CircularBuffer::read(uint8_t* res, int dist) {
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	60f8      	str	r0, [r7, #12]
 800055c:	60b9      	str	r1, [r7, #8]
 800055e:	607a      	str	r2, [r7, #4]
    if(dist + readPtr > writePtr) return 0;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	68da      	ldr	r2, [r3, #12]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	441a      	add	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	429a      	cmp	r2, r3
 800056e:	dd01      	ble.n	8000574 <_ZN14CircularBuffer4readEPhi+0x20>
 8000570:	2300      	movs	r3, #0
 8000572:	e069      	b.n	8000648 <_ZN14CircularBuffer4readEPhi+0xf4>

    if( (readPtr % size) + dist >= size ) {
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	6852      	ldr	r2, [r2, #4]
 800057c:	fb93 f1f2 	sdiv	r1, r3, r2
 8000580:	fb01 f202 	mul.w	r2, r1, r2
 8000584:	1a9a      	subs	r2, r3, r2
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	441a      	add	r2, r3
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	429a      	cmp	r2, r3
 8000590:	db42      	blt.n	8000618 <_ZN14CircularBuffer4readEPhi+0xc4>
        // two memcpys needed
        int dist_to_end = size - (readPtr % size);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6859      	ldr	r1, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	6852      	ldr	r2, [r2, #4]
 800059e:	fb93 f0f2 	sdiv	r0, r3, r2
 80005a2:	fb00 f202 	mul.w	r2, r0, r2
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	1acb      	subs	r3, r1, r3
 80005aa:	617b      	str	r3, [r7, #20]
        std::memcpy(res, &buf[readPtr % size], dist_to_end);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	6852      	ldr	r2, [r2, #4]
 80005b8:	fb93 f0f2 	sdiv	r0, r3, r2
 80005bc:	fb00 f202 	mul.w	r2, r0, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	4619      	mov	r1, r3
 80005c8:	68b8      	ldr	r0, [r7, #8]
 80005ca:	f008 fccb 	bl	8008f64 <memcpy>
        readPtr += dist_to_end;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	68da      	ldr	r2, [r3, #12]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	441a      	add	r2, r3
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	60da      	str	r2, [r3, #12]
        dist -= dist_to_end;
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	607b      	str	r3, [r7, #4]
        std::memcpy(&res[dist_to_end], &buf[readPtr % size], dist);
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	18d4      	adds	r4, r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	6852      	ldr	r2, [r2, #4]
 80005f4:	fb93 f0f2 	sdiv	r0, r3, r2
 80005f8:	fb00 f202 	mul.w	r2, r0, r2
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	440b      	add	r3, r1
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4619      	mov	r1, r3
 8000604:	4620      	mov	r0, r4
 8000606:	f008 fcad 	bl	8008f64 <memcpy>
        readPtr += dist;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	68da      	ldr	r2, [r3, #12]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	441a      	add	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	e016      	b.n	8000646 <_ZN14CircularBuffer4readEPhi+0xf2>
    } else {
        // one memcpy needed
        std::memcpy(res, &buf[readPtr % size], dist);
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6819      	ldr	r1, [r3, #0]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68db      	ldr	r3, [r3, #12]
 8000620:	68fa      	ldr	r2, [r7, #12]
 8000622:	6852      	ldr	r2, [r2, #4]
 8000624:	fb93 f0f2 	sdiv	r0, r3, r2
 8000628:	fb00 f202 	mul.w	r2, r0, r2
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	440b      	add	r3, r1
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	4619      	mov	r1, r3
 8000634:	68b8      	ldr	r0, [r7, #8]
 8000636:	f008 fc95 	bl	8008f64 <memcpy>
        readPtr += dist;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	68da      	ldr	r2, [r3, #12]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	441a      	add	r2, r3
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	60da      	str	r2, [r3, #12]
    }

    return 1;
 8000646:	2301      	movs	r3, #1

}
 8000648:	4618      	mov	r0, r3
 800064a:	371c      	adds	r7, #28
 800064c:	46bd      	mov	sp, r7
 800064e:	bd90      	pop	{r4, r7, pc}

08000650 <_ZN14CircularBufferC1EPhi>:


CircularBuffer::CircularBuffer(uint8_t* buf, int size) {
 8000650:	b480      	push	{r7}
 8000652:	b085      	sub	sp, #20
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
    this->buf = buf;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	601a      	str	r2, [r3, #0]
    this->size = size;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	687a      	ldr	r2, [r7, #4]
 8000672:	605a      	str	r2, [r3, #4]
}
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	4618      	mov	r0, r3
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZN14CircularBuffer5writeEh>:

bool CircularBuffer::hasSpace() {
    return !((writePtr % size == readPtr % size) && writePtr != readPtr);
}

uint8_t CircularBuffer::write(uint8_t data) {
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	460b      	mov	r3, r1
 800068c:	70fb      	strb	r3, [r7, #3]
    buf[writePtr % size] = data;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6819      	ldr	r1, [r3, #0]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	6852      	ldr	r2, [r2, #4]
 800069a:	fb93 f0f2 	sdiv	r0, r3, r2
 800069e:	fb00 f202 	mul.w	r2, r0, r2
 80006a2:	1a9b      	subs	r3, r3, r2
 80006a4:	440b      	add	r3, r1
 80006a6:	78fa      	ldrb	r2, [r7, #3]
 80006a8:	701a      	strb	r2, [r3, #0]
    this->writePtr++;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	1c5a      	adds	r2, r3, #1
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]
    return 1;
 80006b4:	2301      	movs	r3, #1
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <_Z41__static_initialization_and_destruction_0ii>:

MAVLink drone_mavlink_instance(drone_mavlink_uart);
MAVLink* drone_mavlink = &drone_mavlink_instance;

MAVLink antenna_mavlink_instance(antenna_mavlink_uart);
MAVLink* antenna_mavlink = &antenna_mavlink_instance;
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d10c      	bne.n	80006ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006da:	4293      	cmp	r3, r2
 80006dc:	d107      	bne.n	80006ee <_Z41__static_initialization_and_destruction_0ii+0x2a>
MAVLink drone_mavlink_instance(drone_mavlink_uart);
 80006de:	490d      	ldr	r1, [pc, #52]	; (8000714 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80006e0:	480d      	ldr	r0, [pc, #52]	; (8000718 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80006e2:	f001 f9d5 	bl	8001a90 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
MAVLink antenna_mavlink_instance(antenna_mavlink_uart);
 80006e6:	490d      	ldr	r1, [pc, #52]	; (800071c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80006e8:	480d      	ldr	r0, [pc, #52]	; (8000720 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80006ea:	f001 f9d1 	bl	8001a90 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <_Z41__static_initialization_and_destruction_0ii+0x46>
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d105      	bne.n	800070a <_Z41__static_initialization_and_destruction_0ii+0x46>
 80006fe:	4808      	ldr	r0, [pc, #32]	; (8000720 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8000700:	f001 f9f1 	bl	8001ae6 <_ZN7MAVLinkD1Ev>
MAVLink drone_mavlink_instance(drone_mavlink_uart);
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8000706:	f001 f9ee 	bl	8001ae6 <_ZN7MAVLinkD1Ev>
MAVLink* antenna_mavlink = &antenna_mavlink_instance;
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200013ec 	.word	0x200013ec
 8000718:	20000094 	.word	0x20000094
 800071c:	20001358 	.word	0x20001358
 8000720:	20000678 	.word	0x20000678

08000724 <_GLOBAL__sub_I_drone_mavlink_instance>:
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
 8000728:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800072c:	2001      	movs	r0, #1
 800072e:	f7ff ffc9 	bl	80006c4 <_Z41__static_initialization_and_destruction_0ii>
 8000732:	bd80      	pop	{r7, pc}

08000734 <_GLOBAL__sub_D_drone_mavlink_instance>:
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
 8000738:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff ffc1 	bl	80006c4 <_Z41__static_initialization_and_destruction_0ii>
 8000742:	bd80      	pop	{r7, pc}

08000744 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	6039      	str	r1, [r7, #0]
 800074e:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4053      	eors	r3, r2
 800075a:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 800075c:	7bfb      	ldrb	r3, [r7, #15]
 800075e:	011b      	lsls	r3, r3, #4
 8000760:	b25a      	sxtb	r2, r3
 8000762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000766:	4053      	eors	r3, r2
 8000768:	b25b      	sxtb	r3, r3
 800076a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b29b      	uxth	r3, r3
 8000774:	b21a      	sxth	r2, r3
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	b21b      	sxth	r3, r3
 800077c:	4053      	eors	r3, r2
 800077e:	b21a      	sxth	r2, r3
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	b21b      	sxth	r3, r3
 8000786:	4053      	eors	r3, r2
 8000788:	b21a      	sxth	r2, r3
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	091b      	lsrs	r3, r3, #4
 800078e:	b2db      	uxtb	r3, r3
 8000790:	b21b      	sxth	r3, r3
 8000792:	4053      	eors	r3, r2
 8000794:	b21b      	sxth	r3, r3
 8000796:	b29a      	uxth	r2, r3
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	801a      	strh	r2, [r3, #0]
}
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007b6:	801a      	strh	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <mavlink_sha256_init+0x50>)
 80007dc:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <mavlink_sha256_init+0x54>)
 80007e2:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <mavlink_sha256_init+0x58>)
 80007e8:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a0c      	ldr	r2, [pc, #48]	; (8000820 <mavlink_sha256_init+0x5c>)
 80007ee:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <mavlink_sha256_init+0x60>)
 80007f4:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <mavlink_sha256_init+0x64>)
 80007fa:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a0b      	ldr	r2, [pc, #44]	; (800082c <mavlink_sha256_init+0x68>)
 8000800:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <mavlink_sha256_init+0x6c>)
 8000806:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	6a09e667 	.word	0x6a09e667
 8000818:	bb67ae85 	.word	0xbb67ae85
 800081c:	3c6ef372 	.word	0x3c6ef372
 8000820:	a54ff53a 	.word	0xa54ff53a
 8000824:	510e527f 	.word	0x510e527f
 8000828:	9b05688c 	.word	0x9b05688c
 800082c:	1f83d9ab 	.word	0x1f83d9ab
 8000830:	5be0cd19 	.word	0x5be0cd19

08000834 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8000834:	b480      	push	{r7}
 8000836:	b0cf      	sub	sp, #316	; 0x13c
 8000838:	af00      	add	r7, sp, #0
 800083a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800083e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000842:	6018      	str	r0, [r3, #0]
 8000844:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000848:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800084c:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800084e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000852:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 800085e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000862:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 800086e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000872:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 800087e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000882:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 800088e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000892:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 800089e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	69db      	ldr	r3, [r3, #28]
 80008aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80008ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6a1b      	ldr	r3, [r3, #32]
 80008ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80008be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008c2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ca:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80008d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	dc17      	bgt.n	800090c <mavlink_sha256_calc+0xd8>
	data[i] = in[i];
 80008dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80008e6:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 80008ea:	6812      	ldr	r2, [r2, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	6819      	ldr	r1, [r3, #0]
 80008f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80008f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80008f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80008fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8000900:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000904:	3301      	adds	r3, #1
 8000906:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800090a:	e7e3      	b.n	80008d4 <mavlink_sha256_calc+0xa0>
    for (i = 16; i < 64; ++i)
 800090c:	2310      	movs	r3, #16
 800090e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000916:	2b3f      	cmp	r3, #63	; 0x3f
 8000918:	dc6a      	bgt.n	80009f0 <mavlink_sha256_calc+0x1bc>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800091a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800091e:	1e9a      	subs	r2, r3, #2
 8000920:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092c:	ea4f 4273 	mov.w	r2, r3, ror #17
 8000930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000934:	1e99      	subs	r1, r3, #2
 8000936:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800093a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800093e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000942:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8000946:	405a      	eors	r2, r3
 8000948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800094c:	1e99      	subs	r1, r3, #2
 800094e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000956:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800095a:	0a9b      	lsrs	r3, r3, #10
 800095c:	405a      	eors	r2, r3
 800095e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000962:	1fd9      	subs	r1, r3, #7
 8000964:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800096c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000970:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8000972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000976:	f1a3 010f 	sub.w	r1, r3, #15
 800097a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800097e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000982:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000986:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800098a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800098e:	f1a3 000f 	sub.w	r0, r3, #15
 8000992:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800099a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800099e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80009a2:	4059      	eors	r1, r3
 80009a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009a8:	f1a3 000f 	sub.w	r0, r3, #15
 80009ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80009b8:	08db      	lsrs	r3, r3, #3
 80009ba:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80009bc:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80009be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009c2:	f1a3 0110 	sub.w	r1, r3, #16
 80009c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009ce:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80009d2:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80009d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80009d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80009dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80009e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80009e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009e8:	3301      	adds	r3, #1
 80009ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80009ee:	e790      	b.n	8000912 <mavlink_sha256_calc+0xde>

    for (i = 0; i < 64; i++) {
 80009f0:	2300      	movs	r3, #0
 80009f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80009f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80009fa:	2b3f      	cmp	r3, #63	; 0x3f
 80009fc:	dc79      	bgt.n	8000af2 <mavlink_sha256_calc+0x2be>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80009fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a02:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8000a06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a0a:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8000a0e:	405a      	eors	r2, r3
 8000a10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a14:	ea4f 6373 	mov.w	r3, r3, ror #25
 8000a18:	405a      	eors	r2, r3
 8000a1a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000a1e:	441a      	add	r2, r3
 8000a20:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000a24:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a28:	4019      	ands	r1, r3
 8000a2a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000a2e:	43d8      	mvns	r0, r3
 8000a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a34:	4003      	ands	r3, r0
 8000a36:	404b      	eors	r3, r1
 8000a38:	441a      	add	r2, r3
 8000a3a:	496d      	ldr	r1, [pc, #436]	; (8000bf0 <mavlink_sha256_calc+0x3bc>)
 8000a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000a40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a44:	441a      	add	r2, r3
 8000a46:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8000a4e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8000a52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000a56:	4413      	add	r3, r2
 8000a58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8000a5c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a60:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8000a64:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a68:	ea4f 3373 	mov.w	r3, r3, ror #13
 8000a6c:	405a      	eors	r2, r3
 8000a6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a72:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8000a76:	405a      	eors	r2, r3
 8000a78:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8000a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a80:	4059      	eors	r1, r3
 8000a82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000a86:	4019      	ands	r1, r3
 8000a88:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a90:	4003      	ands	r3, r0
 8000a92:	404b      	eors	r3, r1
 8000a94:	4413      	add	r3, r2
 8000a96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 8000a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000a9e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8000aa2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000aa6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 8000aaa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000aae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8000ab2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000ab6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000aba:	4413      	add	r3, r2
 8000abc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 8000ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000ac4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 8000ac8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000acc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 8000ad0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ad4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 8000ad8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8000adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 8000ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000aea:	3301      	adds	r3, #1
 8000aec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000af0:	e781      	b.n	80009f6 <mavlink_sha256_calc+0x1c2>
    }

    m->counter[0] += AA;
 8000af2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000af6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000b02:	441a      	add	r2, r3
 8000b04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b08:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8000b10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b14:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	68da      	ldr	r2, [r3, #12]
 8000b1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000b20:	441a      	add	r2, r3
 8000b22:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b26:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8000b2e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b32:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	691a      	ldr	r2, [r3, #16]
 8000b3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000b3e:	441a      	add	r2, r3
 8000b40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b44:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8000b4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	695a      	ldr	r2, [r3, #20]
 8000b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000b5c:	441a      	add	r2, r3
 8000b5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8000b6a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b6e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	699a      	ldr	r2, [r3, #24]
 8000b76:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000b7a:	441a      	add	r2, r3
 8000b7c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8000b88:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	69da      	ldr	r2, [r3, #28]
 8000b94:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000b98:	441a      	add	r2, r3
 8000b9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000b9e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8000ba6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000baa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	6a1a      	ldr	r2, [r3, #32]
 8000bb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000bb6:	441a      	add	r2, r3
 8000bb8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bbc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8000bc4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bd0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000bd4:	441a      	add	r2, r3
 8000bd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8000bda:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000be2:	bf00      	nop
 8000be4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	0800922c 	.word	0x0800922c

08000bf4 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b09c      	sub	sp, #112	; 0x70
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	441a      	add	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d904      	bls.n	8000c2c <mavlink_sha256_update+0x38>
	++m->sz[1];
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8000c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c34:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d058      	beq.n	8000cee <mavlink_sha256_update+0xfa>
	uint32_t l = 64 - offset;
 8000c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c3e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000c42:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d201      	bcs.n	8000c50 <mavlink_sha256_update+0x5c>
            l = len;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000c56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c58:	4413      	add	r3, r2
 8000c5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c5c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f008 f980 	bl	8008f64 <memcpy>
	offset += l;
 8000c64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000c66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c68:	4413      	add	r3, r2
 8000c6a:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 8000c6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c70:	4413      	add	r3, r2
 8000c72:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8000c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c7e:	2b40      	cmp	r3, #64	; 0x40
 8000c80:	d1d9      	bne.n	8000c36 <mavlink_sha256_update+0x42>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	3328      	adds	r3, #40	; 0x28
 8000c86:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 8000c88:	2300      	movs	r3, #0
 8000c8a:	663b      	str	r3, [r7, #96]	; 0x60
 8000c8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c8e:	2b0f      	cmp	r3, #15
 8000c90:	dc24      	bgt.n	8000cdc <mavlink_sha256_update+0xe8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8000c92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c98:	4413      	add	r3, r2
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8000c9c:	f107 0210 	add.w	r2, r7, #16
 8000ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	4413      	add	r3, r2
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8000ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000caa:	3303      	adds	r3, #3
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb0:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8000cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cb4:	1c9a      	adds	r2, r3, #2
 8000cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb8:	3301      	adds	r3, #1
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8000cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8000cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ccc:	3303      	adds	r3, #3
 8000cce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8000cd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8000cda:	e7d7      	b.n	8000c8c <mavlink_sha256_update+0x98>
	    }
	    mavlink_sha256_calc(m, current);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f7ff fda6 	bl	8000834 <mavlink_sha256_calc>
	    offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 8000cec:	e7a3      	b.n	8000c36 <mavlink_sha256_update+0x42>
	}
    }
}
 8000cee:	bf00      	nop
 8000cf0:	3770      	adds	r7, #112	; 0x70
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b098      	sub	sp, #96	; 0x60
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
 8000cfe:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	08db      	lsrs	r3, r3, #3
 8000d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8000d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d0e:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8000d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d16:	3301      	adds	r3, #1
 8000d18:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3308      	adds	r3, #8
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	3301      	adds	r3, #1
 8000d2a:	2247      	movs	r2, #71	; 0x47
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f008 f925 	bl	8008f7e <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d3a:	3307      	adds	r3, #7
 8000d3c:	b2d2      	uxtb	r2, r2
 8000d3e:	3360      	adds	r3, #96	; 0x60
 8000d40:	443b      	add	r3, r7
 8000d42:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	0a1a      	lsrs	r2, r3, #8
 8000d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d4e:	3306      	adds	r3, #6
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	3360      	adds	r3, #96	; 0x60
 8000d54:	443b      	add	r3, r7
 8000d56:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	0c1a      	lsrs	r2, r3, #16
 8000d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d62:	3305      	adds	r3, #5
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	3360      	adds	r3, #96	; 0x60
 8000d68:	443b      	add	r3, r7
 8000d6a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	0e1a      	lsrs	r2, r3, #24
 8000d74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d76:	3304      	adds	r3, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	3360      	adds	r3, #96	; 0x60
 8000d7c:	443b      	add	r3, r7
 8000d7e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685a      	ldr	r2, [r3, #4]
 8000d86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d88:	3303      	adds	r3, #3
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	3360      	adds	r3, #96	; 0x60
 8000d8e:	443b      	add	r3, r7
 8000d90:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	0a1a      	lsrs	r2, r3, #8
 8000d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	b2d2      	uxtb	r2, r2
 8000da0:	3360      	adds	r3, #96	; 0x60
 8000da2:	443b      	add	r3, r7
 8000da4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	0c1a      	lsrs	r2, r3, #16
 8000dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000db0:	3301      	adds	r3, #1
 8000db2:	b2d2      	uxtb	r2, r2
 8000db4:	3360      	adds	r3, #96	; 0x60
 8000db6:	443b      	add	r3, r7
 8000db8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	0e1b      	lsrs	r3, r3, #24
 8000dc2:	b2d9      	uxtb	r1, r3
 8000dc4:	f107 020c 	add.w	r2, r7, #12
 8000dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dca:	4413      	add	r3, r2
 8000dcc:	460a      	mov	r2, r1
 8000dce:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8000dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000dd2:	f103 0208 	add.w	r2, r3, #8
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff09 	bl	8000bf4 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8000de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de4:	78da      	ldrb	r2, [r3, #3]
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000df0:	7892      	ldrb	r2, [r2, #2]
 8000df2:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	3302      	adds	r3, #2
 8000df8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dfa:	7852      	ldrb	r2, [r2, #1]
 8000dfc:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	3303      	adds	r3, #3
 8000e02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e0e:	79d2      	ldrb	r2, [r2, #7]
 8000e10:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	3305      	adds	r3, #5
 8000e16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000e18:	7992      	ldrb	r2, [r2, #6]
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	3760      	adds	r7, #96	; 0x60
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8000e2e:	79fa      	ldrb	r2, [r7, #7]
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4a03      	ldr	r2, [pc, #12]	; (8000e48 <mavlink_get_channel_status+0x24>)
 8000e3a:	4413      	add	r3, r2
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	20000c5c 	.word	0x20000c5c

08000e4c <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f240 1223 	movw	r2, #291	; 0x123
 8000e5c:	fb02 f303 	mul.w	r3, r2, r3
 8000e60:	4a03      	ldr	r2, [pc, #12]	; (8000e70 <mavlink_get_channel_buffer+0x24>)
 8000e62:	4413      	add	r3, r2
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000cbc 	.word	0x20000cbc

08000e74 <mavlink_reset_channel_status>:

/**
 * @brief Reset the status of a channel.
 */
MAVLINK_HELPER void mavlink_reset_channel_status(uint8_t chan)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ffcf 	bl	8000e24 <mavlink_get_channel_status>
 8000e86:	60f8      	str	r0, [r7, #12]
	status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	70da      	strb	r2, [r3, #3]
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 8000e96:	b480      	push	{r7}
 8000e98:	b083      	sub	sp, #12
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000ea2:	78fb      	ldrb	r3, [r7, #3]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d90a      	bls.n	8000ebe <_mav_trim_payload+0x28>
 8000ea8:	78fb      	ldrb	r3, [r7, #3]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	4413      	add	r3, r2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d103      	bne.n	8000ebe <_mav_trim_payload+0x28>
		length--;
 8000eb6:	78fb      	ldrb	r3, [r7, #3]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 8000ebc:	e7f1      	b.n	8000ea2 <_mav_trim_payload+0xc>
	}
	return length;
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b0aa      	sub	sp, #168	; 0xa8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <mavlink_signature_check+0x16>
		return true;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e125      	b.n	800112e <mavlink_signature_check+0x262>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const uint8_t *psig = msg->signature;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8000ef0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        const uint8_t *incoming_signature = psig+7;
 8000ef4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ef8:	3307      	adds	r3, #7
 8000efa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8000efe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fc5e 	bl	80007c4 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f103 0110 	add.w	r1, r3, #16
 8000f0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f12:	2220      	movs	r2, #32
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fe6d 	bl	8000bf4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8000f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1e:	220a      	movs	r2, #10
 8000f20:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fe65 	bl	8000bf4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f103 010c 	add.w	r1, r3, #12
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	78db      	ldrb	r3, [r3, #3]
 8000f34:	461a      	mov	r2, r3
 8000f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fe5a 	bl	8000bf4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f503 718a 	add.w	r1, r3, #276	; 0x114
 8000f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fe51 	bl	8000bf4 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8000f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f56:	2207      	movs	r2, #7
 8000f58:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe49 	bl	8000bf4 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8000f62:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fec2 	bl	8000cf6 <mavlink_sha256_final_48>
	if (memcmp(signature, incoming_signature, 6) != 0) {
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	2206      	movs	r2, #6
 8000f78:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f007 ffe1 	bl	8008f44 <memcmp>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <mavlink_signature_check+0xc0>
		return false;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	e0d0      	b.n	800112e <mavlink_signature_check+0x262>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8000f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	tstamp.t64 = 0;
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 8000fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000fa6:	1c59      	adds	r1, r3, #1
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	2206      	movs	r2, #6
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 ffd8 	bl	8008f64 <memcpy>

	if (signing_streams == NULL) {
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <mavlink_signature_check+0xf2>
		return false;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	e0b7      	b.n	800112e <mavlink_signature_check+0x262>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d22d      	bcs.n	800102c <mavlink_signature_check+0x160>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	79d9      	ldrb	r1, [r3, #7]
 8000fd4:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000fd8:	68b8      	ldr	r0, [r7, #8]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	4403      	add	r3, r0
 8000fe2:	3303      	adds	r3, #3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4299      	cmp	r1, r3
 8000fe8:	d119      	bne.n	800101e <mavlink_signature_check+0x152>
		    msg->compid == signing_streams->stream[i].compid &&
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7a19      	ldrb	r1, [r3, #8]
 8000fee:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8000ff2:	68b8      	ldr	r0, [r7, #8]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4403      	add	r3, r0
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8001000:	4299      	cmp	r1, r3
 8001002:	d10c      	bne.n	800101e <mavlink_signature_check+0x152>
		    link_id == signing_streams->stream[i].link_id) {
 8001004:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	4613      	mov	r3, r2
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	4413      	add	r3, r2
 8001010:	440b      	add	r3, r1
 8001012:	3302      	adds	r3, #2
 8001014:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8001016:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 800101a:	429a      	cmp	r2, r3
 800101c:	d005      	beq.n	800102a <mavlink_signature_check+0x15e>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800101e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001022:	3301      	adds	r3, #1
 8001024:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8001028:	e7cc      	b.n	8000fc4 <mavlink_signature_check+0xf8>
			break;
 800102a:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001034:	429a      	cmp	r2, r3
 8001036:	d13e      	bne.n	80010b6 <mavlink_signature_check+0x1ea>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	881b      	ldrh	r3, [r3, #0]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d901      	bls.n	8001044 <mavlink_signature_check+0x178>
			// over max number of streams
			return false;
 8001040:	2300      	movs	r3, #0
 8001042:	e074      	b.n	800112e <mavlink_signature_check+0x262>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8001044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001048:	493b      	ldr	r1, [pc, #236]	; (8001138 <mavlink_signature_check+0x26c>)
 800104a:	1854      	adds	r4, r2, r1
 800104c:	f143 0500 	adc.w	r5, r3, #0
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001056:	4294      	cmp	r4, r2
 8001058:	eb75 0303 	sbcs.w	r3, r5, r3
 800105c:	d201      	bcs.n	8001062 <mavlink_signature_check+0x196>
			return false;
 800105e:	2300      	movs	r3, #0
 8001060:	e065      	b.n	800112e <mavlink_signature_check+0x262>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8001062:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	79d8      	ldrb	r0, [r3, #7]
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	4613      	mov	r3, r2
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4413      	add	r3, r2
 8001072:	440b      	add	r3, r1
 8001074:	3303      	adds	r3, #3
 8001076:	4602      	mov	r2, r0
 8001078:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 800107a:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	7a18      	ldrb	r0, [r3, #8]
 8001082:	68b9      	ldr	r1, [r7, #8]
 8001084:	4613      	mov	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4413      	add	r3, r2
 800108a:	440b      	add	r3, r1
 800108c:	3304      	adds	r3, #4
 800108e:	4602      	mov	r2, r0
 8001090:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8001092:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4413      	add	r3, r2
 800109e:	440b      	add	r3, r1
 80010a0:	3302      	adds	r3, #2
 80010a2:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80010a6:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	3301      	adds	r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	801a      	strh	r2, [r3, #0]
 80010b4:	e01d      	b.n	80010f2 <mavlink_signature_check+0x226>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 80010c2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80010c6:	4613      	mov	r3, r2
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	1d59      	adds	r1, r3, #5
 80010d2:	f107 0310 	add.w	r3, r7, #16
 80010d6:	2206      	movs	r2, #6
 80010d8:	4618      	mov	r0, r3
 80010da:	f007 ff43 	bl	8008f64 <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 80010de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80010e6:	4290      	cmp	r0, r2
 80010e8:	eb71 0303 	sbcs.w	r3, r1, r3
 80010ec:	d301      	bcc.n	80010f2 <mavlink_signature_check+0x226>
			// repeating old timestamp
			return false;
 80010ee:	2300      	movs	r3, #0
 80010f0:	e01d      	b.n	800112e <mavlink_signature_check+0x262>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 80010f2:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4413      	add	r3, r2
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	4413      	add	r3, r2
 8001100:	1d58      	adds	r0, r3, #5
 8001102:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001106:	3301      	adds	r3, #1
 8001108:	2206      	movs	r2, #6
 800110a:	4619      	mov	r1, r3
 800110c:	f007 ff2a 	bl	8008f64 <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8001110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001114:	68f9      	ldr	r1, [r7, #12]
 8001116:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 800111a:	4290      	cmp	r0, r2
 800111c:	eb71 0303 	sbcs.w	r3, r1, r3
 8001120:	d204      	bcs.n	800112c <mavlink_signature_check+0x260>
		signing->timestamp = tstamp.t64;
 8001122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001126:	68f9      	ldr	r1, [r7, #12]
 8001128:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	return true;
 800112c:	2301      	movs	r3, #1
}
 800112e:	4618      	mov	r0, r3
 8001130:	37a8      	adds	r7, #168	; 0xa8
 8001132:	46bd      	mov	sp, r7
 8001134:	bdb0      	pop	{r4, r5, r7, pc}
 8001136:	bf00      	nop
 8001138:	005b8d80 	.word	0x005b8d80

0800113c <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	789b      	ldrb	r3, [r3, #2]
 8001148:	3301      	adds	r3, #1
 800114a:	b2da      	uxtb	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	709a      	strb	r2, [r3, #2]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	78db      	ldrb	r3, [r3, #3]
 800116a:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	2bfe      	cmp	r3, #254	; 0xfe
 8001172:	d13a      	bne.n	80011ea <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001178:	2305      	movs	r3, #5
 800117a:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	789a      	ldrb	r2, [r3, #2]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3301      	adds	r3, #1
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3302      	adds	r3, #2
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	7992      	ldrb	r2, [r2, #6]
 8001194:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3303      	adds	r3, #3
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	79d2      	ldrb	r2, [r2, #7]
 800119e:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3304      	adds	r3, #4
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	7a12      	ldrb	r2, [r2, #8]
 80011a8:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	7a5a      	ldrb	r2, [r3, #9]
 80011ae:	7a99      	ldrb	r1, [r3, #10]
 80011b0:	0209      	lsls	r1, r1, #8
 80011b2:	430a      	orrs	r2, r1
 80011b4:	7adb      	ldrb	r3, [r3, #11]
 80011b6:	041b      	lsls	r3, r3, #16
 80011b8:	4313      	orrs	r3, r2
 80011ba:	461a      	mov	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3305      	adds	r3, #5
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	1d98      	adds	r0, r3, #6
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	f103 010c 	add.w	r1, r3, #12
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	78db      	ldrb	r3, [r3, #3]
 80011d2:	461a      	mov	r2, r3
 80011d4:	f007 fec6 	bl	8008f64 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 80011d8:	7dbb      	ldrb	r3, [r7, #22]
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	78d2      	ldrb	r2, [r2, #3]
 80011de:	4413      	add	r3, r2
 80011e0:	3301      	adds	r3, #1
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	4413      	add	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	e06c      	b.n	80012c4 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	330c      	adds	r3, #12
 80011ee:	7bfa      	ldrb	r2, [r7, #15]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fe4f 	bl	8000e96 <_mav_trim_payload>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 80011fc:	2309      	movs	r3, #9
 80011fe:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	789a      	ldrb	r2, [r3, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3302      	adds	r3, #2
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	7912      	ldrb	r2, [r2, #4]
 8001218:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3303      	adds	r3, #3
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	7952      	ldrb	r2, [r2, #5]
 8001222:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3304      	adds	r3, #4
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	7992      	ldrb	r2, [r2, #6]
 800122c:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3305      	adds	r3, #5
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	79d2      	ldrb	r2, [r2, #7]
 8001236:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3306      	adds	r3, #6
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	7a12      	ldrb	r2, [r2, #8]
 8001240:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	7a5a      	ldrb	r2, [r3, #9]
 8001246:	7a99      	ldrb	r1, [r3, #10]
 8001248:	0209      	lsls	r1, r1, #8
 800124a:	430a      	orrs	r2, r1
 800124c:	7adb      	ldrb	r3, [r3, #11]
 800124e:	041b      	lsls	r3, r3, #16
 8001250:	4313      	orrs	r3, r2
 8001252:	461a      	mov	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3307      	adds	r3, #7
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	7a5a      	ldrb	r2, [r3, #9]
 8001260:	7a99      	ldrb	r1, [r3, #10]
 8001262:	0209      	lsls	r1, r1, #8
 8001264:	430a      	orrs	r2, r1
 8001266:	7adb      	ldrb	r3, [r3, #11]
 8001268:	041b      	lsls	r3, r3, #16
 800126a:	4313      	orrs	r3, r2
 800126c:	121a      	asrs	r2, r3, #8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3308      	adds	r3, #8
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	7a5a      	ldrb	r2, [r3, #9]
 800127a:	7a99      	ldrb	r1, [r3, #10]
 800127c:	0209      	lsls	r1, r1, #8
 800127e:	430a      	orrs	r2, r1
 8001280:	7adb      	ldrb	r3, [r3, #11]
 8001282:	041b      	lsls	r3, r3, #16
 8001284:	4313      	orrs	r3, r2
 8001286:	141a      	asrs	r2, r3, #16
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3309      	adds	r3, #9
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f103 000a 	add.w	r0, r3, #10
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	330c      	adds	r3, #12
 800129a:	7bfa      	ldrb	r2, [r7, #15]
 800129c:	4619      	mov	r1, r3
 800129e:	f007 fe61 	bl	8008f64 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 80012a2:	7dba      	ldrb	r2, [r7, #22]
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	4413      	add	r3, r2
 80012a8:	3301      	adds	r3, #1
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	791b      	ldrb	r3, [r3, #4]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <mavlink_msg_to_send_buffer+0x164>
 80012bc:	230d      	movs	r3, #13
 80012be:	e000      	b.n	80012c2 <mavlink_msg_to_send_buffer+0x166>
 80012c0:	2300      	movs	r3, #0
 80012c2:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	0a1b      	lsrs	r3, r3, #8
 80012d8:	b29a      	uxth	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	3301      	adds	r3, #1
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d008      	beq.n	80012fa <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1c98      	adds	r0, r3, #2
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80012f2:	7dfa      	ldrb	r2, [r7, #23]
 80012f4:	4619      	mov	r1, r3
 80012f6:	f007 fe35 	bl	8008f64 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 80012fa:	7dbb      	ldrb	r3, [r7, #22]
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4413      	add	r3, r2
 8001304:	b29a      	uxth	r2, r3
 8001306:	7dfb      	ldrb	r3, [r7, #23]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	3303      	adds	r3, #3
 8001310:	b29b      	uxth	r3, r3
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8001326:	f107 030e 	add.w	r3, r7, #14
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fa3c 	bl	80007a8 <crc_init>
	msg->checksum = crcTmp;
 8001330:	89fa      	ldrh	r2, [r7, #14]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	801a      	strh	r2, [r3, #0]
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b084      	sub	sp, #16
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8001352:	f107 020e 	add.w	r2, r7, #14
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f9f2 	bl	8000744 <crc_accumulate>
	msg->checksum = checksum;
 8001360:	89fa      	ldrh	r2, [r7, #14]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	801a      	strh	r2, [r3, #0]
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
 800137c:	f240 1327 	movw	r3, #295	; 0x127
 8001380:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	429a      	cmp	r2, r3
 8001388:	d226      	bcs.n	80013d8 <mavlink_get_msg_entry+0x68>
            uint32_t mid = (low+1+high)/2;
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	3301      	adds	r3, #1
 8001392:	085b      	lsrs	r3, r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8001396:	491d      	ldr	r1, [pc, #116]	; (800140c <mavlink_get_msg_entry+0x9c>)
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4613      	mov	r3, r2
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d203      	bcs.n	80013b4 <mavlink_get_msg_entry+0x44>
                high = mid-1;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	613b      	str	r3, [r7, #16]
                continue;
 80013b2:	e010      	b.n	80013d6 <mavlink_get_msg_entry+0x66>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80013b4:	4915      	ldr	r1, [pc, #84]	; (800140c <mavlink_get_msg_entry+0x9c>)
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	4613      	mov	r3, r2
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	440b      	add	r3, r1
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d902      	bls.n	80013d0 <mavlink_get_msg_entry+0x60>
                low = mid;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	617b      	str	r3, [r7, #20]
                continue;
 80013ce:	e002      	b.n	80013d6 <mavlink_get_msg_entry+0x66>
            }
            low = mid;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	617b      	str	r3, [r7, #20]
            break;
 80013d4:	e000      	b.n	80013d8 <mavlink_get_msg_entry+0x68>
        while (low < high) {
 80013d6:	e7d4      	b.n	8001382 <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80013d8:	490c      	ldr	r1, [pc, #48]	; (800140c <mavlink_get_msg_entry+0x9c>)
 80013da:	697a      	ldr	r2, [r7, #20]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d001      	beq.n	80013f2 <mavlink_get_msg_entry+0x82>
            // msgid is not in the table
            return NULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e006      	b.n	8001400 <mavlink_get_msg_entry+0x90>
        }
        return &mavlink_message_crcs[low];
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <mavlink_get_msg_entry+0x9c>)
 80013fe:	4413      	add	r3, r2
}
 8001400:	4618      	mov	r0, r3
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	0800932c 	.word	0x0800932c

08001410 <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	4613      	mov	r3, r2
 800141e:	71fb      	strb	r3, [r7, #7]
	int bufferIndex = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	78db      	ldrb	r3, [r3, #3]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f200 8277 	bhi.w	8001922 <mavlink_frame_char_buffer+0x512>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <mavlink_frame_char_buffer+0x2c>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	0800147d 	.word	0x0800147d
 8001440:	0800147d 	.word	0x0800147d
 8001444:	080014db 	.word	0x080014db
 8001448:	08001541 	.word	0x08001541
 800144c:	08001579 	.word	0x08001579
 8001450:	08001591 	.word	0x08001591
 8001454:	080015a9 	.word	0x080015a9
 8001458:	080015c1 	.word	0x080015c1
 800145c:	080015d9 	.word	0x080015d9
 8001460:	08001633 	.word	0x08001633
 8001464:	0800167f 	.word	0x0800167f
 8001468:	080016db 	.word	0x080016db
 800146c:	08001713 	.word	0x08001713
 8001470:	0800179f 	.word	0x0800179f
 8001474:	0800179f 	.word	0x0800179f
 8001478:	08001863 	.word	0x08001863
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2bfd      	cmp	r3, #253	; 0xfd
 8001480:	d113      	bne.n	80014aa <mavlink_frame_char_buffer+0x9a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	2202      	movs	r2, #2
 8001486:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	7b1b      	ldrb	r3, [r3, #12]
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f7ff ff39 	bl	800131a <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80014a8:	e232      	b.n	8001910 <mavlink_frame_char_buffer+0x500>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	2bfe      	cmp	r3, #254	; 0xfe
 80014ae:	f040 822f 	bne.w	8001910 <mavlink_frame_char_buffer+0x500>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2202      	movs	r2, #2
 80014b6:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	2200      	movs	r2, #0
 80014bc:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	7b1b      	ldrb	r3, [r3, #12]
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff ff21 	bl	800131a <mavlink_start_checksum>
		break;
 80014d8:	e21a      	b.n	8001910 <mavlink_frame_char_buffer+0x500>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00f      	beq.n	8001502 <mavlink_frame_char_buffer+0xf2>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	3301      	adds	r3, #1
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 80014ee:	68b8      	ldr	r0, [r7, #8]
 80014f0:	f7ff fe24 	bl	800113c <_mav_parse_error>
			status->msg_received = 0;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2201      	movs	r2, #1
 80014fe:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8001500:	e20f      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
			rxmsg->len = c;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	2200      	movs	r2, #0
 800150c:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4619      	mov	r1, r3
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f7ff ff13 	bl	800133e <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	7b1b      	ldrb	r3, [r3, #12]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d009      	beq.n	8001538 <mavlink_frame_char_buffer+0x128>
                            rxmsg->incompat_flags = 0;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2200      	movs	r2, #0
 8001528:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2200      	movs	r2, #0
 800152e:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	2205      	movs	r2, #5
 8001534:	70da      	strb	r2, [r3, #3]
		break;
 8001536:	e1f4      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2203      	movs	r2, #3
 800153c:	70da      	strb	r2, [r3, #3]
		break;
 800153e:	e1f0      	b.n	8001922 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	79fa      	ldrb	r2, [r7, #7]
 8001544:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <mavlink_frame_char_buffer+0x156>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8001552:	68b8      	ldr	r0, [r7, #8]
 8001554:	f7ff fdf2 	bl	800113c <_mav_parse_error>
			status->msg_received = 0;
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2201      	movs	r2, #1
 8001562:	70da      	strb	r2, [r3, #3]
			break;
 8001564:	e1dd      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
		}
		mavlink_update_checksum(rxmsg, c);
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	4619      	mov	r1, r3
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f7ff fee7 	bl	800133e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2204      	movs	r2, #4
 8001574:	70da      	strb	r2, [r3, #3]
		break;
 8001576:	e1d4      	b.n	8001922 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	4619      	mov	r1, r3
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff fedb 	bl	800133e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2205      	movs	r2, #5
 800158c:	70da      	strb	r2, [r3, #3]
		break;
 800158e:	e1c8      	b.n	8001922 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	79fa      	ldrb	r2, [r7, #7]
 8001594:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	4619      	mov	r1, r3
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7ff fecf 	bl	800133e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2206      	movs	r2, #6
 80015a4:	70da      	strb	r2, [r3, #3]
		break;
 80015a6:	e1bc      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	4619      	mov	r1, r3
 80015b2:	68f8      	ldr	r0, [r7, #12]
 80015b4:	f7ff fec3 	bl	800133e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	2207      	movs	r2, #7
 80015bc:	70da      	strb	r2, [r3, #3]
		break;
 80015be:	e1b0      	b.n	8001922 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	79fa      	ldrb	r2, [r7, #7]
 80015c4:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	4619      	mov	r1, r3
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f7ff feb7 	bl	800133e <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	2208      	movs	r2, #8
 80015d4:	70da      	strb	r2, [r3, #3]
		break;
 80015d6:	e1a4      	b.n	8001922 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	b2d9      	uxtb	r1, r3
 80015e2:	2000      	movs	r0, #0
 80015e4:	4301      	orrs	r1, r0
 80015e6:	7251      	strb	r1, [r2, #9]
 80015e8:	0a19      	lsrs	r1, r3, #8
 80015ea:	b2c9      	uxtb	r1, r1
 80015ec:	2000      	movs	r0, #0
 80015ee:	4301      	orrs	r1, r0
 80015f0:	7291      	strb	r1, [r2, #10]
 80015f2:	0c1b      	lsrs	r3, r3, #16
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2100      	movs	r1, #0
 80015f8:	430b      	orrs	r3, r1
 80015fa:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	4619      	mov	r1, r3
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff fe9c 	bl	800133e <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	7b1b      	ldrb	r3, [r3, #12]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <mavlink_frame_char_buffer+0x21a>
			if(rxmsg->len > 0) {
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <mavlink_frame_char_buffer+0x212>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	220b      	movs	r2, #11
 800161e:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8001620:	e17f      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	220c      	movs	r2, #12
 8001626:	70da      	strb	r2, [r3, #3]
		break;
 8001628:	e17b      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	2209      	movs	r2, #9
 800162e:	70da      	strb	r2, [r3, #3]
		break;
 8001630:	e177      	b.n	8001922 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= c<<8;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	7a5a      	ldrb	r2, [r3, #9]
 8001636:	7a99      	ldrb	r1, [r3, #10]
 8001638:	0209      	lsls	r1, r1, #8
 800163a:	430a      	orrs	r2, r1
 800163c:	7adb      	ldrb	r3, [r3, #11]
 800163e:	041b      	lsls	r3, r3, #16
 8001640:	4313      	orrs	r3, r2
 8001642:	461a      	mov	r2, r3
 8001644:	79fb      	ldrb	r3, [r7, #7]
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	4313      	orrs	r3, r2
 800164a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	b2d1      	uxtb	r1, r2
 8001652:	2000      	movs	r0, #0
 8001654:	4301      	orrs	r1, r0
 8001656:	7259      	strb	r1, [r3, #9]
 8001658:	0a11      	lsrs	r1, r2, #8
 800165a:	b2c9      	uxtb	r1, r1
 800165c:	2000      	movs	r0, #0
 800165e:	4301      	orrs	r1, r0
 8001660:	7299      	strb	r1, [r3, #10]
 8001662:	0c12      	lsrs	r2, r2, #16
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	2100      	movs	r1, #0
 8001668:	430a      	orrs	r2, r1
 800166a:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	4619      	mov	r1, r3
 8001670:	68f8      	ldr	r0, [r7, #12]
 8001672:	f7ff fe64 	bl	800133e <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	220a      	movs	r2, #10
 800167a:	70da      	strb	r2, [r3, #3]
		break;
 800167c:	e151      	b.n	8001922 <mavlink_frame_char_buffer+0x512>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	7a5a      	ldrb	r2, [r3, #9]
 8001682:	7a99      	ldrb	r1, [r3, #10]
 8001684:	0209      	lsls	r1, r1, #8
 8001686:	430a      	orrs	r2, r1
 8001688:	7adb      	ldrb	r3, [r3, #11]
 800168a:	041b      	lsls	r3, r3, #16
 800168c:	4313      	orrs	r3, r2
 800168e:	461a      	mov	r2, r3
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	041b      	lsls	r3, r3, #16
 8001694:	4313      	orrs	r3, r2
 8001696:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	b2d1      	uxtb	r1, r2
 800169e:	2000      	movs	r0, #0
 80016a0:	4301      	orrs	r1, r0
 80016a2:	7259      	strb	r1, [r3, #9]
 80016a4:	0a11      	lsrs	r1, r2, #8
 80016a6:	b2c9      	uxtb	r1, r1
 80016a8:	2000      	movs	r0, #0
 80016aa:	4301      	orrs	r1, r0
 80016ac:	7299      	strb	r1, [r3, #10]
 80016ae:	0c12      	lsrs	r2, r2, #16
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	2100      	movs	r1, #0
 80016b4:	430a      	orrs	r2, r1
 80016b6:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4619      	mov	r1, r3
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7ff fe3e 	bl	800133e <mavlink_update_checksum>
		if(rxmsg->len > 0){
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	78db      	ldrb	r3, [r3, #3]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <mavlink_frame_char_buffer+0x2c2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	220b      	movs	r2, #11
 80016ce:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 80016d0:	e127      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	220c      	movs	r2, #12
 80016d6:	70da      	strb	r2, [r3, #3]
		break;
 80016d8:	e123      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f103 020c 	add.w	r2, r3, #12
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	791b      	ldrb	r3, [r3, #4]
 80016e4:	1c59      	adds	r1, r3, #1
 80016e6:	b2c8      	uxtb	r0, r1
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	7108      	strb	r0, [r1, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	79fa      	ldrb	r2, [r7, #7]
 80016f0:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4619      	mov	r1, r3
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff fe21 	bl	800133e <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	791a      	ldrb	r2, [r3, #4]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	78db      	ldrb	r3, [r3, #3]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8105 	bne.w	8001914 <mavlink_frame_char_buffer+0x504>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	220c      	movs	r2, #12
 800170e:	70da      	strb	r2, [r3, #3]
		}
		break;
 8001710:	e100      	b.n	8001914 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	7a5a      	ldrb	r2, [r3, #9]
 8001716:	7a99      	ldrb	r1, [r3, #10]
 8001718:	0209      	lsls	r1, r1, #8
 800171a:	430a      	orrs	r2, r1
 800171c:	7adb      	ldrb	r3, [r3, #11]
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	4313      	orrs	r3, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fe24 	bl	8001370 <mavlink_get_msg_entry>
 8001728:	6178      	str	r0, [r7, #20]
		uint8_t crc_extra = e?e->crc_extra:0;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d002      	beq.n	8001736 <mavlink_frame_char_buffer+0x326>
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	791b      	ldrb	r3, [r3, #4]
 8001734:	e000      	b.n	8001738 <mavlink_frame_char_buffer+0x328>
 8001736:	2300      	movs	r3, #0
 8001738:	74fb      	strb	r3, [r7, #19]
		mavlink_update_checksum(rxmsg, crc_extra);
 800173a:	7cfb      	ldrb	r3, [r7, #19]
 800173c:	4619      	mov	r1, r3
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f7ff fdfd 	bl	800133e <mavlink_update_checksum>
		if (c != (rxmsg->checksum & 0xFF)) {
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	429a      	cmp	r2, r3
 8001750:	d003      	beq.n	800175a <mavlink_frame_char_buffer+0x34a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	220e      	movs	r2, #14
 8001756:	70da      	strb	r2, [r3, #3]
 8001758:	e002      	b.n	8001760 <mavlink_frame_char_buffer+0x350>
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	220d      	movs	r2, #13
 800175e:	70da      	strb	r2, [r3, #3]
		}
                rxmsg->ck[0] = c;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	79fa      	ldrb	r2, [r7, #7]
 8001764:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114

		// zero-fill the packet to cope with short incoming packets
                if (e && status->packet_idx < e->max_msg_len) {
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 80d4 	beq.w	8001918 <mavlink_frame_char_buffer+0x508>
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	791a      	ldrb	r2, [r3, #4]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	799b      	ldrb	r3, [r3, #6]
 8001778:	429a      	cmp	r2, r3
 800177a:	f080 80cd 	bcs.w	8001918 <mavlink_frame_char_buffer+0x508>
                        memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	330c      	adds	r3, #12
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	7912      	ldrb	r2, [r2, #4]
 8001786:	1898      	adds	r0, r3, r2
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	799b      	ldrb	r3, [r3, #6]
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	791b      	ldrb	r3, [r3, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	461a      	mov	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	f007 fbf1 	bl	8008f7e <memset>
		}
		break;
 800179c:	e0bc      	b.n	8001918 <mavlink_frame_char_buffer+0x508>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	78db      	ldrb	r3, [r3, #3]
 80017a2:	2b0e      	cmp	r3, #14
 80017a4:	d007      	beq.n	80017b6 <mavlink_frame_char_buffer+0x3a6>
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	8812      	ldrh	r2, [r2, #0]
 80017ac:	b292      	uxth	r2, r2
 80017ae:	0a12      	lsrs	r2, r2, #8
 80017b0:	b292      	uxth	r2, r2
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d003      	beq.n	80017be <mavlink_frame_char_buffer+0x3ae>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	e002      	b.n	80017c4 <mavlink_frame_char_buffer+0x3b4>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2201      	movs	r2, #1
 80017c2:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	791b      	ldrb	r3, [r3, #4]
 80017d0:	f003 0301 	and.w	r3, r3, #1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <mavlink_frame_char_buffer+0x3e6>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	220f      	movs	r2, #15
 80017dc:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	220d      	movs	r2, #13
 80017e2:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	f000 8097 	beq.w	800191c <mavlink_frame_char_buffer+0x50c>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 80017f4:	e092      	b.n	800191c <mavlink_frame_char_buffer+0x50c>
			if (status->signing &&
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01a      	beq.n	8001834 <mavlink_frame_char_buffer+0x424>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (status->signing &&
 8001804:	2b00      	cmp	r3, #0
 8001806:	d013      	beq.n	8001830 <mavlink_frame_char_buffer+0x420>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	7a59      	ldrb	r1, [r3, #9]
 8001812:	7a98      	ldrb	r0, [r3, #10]
 8001814:	0200      	lsls	r0, r0, #8
 8001816:	4301      	orrs	r1, r0
 8001818:	7adb      	ldrb	r3, [r3, #11]
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	430b      	orrs	r3, r1
 800181e:	4619      	mov	r1, r3
 8001820:	68b8      	ldr	r0, [r7, #8]
 8001822:	4790      	blx	r2
 8001824:	4603      	mov	r3, r0
 8001826:	f083 0301 	eor.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <mavlink_frame_char_buffer+0x424>
			if (status->signing &&
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <mavlink_frame_char_buffer+0x426>
 8001834:	2300      	movs	r3, #0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d006      	beq.n	8001848 <mavlink_frame_char_buffer+0x438>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d002      	beq.n	8001848 <mavlink_frame_char_buffer+0x438>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2203      	movs	r2, #3
 8001846:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2201      	movs	r2, #1
 800184c:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d063      	beq.n	800191c <mavlink_frame_char_buffer+0x50c>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001854:	f240 1223 	movw	r2, #291	; 0x123
 8001858:	68f9      	ldr	r1, [r7, #12]
 800185a:	6838      	ldr	r0, [r7, #0]
 800185c:	f007 fb82 	bl	8008f64 <memcpy>
		break;
 8001860:	e05c      	b.n	800191c <mavlink_frame_char_buffer+0x50c>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	7b5b      	ldrb	r3, [r3, #13]
 8001866:	f1c3 030d 	rsb	r3, r3, #13
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4413      	add	r3, r2
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	f883 2116 	strb.w	r2, [r3, #278]	; 0x116
		status->signature_wait--;
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	7b5b      	ldrb	r3, [r3, #13]
 8001878:	3b01      	subs	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	7b5b      	ldrb	r3, [r3, #13]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d14b      	bne.n	8001920 <mavlink_frame_char_buffer+0x510>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6918      	ldr	r0, [r3, #16]
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	695b      	ldr	r3, [r3, #20]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff fb1a 	bl	8000ecc <mavlink_signature_check>
 8001898:	4603      	mov	r3, r0
 800189a:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 800189c:	7ffb      	ldrb	r3, [r7, #31]
 800189e:	f083 0301 	eor.w	r3, r3, #1
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d017      	beq.n	80018d8 <mavlink_frame_char_buffer+0x4c8>
			   	(status->signing->accept_unsigned_callback &&
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			if (!sig_ok &&
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d012      	beq.n	80018d8 <mavlink_frame_char_buffer+0x4c8>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	7a59      	ldrb	r1, [r3, #9]
 80018bc:	7a98      	ldrb	r0, [r3, #10]
 80018be:	0200      	lsls	r0, r0, #8
 80018c0:	4301      	orrs	r1, r0
 80018c2:	7adb      	ldrb	r3, [r3, #11]
 80018c4:	041b      	lsls	r3, r3, #16
 80018c6:	430b      	orrs	r3, r1
 80018c8:	4619      	mov	r1, r3
 80018ca:	68b8      	ldr	r0, [r7, #8]
 80018cc:	4790      	blx	r2
 80018ce:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <mavlink_frame_char_buffer+0x4c8>
			if (!sig_ok &&
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <mavlink_frame_char_buffer+0x4ca>
 80018d8:	2300      	movs	r3, #0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <mavlink_frame_char_buffer+0x4d2>
				// accepted via application level override
				sig_ok = true;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 80018e2:	7ffb      	ldrb	r3, [r7, #31]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <mavlink_frame_char_buffer+0x4e0>
				status->msg_received = MAVLINK_FRAMING_OK;
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2201      	movs	r2, #1
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e002      	b.n	80018f6 <mavlink_frame_char_buffer+0x4e6>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2203      	movs	r2, #3
 80018f4:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	2201      	movs	r2, #1
 80018fa:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d00e      	beq.n	8001920 <mavlink_frame_char_buffer+0x510>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8001902:	f240 1223 	movw	r2, #291	; 0x123
 8001906:	68f9      	ldr	r1, [r7, #12]
 8001908:	6838      	ldr	r0, [r7, #0]
 800190a:	f007 fb2b 	bl	8008f64 <memcpy>
			}
		}
		break;
 800190e:	e007      	b.n	8001920 <mavlink_frame_char_buffer+0x510>
		break;
 8001910:	bf00      	nop
 8001912:	e006      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
		break;
 8001914:	bf00      	nop
 8001916:	e004      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
		break;
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
		break;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <mavlink_frame_char_buffer+0x512>
		break;
 8001920:	bf00      	nop
	}

	bufferIndex++;
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	3301      	adds	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d110      	bne.n	8001952 <mavlink_frame_char_buffer+0x542>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	799a      	ldrb	r2, [r3, #6]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	891b      	ldrh	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <mavlink_frame_char_buffer+0x536>
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	2200      	movs	r2, #0
 8001944:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	891b      	ldrh	r3, [r3, #8]
 800194a:	3301      	adds	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <mavlink_frame_char_buffer+0x550>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	78da      	ldrb	r2, [r3, #3]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8001960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01a      	beq.n	800199c <mavlink_frame_char_buffer+0x58c>
           r_mavlink_status->parse_state = status->parse_state;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	78da      	ldrb	r2, [r3, #3]
 800196a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196c:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	791a      	ldrb	r2, [r3, #4]
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	795b      	ldrb	r3, [r3, #5]
 800197a:	3301      	adds	r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001980:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	891a      	ldrh	r2, [r3, #8]
 8001986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001988:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	789b      	ldrb	r3, [r3, #2]
 800198e:	b29a      	uxth	r2, r3
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	7b1a      	ldrb	r2, [r3, #12]
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	2200      	movs	r2, #0
 80019a0:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d110      	bne.n	80019cc <mavlink_frame_char_buffer+0x5bc>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00d      	beq.n	80019cc <mavlink_frame_char_buffer+0x5bc>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b21b      	sxth	r3, r3
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	781b      	ldrb	r3, [r3, #0]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3720      	adds	r7, #32
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 80019d8:	b590      	push	{r4, r7, lr}
 80019da:	b087      	sub	sp, #28
 80019dc:	af02      	add	r7, sp, #8
 80019de:	60ba      	str	r2, [r7, #8]
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	4603      	mov	r3, r0
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	460b      	mov	r3, r1
 80019e8:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fa2d 	bl	8000e4c <mavlink_get_channel_buffer>
 80019f2:	4604      	mov	r4, r0
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fa14 	bl	8000e24 <mavlink_get_channel_status>
 80019fc:	4601      	mov	r1, r0
 80019fe:	7bba      	ldrb	r2, [r7, #14]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff fd02 	bl	8001410 <mavlink_frame_char_buffer>
 8001a0c:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3714      	adds	r7, #20
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}

08001a16 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b088      	sub	sp, #32
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	4603      	mov	r3, r0
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	460b      	mov	r3, r1
 8001a26:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8001a28:	7bb9      	ldrb	r1, [r7, #14]
 8001a2a:	7bf8      	ldrb	r0, [r7, #15]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f7ff ffd2 	bl	80019d8 <mavlink_frame_char>
 8001a34:	4603      	mov	r3, r0
 8001a36:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8001a38:	7ffb      	ldrb	r3, [r7, #31]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d002      	beq.n	8001a44 <mavlink_parse_char+0x2e>
 8001a3e:	7ffb      	ldrb	r3, [r7, #31]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d120      	bne.n	8001a86 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa00 	bl	8000e4c <mavlink_get_channel_buffer>
 8001a4c:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f9e7 	bl	8000e24 <mavlink_get_channel_status>
 8001a56:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 8001a58:	6978      	ldr	r0, [r7, #20]
 8001a5a:	f7ff fb6f 	bl	800113c <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2200      	movs	r2, #0
 8001a62:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2201      	movs	r2, #1
 8001a68:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8001a6a:	7bbb      	ldrb	r3, [r7, #14]
 8001a6c:	2bfd      	cmp	r3, #253	; 0xfd
 8001a6e:	d108      	bne.n	8001a82 <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2202      	movs	r2, #2
 8001a74:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8001a7c:	69b8      	ldr	r0, [r7, #24]
 8001a7e:	f7ff fc4c 	bl	800131a <mavlink_start_checksum>
	    }
	    return 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <mavlink_parse_char+0x72>
    }
    return msg_received;
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef>:
 *
 */

#include "../Inc/SSM_D_MAVLink.hpp"

MAVLink::MAVLink(UART_HandleTypeDef* uart_handle) : uart_(uart_handle)
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
{

    rx_circular_buffer_ = new CircularBuffer(rx_circular_buffer_ptr_, 1000);
 8001aa2:	2010      	movs	r0, #16
 8001aa4:	f007 f9f2 	bl	8008e8c <_Znwj>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461c      	mov	r4, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7fe fdcb 	bl	8000650 <_ZN14CircularBufferC1EPhi>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f8c3 43e8 	str.w	r4, [r3, #1000]	; 0x3e8

    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8001aca:	da07      	bge.n	8001adc <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x4c>
        raw_rx_msg_[MAVLINK_MAX_PACKET_LEN] = 0;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2504 	strb.w	r2, [r3, #1284]	; 0x504
    for(int i = 0; i < MAVLINK_MAX_PACKET_LEN; i++){
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	e7f3      	b.n	8001ac4 <_ZN7MAVLinkC1EP20__UART_HandleTypeDef+0x34>
    }
}
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}

08001ae6 <_ZN7MAVLinkD1Ev>:

MAVLink::~MAVLink(){
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
    delete rx_circular_buffer_;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <_ZN7MAVLinkD1Ev+0x1a>
 8001af8:	2110      	movs	r1, #16
 8001afa:	4618      	mov	r0, r3
 8001afc:	f007 f9c4 	bl	8008e88 <_ZdlPvj>
}
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_ZN7MAVLink11readMessageER17__mavlink_message>:

bool MAVLink::readMessage(mavlink_message_t& message)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b0d2      	sub	sp, #328	; 0x148
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b14:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b18:	6018      	str	r0, [r3, #0]
 8001b1a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b1e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001b22:	6019      	str	r1, [r3, #0]
    //if Data Reception process is not ongoing, then activate it
    if(uart_->RxState != HAL_UART_STATE_BUSY_RX){
 8001b24:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b28:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8001b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b36:	2b22      	cmp	r3, #34	; 0x22
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <_ZN7MAVLink11readMessageER17__mavlink_message+0x60>
    	HAL_UARTEx_ReceiveToIdle_DMA(uart_, raw_rx_msg_, sizeof(raw_rx_msg_));
 8001b44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b48:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8001b52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001b60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b64:	4619      	mov	r1, r3
 8001b66:	f006 fef9 	bl	800895c <HAL_UARTEx_ReceiveToIdle_DMA>
    }

    uint8_t byte = 0;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
	mavlink_status_t status = {};
 8001b70:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
 8001b80:	615a      	str	r2, [r3, #20]
    mavlink_message_t rx_msg;

    while(rx_circular_buffer_->read(&byte, 1)){
 8001b82:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001b86:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f8d3 33e8 	ldr.w	r3, [r3, #1000]	; 0x3e8
 8001b90:	f207 1147 	addw	r1, r7, #327	; 0x147
 8001b94:	2201      	movs	r2, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fcdc 	bl	8000554 <_ZN14CircularBuffer4readEPhi>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	bf14      	ite	ne
 8001ba2:	2301      	movne	r3, #1
 8001ba4:	2300      	moveq	r3, #0
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d025      	beq.n	8001bf8 <_ZN7MAVLink11readMessageER17__mavlink_message+0xee>
        if( mavlink_parse_char(MAVLINK_COMM_1, byte, &(rx_msg), &status)){
 8001bac:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 8001bb0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001bb4:	f107 0208 	add.w	r2, r7, #8
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f7ff ff2c 	bl	8001a16 <mavlink_parse_char>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	bf14      	ite	ne
 8001bc4:	2301      	movne	r3, #1
 8001bc6:	2300      	moveq	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0d9      	beq.n	8001b82 <_ZN7MAVLink11readMessageER17__mavlink_message+0x78>
            mavlink_reset_channel_status(MAVLINK_COMM_1);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff f950 	bl	8000e74 <mavlink_reset_channel_status>
            message = rx_msg;
 8001bd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001bd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8001be2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f240 1323 	movw	r3, #291	; 0x123
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f007 f9b8 	bl	8008f64 <memcpy>

            return true;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e000      	b.n	8001bfa <_ZN7MAVLink11readMessageER17__mavlink_message+0xf0>
        }
    }
    return false;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_ZN7MAVLink12writeMessageE17__mavlink_message>:

void MAVLink::writeMessage(const mavlink_message_t output_message){
 8001c04:	b084      	sub	sp, #16
 8001c06:	b590      	push	{r4, r7, lr}
 8001c08:	b0cb      	sub	sp, #300	; 0x12c
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001c10:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8001c14:	6020      	str	r0, [r4, #0]
 8001c16:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8001c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];
    uint16_t len = mavlink_msg_to_send_buffer(buf, &output_message);
 8001c1e:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8001c22:	f107 030c 	add.w	r3, r7, #12
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff fa97 	bl	800115c <mavlink_msg_to_send_buffer>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	HAL_StatusTypeDef ret = HAL_UART_Transmit(uart_, buf, len, 1000);
 8001c34:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001c38:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8d3 05e0 	ldr.w	r0, [r3, #1504]	; 0x5e0
 8001c42:	f8b7 2126 	ldrh.w	r2, [r7, #294]	; 0x126
 8001c46:	f107 010c 	add.w	r1, r7, #12
 8001c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c4e:	f005 f9d3 	bl	8006ff8 <HAL_UART_Transmit>
 8001c52:	4603      	mov	r3, r0
 8001c54:	f887 3125 	strb.w	r3, [r7, #293]	; 0x125
}
 8001c58:	bf00      	nop
 8001c5a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001c64:	b004      	add	sp, #16
 8001c66:	4770      	bx	lr

08001c68 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c8a:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001c8c:	4a2f      	ldr	r2, [pc, #188]	; (8001d4c <MX_ADC1_Init+0xe4>)
 8001c8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001c90:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c9c:	4b2a      	ldr	r3, [pc, #168]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001caa:	2204      	movs	r2, #4
 8001cac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001cb4:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001cc0:	4b21      	ldr	r3, [pc, #132]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001ce2:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001cea:	4817      	ldr	r0, [pc, #92]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001cec:	f001 fbf0 	bl	80034d0 <HAL_ADC_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001cf6:	f000 fbef 	bl	80024d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001cfe:	f107 031c 	add.w	r3, r7, #28
 8001d02:	4619      	mov	r1, r3
 8001d04:	4810      	ldr	r0, [pc, #64]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001d06:	f002 f93f 	bl	8003f88 <HAL_ADCEx_MultiModeConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001d10:	f000 fbe2 	bl	80024d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_ADC1_Init+0xe8>)
 8001d16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d18:	2306      	movs	r3, #6
 8001d1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d20:	237f      	movs	r3, #127	; 0x7f
 8001d22:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d24:	2304      	movs	r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4805      	ldr	r0, [pc, #20]	; (8001d48 <MX_ADC1_Init+0xe0>)
 8001d32:	f001 fd19 	bl	8003768 <HAL_ADC_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001d3c:	f000 fbcc 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d40:	bf00      	nop
 8001d42:	3728      	adds	r7, #40	; 0x28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20001148 	.word	0x20001148
 8001d4c:	42028000 	.word	0x42028000
 8001d50:	0c900008 	.word	0x0c900008

08001d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0ae      	sub	sp, #184	; 0xb8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6c:	f107 0310 	add.w	r3, r7, #16
 8001d70:	2294      	movs	r2, #148	; 0x94
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f007 f902 	bl	8008f7e <memset>
  if(adcHandle->Instance==ADC1)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a1f      	ldr	r2, [pc, #124]	; (8001dfc <HAL_ADC_MspInit+0xa8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d137      	bne.n	8001df4 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d88:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001d8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001d8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4618      	mov	r0, r3
 8001d98:	f004 fa8e 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001da2:	f000 fb99 	bl	80024d8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001da6:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_ADC_MspInit+0xac>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <HAL_ADC_MspInit+0xac>)
 8001dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <HAL_ADC_MspInit+0xac>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dbe:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <HAL_ADC_MspInit+0xac>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_ADC_MspInit+0xac>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_ADC_MspInit+0xac>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001de8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dec:	4619      	mov	r1, r3
 8001dee:	4805      	ldr	r0, [pc, #20]	; (8001e04 <HAL_ADC_MspInit+0xb0>)
 8001df0:	f002 fe38 	bl	8004a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001df4:	bf00      	nop
 8001df6:	37b8      	adds	r7, #184	; 0xb8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	42028000 	.word	0x42028000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	42020800 	.word	0x42020800

08001e08 <HAL_UARTEx_RxEventCallback>:

#include "SSM_D_MAVLink.hpp"
#include "CommonDataTypes.hpp"

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size){
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
    

    if(huart == drone_mavlink_uart){
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a32      	ldr	r2, [pc, #200]	; (8001ee0 <HAL_UARTEx_RxEventCallback+0xd8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d12c      	bne.n	8001e76 <HAL_UARTEx_RxEventCallback+0x6e>

        for (uint16_t i = 0; i < size; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	81fb      	strh	r3, [r7, #14]
 8001e20:	89fa      	ldrh	r2, [r7, #14]
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d210      	bcs.n	8001e4a <HAL_UARTEx_RxEventCallback+0x42>
        {
            drone_mavlink->rx_circular_buffer_->write(drone_mavlink->raw_rx_msg_[i]);
 8001e28:	4b2e      	ldr	r3, [pc, #184]	; (8001ee4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8001e30:	4b2c      	ldr	r3, [pc, #176]	; (8001ee4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	4413      	add	r3, r2
 8001e38:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fc20 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	3301      	adds	r3, #1
 8001e46:	81fb      	strh	r3, [r7, #14]
 8001e48:	e7ea      	b.n	8001e20 <HAL_UARTEx_RxEventCallback+0x18>
        }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, drone_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 8001e4a:	4b26      	ldr	r3, [pc, #152]	; (8001ee4 <HAL_UARTEx_RxEventCallback+0xdc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001e52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f006 fd7f 	bl	800895c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0204 	bic.w	r2, r2, #4
 8001e74:	601a      	str	r2, [r3, #0]
    }

    if(huart == antenna_mavlink_uart){
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_UARTEx_RxEventCallback+0xe0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12c      	bne.n	8001ed8 <HAL_UARTEx_RxEventCallback+0xd0>
        for (uint16_t i = 0; i < size; i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	81bb      	strh	r3, [r7, #12]
 8001e82:	89ba      	ldrh	r2, [r7, #12]
 8001e84:	887b      	ldrh	r3, [r7, #2]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d210      	bcs.n	8001eac <HAL_UARTEx_RxEventCallback+0xa4>
        {
            antenna_mavlink->rx_circular_buffer_->write(antenna_mavlink->raw_rx_msg_[i]);
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_UARTEx_RxEventCallback+0xe4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8001e92:	4b16      	ldr	r3, [pc, #88]	; (8001eec <HAL_UARTEx_RxEventCallback+0xe4>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	89bb      	ldrh	r3, [r7, #12]
 8001e98:	4413      	add	r3, r2
 8001e9a:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	f7fe fbef 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < size; i++)
 8001ea4:	89bb      	ldrh	r3, [r7, #12]
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	81bb      	strh	r3, [r7, #12]
 8001eaa:	e7ea      	b.n	8001e82 <HAL_UARTEx_RxEventCallback+0x7a>
        }
        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 8001eac:	4b0f      	ldr	r3, [pc, #60]	; (8001eec <HAL_UARTEx_RxEventCallback+0xe4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001eb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001eb8:	4619      	mov	r1, r3
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f006 fd4e 	bl	800895c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0204 	bic.w	r2, r2, #4
 8001ed6:	601a      	str	r2, [r3, #0]
    }
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200013ec 	.word	0x200013ec
 8001ee4:	20000000 	.word	0x20000000
 8001ee8:	20001358 	.word	0x20001358
 8001eec:	20000004 	.word	0x20000004

08001ef0 <HAL_UART_RxCpltCallback>:



 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
 {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    if(huart == drone_mavlink_uart){
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <HAL_UART_RxCpltCallback+0xd4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d12c      	bne.n	8001f5a <HAL_UART_RxCpltCallback+0x6a>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	81fb      	strh	r3, [r7, #14]
 8001f04:	89fb      	ldrh	r3, [r7, #14]
 8001f06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f0a:	d210      	bcs.n	8001f2e <HAL_UART_RxCpltCallback+0x3e>
        {
            antenna_mavlink->rx_circular_buffer_->write(antenna_mavlink->raw_rx_msg_[i]);
 8001f0c:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8001f14:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	89fb      	ldrh	r3, [r7, #14]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8001f20:	4619      	mov	r1, r3
 8001f22:	f7fe fbae 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 8001f26:	89fb      	ldrh	r3, [r7, #14]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	81fb      	strh	r3, [r7, #14]
 8001f2c:	e7ea      	b.n	8001f04 <HAL_UART_RxCpltCallback+0x14>
        }

        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001f36:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f006 fd0d 	bl	800895c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0204 	bic.w	r2, r2, #4
 8001f58:	601a      	str	r2, [r3, #0]
    }

    if(huart == antenna_mavlink_uart){
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_UART_RxCpltCallback+0xdc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12c      	bne.n	8001fbc <HAL_UART_RxCpltCallback+0xcc>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	81bb      	strh	r3, [r7, #12]
 8001f66:	89bb      	ldrh	r3, [r7, #12]
 8001f68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f6c:	d210      	bcs.n	8001f90 <HAL_UART_RxCpltCallback+0xa0>
        {
            antenna_mavlink->rx_circular_buffer_->write(antenna_mavlink->raw_rx_msg_[i]);
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f8d3 03e8 	ldr.w	r0, [r3, #1000]	; 0x3e8
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	89bb      	ldrh	r3, [r7, #12]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	f893 33ec 	ldrb.w	r3, [r3, #1004]	; 0x3ec
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fb7d 	bl	8000682 <_ZN14CircularBuffer5writeEh>
        for (uint16_t i = 0; i < sizeof(drone_mavlink->raw_rx_msg_); i++)
 8001f88:	89bb      	ldrh	r3, [r7, #12]
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	81bb      	strh	r3, [r7, #12]
 8001f8e:	e7ea      	b.n	8001f66 <HAL_UART_RxCpltCallback+0x76>
        }

        //listen to more data
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, sizeof(drone_mavlink->raw_rx_msg_));
 8001f90:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <HAL_UART_RxCpltCallback+0xd8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001f98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f006 fcdc 	bl	800895c <HAL_UARTEx_ReceiveToIdle_DMA>
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0204 	bic.w	r2, r2, #4
 8001fba:	601a      	str	r2, [r3, #0]
    }

 }
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200013ec 	.word	0x200013ec
 8001fc8:	20000004 	.word	0x20000004
 8001fcc:	20001358 	.word	0x20001358

08001fd0 <HAL_UART_ErrorCallback>:

 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
    if(huart == drone_mavlink_uart){
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <HAL_UART_ErrorCallback+0x54>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d10c      	bne.n	8001ffa <HAL_UART_ErrorCallback+0x2a>
        HAL_UART_DMAStop(huart);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f005 f8e3 	bl	80071ac <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, drone_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_UART_ErrorCallback+0x58>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8001fee:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f006 fcb1 	bl	800895c <HAL_UARTEx_ReceiveToIdle_DMA>
    }
    if(huart == antenna_mavlink_uart){
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a0b      	ldr	r2, [pc, #44]	; (800202c <HAL_UART_ErrorCallback+0x5c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d10c      	bne.n	800201c <HAL_UART_ErrorCallback+0x4c>
        HAL_UART_DMAStop(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f005 f8d2 	bl	80071ac <HAL_UART_DMAStop>
        HAL_UARTEx_ReceiveToIdle_DMA(huart, antenna_mavlink->raw_rx_msg_, MAVLINK_MAX_PACKET_LEN);
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_UART_ErrorCallback+0x60>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 8002010:	f44f 728c 	mov.w	r2, #280	; 0x118
 8002014:	4619      	mov	r1, r3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f006 fca0 	bl	800895c <HAL_UARTEx_ReceiveToIdle_DMA>
    }

 }
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200013ec 	.word	0x200013ec
 8002028:	20000000 	.word	0x20000000
 800202c:	20001358 	.word	0x20001358
 8002030:	20000004 	.word	0x20000004

08002034 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_DMA_Init+0x50>)
 800203c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203e:	4a11      	ldr	r2, [pc, #68]	; (8002084 <MX_DMA_Init+0x50>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6493      	str	r3, [r2, #72]	; 0x48
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_DMA_Init+0x50>)
 8002048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_DMA_Init+0x50>)
 8002054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002056:	4a0b      	ldr	r2, [pc, #44]	; (8002084 <MX_DMA_Init+0x50>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6493      	str	r3, [r2, #72]	; 0x48
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_DMA_Init+0x50>)
 8002060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	201d      	movs	r0, #29
 8002070:	f002 f909 	bl	8004286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002074:	201d      	movs	r0, #29
 8002076:	f002 f920 	bl	80042ba <HAL_NVIC_EnableIRQ>

}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000

08002088 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	; 0x30
 800208c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
 800209c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <MX_GPIO_Init+0x144>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <MX_GPIO_Init+0x144>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020aa:	4b48      	ldr	r3, [pc, #288]	; (80021cc <MX_GPIO_Init+0x144>)
 80020ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b6:	4b45      	ldr	r3, [pc, #276]	; (80021cc <MX_GPIO_Init+0x144>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a44      	ldr	r2, [pc, #272]	; (80021cc <MX_GPIO_Init+0x144>)
 80020bc:	f043 0320 	orr.w	r3, r3, #32
 80020c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c2:	4b42      	ldr	r3, [pc, #264]	; (80021cc <MX_GPIO_Init+0x144>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <MX_GPIO_Init+0x144>)
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <MX_GPIO_Init+0x144>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020da:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <MX_GPIO_Init+0x144>)
 80020dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <MX_GPIO_Init+0x144>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ea:	4a38      	ldr	r2, [pc, #224]	; (80021cc <MX_GPIO_Init+0x144>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020f2:	4b36      	ldr	r3, [pc, #216]	; (80021cc <MX_GPIO_Init+0x144>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020fe:	4b33      	ldr	r3, [pc, #204]	; (80021cc <MX_GPIO_Init+0x144>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002102:	4a32      	ldr	r2, [pc, #200]	; (80021cc <MX_GPIO_Init+0x144>)
 8002104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002108:	64d3      	str	r3, [r2, #76]	; 0x4c
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <MX_GPIO_Init+0x144>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8002116:	f003 f8e1 	bl	80052dc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800211a:	4b2c      	ldr	r3, [pc, #176]	; (80021cc <MX_GPIO_Init+0x144>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211e:	4a2b      	ldr	r2, [pc, #172]	; (80021cc <MX_GPIO_Init+0x144>)
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <MX_GPIO_Init+0x144>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8002132:	2200      	movs	r2, #0
 8002134:	2180      	movs	r1, #128	; 0x80
 8002136:	4826      	ldr	r0, [pc, #152]	; (80021d0 <MX_GPIO_Init+0x148>)
 8002138:	f002 fe14 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800213c:	2200      	movs	r2, #0
 800213e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002142:	4824      	ldr	r0, [pc, #144]	; (80021d4 <MX_GPIO_Init+0x14c>)
 8002144:	f002 fe0e 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	21a0      	movs	r1, #160	; 0xa0
 800214c:	4822      	ldr	r0, [pc, #136]	; (80021d8 <MX_GPIO_Init+0x150>)
 800214e:	f002 fe09 	bl	8004d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8002152:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002156:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002158:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800215c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8002162:	f107 031c 	add.w	r3, r7, #28
 8002166:	4619      	mov	r1, r3
 8002168:	481b      	ldr	r0, [pc, #108]	; (80021d8 <MX_GPIO_Init+0x150>)
 800216a:	f002 fc7b 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2300      	movs	r3, #0
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4812      	ldr	r0, [pc, #72]	; (80021d0 <MX_GPIO_Init+0x148>)
 8002186:	f002 fc6d 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800218a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800218e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002190:	2301      	movs	r3, #1
 8002192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002198:	2300      	movs	r3, #0
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	4619      	mov	r1, r3
 80021a2:	480c      	ldr	r0, [pc, #48]	; (80021d4 <MX_GPIO_Init+0x14c>)
 80021a4:	f002 fc5e 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 80021a8:	23a0      	movs	r3, #160	; 0xa0
 80021aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ac:	2301      	movs	r3, #1
 80021ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4806      	ldr	r0, [pc, #24]	; (80021d8 <MX_GPIO_Init+0x150>)
 80021c0:	f002 fc50 	bl	8004a64 <HAL_GPIO_Init>

}
 80021c4:	bf00      	nop
 80021c6:	3730      	adds	r7, #48	; 0x30
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	42020800 	.word	0x42020800
 80021d4:	42020000 	.word	0x42020000
 80021d8:	42020400 	.word	0x42020400

080021dc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <MX_I2C2_Init+0x74>)
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <MX_I2C2_Init+0x78>)
 80021e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x40505681;
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <MX_I2C2_Init+0x74>)
 80021e8:	4a1b      	ldr	r2, [pc, #108]	; (8002258 <MX_I2C2_Init+0x7c>)
 80021ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <MX_I2C2_Init+0x74>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021f2:	4b17      	ldr	r3, [pc, #92]	; (8002250 <MX_I2C2_Init+0x74>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <MX_I2C2_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <MX_I2C2_Init+0x74>)
 8002200:	2200      	movs	r2, #0
 8002202:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <MX_I2C2_Init+0x74>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <MX_I2C2_Init+0x74>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <MX_I2C2_Init+0x74>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002216:	480e      	ldr	r0, [pc, #56]	; (8002250 <MX_I2C2_Init+0x74>)
 8002218:	f002 fdbc 	bl	8004d94 <HAL_I2C_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002222:	f000 f959 	bl	80024d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002226:	2100      	movs	r1, #0
 8002228:	4809      	ldr	r0, [pc, #36]	; (8002250 <MX_I2C2_Init+0x74>)
 800222a:	f002 fe42 	bl	8004eb2 <HAL_I2CEx_ConfigAnalogFilter>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002234:	f000 f950 	bl	80024d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002238:	2100      	movs	r1, #0
 800223a:	4805      	ldr	r0, [pc, #20]	; (8002250 <MX_I2C2_Init+0x74>)
 800223c:	f002 fe84 	bl	8004f48 <HAL_I2CEx_ConfigDigitalFilter>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002246:	f000 f947 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	200011b0 	.word	0x200011b0
 8002254:	40005800 	.word	0x40005800
 8002258:	40505681 	.word	0x40505681

0800225c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0ae      	sub	sp, #184	; 0xb8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	2294      	movs	r2, #148	; 0x94
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f006 fe7e 	bl	8008f7e <memset>
  if(i2cHandle->Instance==I2C2)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a21      	ldr	r2, [pc, #132]	; (800230c <HAL_I2C_MspInit+0xb0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d13a      	bne.n	8002302 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002290:	2300      	movs	r3, #0
 8002292:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4618      	mov	r0, r3
 800229a:	f004 f80d 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80022a4:	f000 f918 	bl	80024d8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_I2C_MspInit+0xb4>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_I2C_MspInit+0xb4>)
 80022ae:	f043 0320 	orr.w	r3, r3, #32
 80022b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_I2C_MspInit+0xb4>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022c0:	2303      	movs	r3, #3
 80022c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022c6:	2312      	movs	r3, #18
 80022c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022d8:	2304      	movs	r3, #4
 80022da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022de:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022e2:	4619      	mov	r1, r3
 80022e4:	480b      	ldr	r0, [pc, #44]	; (8002314 <HAL_I2C_MspInit+0xb8>)
 80022e6:	f002 fbbd 	bl	8004a64 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_I2C_MspInit+0xb4>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_I2C_MspInit+0xb4>)
 80022f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_I2C_MspInit+0xb4>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002302:	bf00      	nop
 8002304:	37b8      	adds	r7, #184	; 0xb8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40005800 	.word	0x40005800
 8002310:	40021000 	.word	0x40021000
 8002314:	42021400 	.word	0x42021400

08002318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 800231e:	af46      	add	r7, sp, #280	; 0x118
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002320:	f000 febf 	bl	80030a2 <HAL_Init>
  /* USER CODE BEGIN Init */
  uint8_t rx_raw[100];
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002324:	f000 f868 	bl	80023f8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002328:	f7ff feae 	bl	8002088 <MX_GPIO_Init>
  MX_DMA_Init();
 800232c:	f7ff fe82 	bl	8002034 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002330:	f000 fb40 	bl	80029b4 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 8002334:	f000 f8d6 	bl	80024e4 <MX_RTC_Init>
  MX_UCPD1_Init();
 8002338:	f000 fb06 	bl	8002948 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800233c:	f000 fe00 	bl	8002f40 <MX_USB_PCD_Init>
  MX_UART5_Init();
 8002340:	f000 fb86 	bl	8002a50 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8002344:	f000 fbd0 	bl	8002ae8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002348:	f000 fc1a 	bl	8002b80 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800234c:	f7ff fc8c 	bl	8001c68 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002350:	f7ff ff44 	bl	80021dc <MX_I2C2_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	mavlink_message_t upstreamMessage;
	bool upmessageRead = drone_mavlink->readMessage(upstreamMessage);
 8002354:	4b25      	ldr	r3, [pc, #148]	; (80023ec <main+0xd4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	463a      	mov	r2, r7
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fbd4 	bl	8001b0a <_ZN7MAVLink11readMessageER17__mavlink_message>
 8002362:	4603      	mov	r3, r0
 8002364:	f887 32af 	strb.w	r3, [r7, #687]	; 0x2af
	if(upmessageRead){
 8002368:	f897 32af 	ldrb.w	r3, [r7, #687]	; 0x2af
 800236c:	2b00      	cmp	r3, #0
 800236e:	d012      	beq.n	8002396 <main+0x7e>
	  	antenna_mavlink->writeMessage(upstreamMessage);
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <main+0xd8>)
 8002372:	681d      	ldr	r5, [r3, #0]
 8002374:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002378:	f5a3 742c 	sub.w	r4, r3, #688	; 0x2b0
 800237c:	4668      	mov	r0, sp
 800237e:	f104 030c 	add.w	r3, r4, #12
 8002382:	f240 1217 	movw	r2, #279	; 0x117
 8002386:	4619      	mov	r1, r3
 8002388:	f006 fdec 	bl	8008f64 <memcpy>
 800238c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002390:	4628      	mov	r0, r5
 8002392:	f7ff fc37 	bl	8001c04 <_ZN7MAVLink12writeMessageE17__mavlink_message>
	}

	mavlink_message_t downstreamMessage;
	bool downmessageRead = antenna_mavlink->readMessage(downstreamMessage);
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <main+0xd8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff fbb2 	bl	8001b0a <_ZN7MAVLink11readMessageER17__mavlink_message>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f887 32ae 	strb.w	r3, [r7, #686]	; 0x2ae
	if(downmessageRead){
 80023ac:	f897 32ae 	ldrb.w	r3, [r7, #686]	; 0x2ae
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d012      	beq.n	80023da <main+0xc2>
	  	drone_mavlink->writeMessage(downstreamMessage);
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <main+0xd4>)
 80023b6:	681d      	ldr	r5, [r3, #0]
 80023b8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80023bc:	f5a3 74c6 	sub.w	r4, r3, #396	; 0x18c
 80023c0:	4668      	mov	r0, sp
 80023c2:	f104 030c 	add.w	r3, r4, #12
 80023c6:	f240 1217 	movw	r2, #279	; 0x117
 80023ca:	4619      	mov	r1, r3
 80023cc:	f006 fdca 	bl	8008f64 <memcpy>
 80023d0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80023d4:	4628      	mov	r0, r5
 80023d6:	f7ff fc15 	bl	8001c04 <_ZN7MAVLink12writeMessageE17__mavlink_message>
	}
	HAL_UART_Receive_DMA(&huart2, rx_raw, 100);
 80023da:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80023de:	2264      	movs	r2, #100	; 0x64
 80023e0:	4619      	mov	r1, r3
 80023e2:	4804      	ldr	r0, [pc, #16]	; (80023f4 <main+0xdc>)
 80023e4:	f004 fe96 	bl	8007114 <HAL_UART_Receive_DMA>

  }
 80023e8:	e7b4      	b.n	8002354 <main+0x3c>
 80023ea:	bf00      	nop
 80023ec:	20000000 	.word	0x20000000
 80023f0:	20000004 	.word	0x20000004
 80023f4:	20001358 	.word	0x20001358

080023f8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b098      	sub	sp, #96	; 0x60
 80023fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023fe:	f107 0318 	add.w	r3, r7, #24
 8002402:	2248      	movs	r2, #72	; 0x48
 8002404:	2100      	movs	r1, #0
 8002406:	4618      	mov	r0, r3
 8002408:	f006 fdb9 	bl	8008f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240c:	1d3b      	adds	r3, r7, #4
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800241a:	2000      	movs	r0, #0
 800241c:	f002 ff02 	bl	8005224 <HAL_PWREx_ControlVoltageScaling>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	bf14      	ite	ne
 8002426:	2301      	movne	r3, #1
 8002428:	2300      	moveq	r3, #0
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 8002430:	f000 f852 	bl	80024d8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002434:	f002 fed8 	bl	80051e8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002438:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <_Z18SystemClock_Configv+0xdc>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	4a25      	ldr	r2, [pc, #148]	; (80024d4 <_Z18SystemClock_Configv+0xdc>)
 8002440:	f023 0318 	bic.w	r3, r3, #24
 8002444:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8002448:	2334      	movs	r3, #52	; 0x34
 800244a:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800244c:	2381      	movs	r3, #129	; 0x81
 800244e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002450:	2301      	movs	r3, #1
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002454:	2301      	movs	r3, #1
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002458:	2300      	movs	r3, #0
 800245a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800245c:	2360      	movs	r3, #96	; 0x60
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002460:	2302      	movs	r3, #2
 8002462:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002464:	2301      	movs	r3, #1
 8002466:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002468:	2301      	movs	r3, #1
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800246c:	2337      	movs	r3, #55	; 0x37
 800246e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002470:	2307      	movs	r3, #7
 8002472:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002474:	2302      	movs	r3, #2
 8002476:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002478:	2302      	movs	r3, #2
 800247a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	f107 0318 	add.w	r3, r7, #24
 8002480:	4618      	mov	r0, r3
 8002482:	f002 ff5f 	bl	8005344 <HAL_RCC_OscConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf14      	ite	ne
 800248c:	2301      	movne	r3, #1
 800248e:	2300      	moveq	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002496:	f000 f81f 	bl	80024d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249a:	230f      	movs	r3, #15
 800249c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800249e:	2303      	movs	r3, #3
 80024a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a2:	2300      	movs	r3, #0
 80024a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	2105      	movs	r1, #5
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fc1c 	bl	8005cf0 <HAL_RCC_ClockConfig>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	bf14      	ite	ne
 80024be:	2301      	movne	r3, #1
 80024c0:	2300      	moveq	r3, #0
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80024c8:	f000 f806 	bl	80024d8 <Error_Handler>
  }
}
 80024cc:	bf00      	nop
 80024ce:	3760      	adds	r7, #96	; 0x60
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40021000 	.word	0x40021000

080024d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024dc:	b672      	cpsid	i
}
 80024de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024e0:	e7fe      	b.n	80024e0 <Error_Handler+0x8>
	...

080024e4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80024ea:	463b      	mov	r3, r7
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
 80024f8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <MX_RTC_Init+0x8c>)
 80024fc:	4a1d      	ldr	r2, [pc, #116]	; (8002574 <MX_RTC_Init+0x90>)
 80024fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002500:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <MX_RTC_Init+0x8c>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002506:	4b1a      	ldr	r3, [pc, #104]	; (8002570 <MX_RTC_Init+0x8c>)
 8002508:	227f      	movs	r2, #127	; 0x7f
 800250a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <MX_RTC_Init+0x8c>)
 800250e:	22ff      	movs	r2, #255	; 0xff
 8002510:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <MX_RTC_Init+0x8c>)
 8002514:	2200      	movs	r2, #0
 8002516:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002518:	4b15      	ldr	r3, [pc, #84]	; (8002570 <MX_RTC_Init+0x8c>)
 800251a:	2200      	movs	r2, #0
 800251c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <MX_RTC_Init+0x8c>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002524:	4b12      	ldr	r3, [pc, #72]	; (8002570 <MX_RTC_Init+0x8c>)
 8002526:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800252a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800252c:	4b10      	ldr	r3, [pc, #64]	; (8002570 <MX_RTC_Init+0x8c>)
 800252e:	2200      	movs	r2, #0
 8002530:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002532:	480f      	ldr	r0, [pc, #60]	; (8002570 <MX_RTC_Init+0x8c>)
 8002534:	f004 fbd6 	bl	8006ce4 <HAL_RTC_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800253e:	f7ff ffcb 	bl	80024d8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8002542:	2300      	movs	r3, #0
 8002544:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8002552:	463b      	mov	r3, r7
 8002554:	4619      	mov	r1, r3
 8002556:	4806      	ldr	r0, [pc, #24]	; (8002570 <MX_RTC_Init+0x8c>)
 8002558:	f004 fcd2 	bl	8006f00 <HAL_RTCEx_PrivilegeModeSet>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002562:	f7ff ffb9 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20001204 	.word	0x20001204
 8002574:	40002800 	.word	0x40002800

08002578 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b0a8      	sub	sp, #160	; 0xa0
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	2294      	movs	r2, #148	; 0x94
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f006 fcf8 	bl	8008f7e <memset>
  if(rtcHandle->Instance==RTC)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_RTC_MspInit+0x74>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d124      	bne.n	80025e2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800259e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025a6:	f107 030c 	add.w	r3, r7, #12
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fe84 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80025b6:	f7ff ff8f 	bl	80024d8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_RTC_MspInit+0x78>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_RTC_MspInit+0x78>)
 80025c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RTC_MspInit+0x78>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_RTC_MspInit+0x78>)
 80025d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RTC_MspInit+0x78>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80025e2:	bf00      	nop
 80025e4:	37a0      	adds	r7, #160	; 0xa0
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40002800 	.word	0x40002800
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <HAL_MspInit+0x44>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fe:	4a0e      	ldr	r2, [pc, #56]	; (8002638 <HAL_MspInit+0x44>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6613      	str	r3, [r2, #96]	; 0x60
 8002606:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <HAL_MspInit+0x44>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <HAL_MspInit+0x44>)
 8002614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002616:	4a08      	ldr	r2, [pc, #32]	; (8002638 <HAL_MspInit+0x44>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6593      	str	r3, [r2, #88]	; 0x58
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_MspInit+0x44>)
 8002620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40021000 	.word	0x40021000

0800263c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002640:	e7fe      	b.n	8002640 <NMI_Handler+0x4>

08002642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002646:	e7fe      	b.n	8002646 <HardFault_Handler+0x4>

08002648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800264c:	e7fe      	b.n	800264c <MemManage_Handler+0x4>

0800264e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <BusFault_Handler+0x4>

08002654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <UsageFault_Handler+0x4>

0800265a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800265e:	bf00      	nop
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002676:	b480      	push	{r7}
 8002678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002688:	f000 fd62 	bl	8003150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268c:	bf00      	nop
 800268e:	bd80      	pop	{r7, pc}

08002690 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <DMA1_Channel1_IRQHandler+0x10>)
 8002696:	f002 f809 	bl	80046ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20001480 	.word	0x20001480

080026a4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 30.
  */
void UART5_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <UART5_IRQHandler+0x10>)
 80026aa:	f004 fe15 	bl	80072d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200012c4 	.word	0x200012c4

080026b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return 1;
 80026bc:	2301      	movs	r3, #1
}
 80026be:	4618      	mov	r0, r3
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_kill>:

int _kill(int pid, int sig)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026d2:	f006 fbfd 	bl	8008ed0 <__errno>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2216      	movs	r2, #22
 80026da:	601a      	str	r2, [r3, #0]
  return -1;
 80026dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <_exit>:

void _exit (int status)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f0:	f04f 31ff 	mov.w	r1, #4294967295
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ffe7 	bl	80026c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026fa:	e7fe      	b.n	80026fa <_exit+0x12>

080026fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <_sbrk+0x5c>)
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <_sbrk+0x60>)
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <_sbrk+0x64>)
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <_sbrk+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800272c:	f006 fbd0 	bl	8008ed0 <__errno>
 8002730:	4603      	mov	r3, r0
 8002732:	220c      	movs	r2, #12
 8002734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e009      	b.n	8002750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <_sbrk+0x64>)
 800274c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20030000 	.word	0x20030000
 800275c:	00000400 	.word	0x00000400
 8002760:	2000122c 	.word	0x2000122c
 8002764:	200017f8 	.word	0x200017f8

08002768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b087      	sub	sp, #28
 8002790:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8002792:	4b4f      	ldr	r3, [pc, #316]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800279e:	4b4c      	ldr	r3, [pc, #304]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 80027a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	e005      	b.n	80027ba <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80027ae:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80027ba:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <SystemCoreClockUpdate+0x148>)
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027c4:	4b42      	ldr	r3, [pc, #264]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 030c 	and.w	r3, r3, #12
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d866      	bhi.n	800289e <SystemCoreClockUpdate+0x112>
 80027d0:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <SystemCoreClockUpdate+0x4c>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	0800289f 	.word	0x0800289f
 80027e0:	0800289f 	.word	0x0800289f
 80027e4:	0800289f 	.word	0x0800289f
 80027e8:	08002815 	.word	0x08002815
 80027ec:	0800289f 	.word	0x0800289f
 80027f0:	0800289f 	.word	0x0800289f
 80027f4:	0800289f 	.word	0x0800289f
 80027f8:	0800281d 	.word	0x0800281d
 80027fc:	0800289f 	.word	0x0800289f
 8002800:	0800289f 	.word	0x0800289f
 8002804:	0800289f 	.word	0x0800289f
 8002808:	08002825 	.word	0x08002825
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 800280c:	4a32      	ldr	r2, [pc, #200]	; (80028d8 <SystemCoreClockUpdate+0x14c>)
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	6013      	str	r3, [r2, #0]
      break;
 8002812:	e048      	b.n	80028a6 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002814:	4b30      	ldr	r3, [pc, #192]	; (80028d8 <SystemCoreClockUpdate+0x14c>)
 8002816:	4a31      	ldr	r2, [pc, #196]	; (80028dc <SystemCoreClockUpdate+0x150>)
 8002818:	601a      	str	r2, [r3, #0]
      break;
 800281a:	e044      	b.n	80028a6 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800281c:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <SystemCoreClockUpdate+0x14c>)
 800281e:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <SystemCoreClockUpdate+0x154>)
 8002820:	601a      	str	r2, [r3, #0]
      break;
 8002822:	e040      	b.n	80028a6 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 800282e:	4b28      	ldr	r3, [pc, #160]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	3301      	adds	r3, #1
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d003      	beq.n	800284a <SystemCoreClockUpdate+0xbe>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d006      	beq.n	8002856 <SystemCoreClockUpdate+0xca>
 8002848:	e00b      	b.n	8002862 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800284a:	4a24      	ldr	r2, [pc, #144]	; (80028dc <SystemCoreClockUpdate+0x150>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	613b      	str	r3, [r7, #16]
          break;
 8002854:	e00b      	b.n	800286e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8002856:	4a22      	ldr	r2, [pc, #136]	; (80028e0 <SystemCoreClockUpdate+0x154>)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	fbb2 f3f3 	udiv	r3, r2, r3
 800285e:	613b      	str	r3, [r7, #16]
          break;
 8002860:	e005      	b.n	800286e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	fbb2 f3f3 	udiv	r3, r2, r3
 800286a:	613b      	str	r3, [r7, #16]
          break;
 800286c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800286e:	4b18      	ldr	r3, [pc, #96]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	fb02 f303 	mul.w	r3, r2, r3
 800287e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002880:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0e5b      	lsrs	r3, r3, #25
 8002886:	f003 0303 	and.w	r3, r3, #3
 800288a:	3301      	adds	r3, #1
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <SystemCoreClockUpdate+0x14c>)
 800289a:	6013      	str	r3, [r2, #0]
      break;
 800289c:	e003      	b.n	80028a6 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <SystemCoreClockUpdate+0x14c>)
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	6013      	str	r3, [r2, #0]
      break;
 80028a4:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <SystemCoreClockUpdate+0x144>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <SystemCoreClockUpdate+0x158>)
 80028b2:	5cd3      	ldrb	r3, [r2, r3]
 80028b4:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80028b6:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <SystemCoreClockUpdate+0x14c>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	4a05      	ldr	r2, [pc, #20]	; (80028d8 <SystemCoreClockUpdate+0x14c>)
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	371c      	adds	r7, #28
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40021000 	.word	0x40021000
 80028d4:	0800a124 	.word	0x0800a124
 80028d8:	20000008 	.word	0x20000008
 80028dc:	00f42400 	.word	0x00f42400
 80028e0:	007a1200 	.word	0x007a1200
 80028e4:	0800a10c 	.word	0x0800a10c

080028e8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80028f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028f4:	4907      	ldr	r1, [pc, #28]	; (8002914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80028fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4013      	ands	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002906:	68fb      	ldr	r3, [r7, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40021000 	.word	0x40021000

08002918 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002920:	4b08      	ldr	r3, [pc, #32]	; (8002944 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002922:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002924:	4907      	ldr	r1, [pc, #28]	; (8002944 <LL_APB1_GRP2_EnableClock+0x2c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4313      	orrs	r3, r2
 800292a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <LL_APB1_GRP2_EnableClock+0x2c>)
 800292e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4013      	ands	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40021000 	.word	0x40021000

08002948 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294e:	463b      	mov	r3, r7
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
 800295c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800295e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002962:	f7ff ffd9 	bl	8002918 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002966:	2002      	movs	r0, #2
 8002968:	f7ff ffbe 	bl	80028e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800296c:	2001      	movs	r0, #1
 800296e:	f7ff ffbb 	bl	80028e8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8002972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002976:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002978:	2303      	movs	r3, #3
 800297a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800297c:	2300      	movs	r3, #0
 800297e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002980:	463b      	mov	r3, r7
 8002982:	4619      	mov	r1, r3
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <MX_UCPD1_Init+0x64>)
 8002986:	f006 f9d6 	bl	8008d36 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 800298a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800298e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002990:	2303      	movs	r3, #3
 8002992:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	463b      	mov	r3, r7
 800299a:	4619      	mov	r1, r3
 800299c:	4804      	ldr	r0, [pc, #16]	; (80029b0 <MX_UCPD1_Init+0x68>)
 800299e:	f006 f9ca 	bl	8008d36 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	42020400 	.word	0x42020400
 80029b0:	42020000 	.word	0x42020000

080029b4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_uart5_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80029b8:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029ba:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <MX_LPUART1_UART_Init+0x94>)
 80029bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <MX_LPUART1_UART_Init+0x98>)
 80029c2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029c4:	4b1f      	ldr	r3, [pc, #124]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80029ca:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029d8:	220c      	movs	r2, #12
 80029da:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80029f4:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80029fa:	4812      	ldr	r0, [pc, #72]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 80029fc:	f004 faac 	bl	8006f58 <HAL_UART_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002a06:	f7ff fd67 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	480d      	ldr	r0, [pc, #52]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 8002a0e:	f005 ff29 	bl	8008864 <HAL_UARTEx_SetTxFifoThreshold>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002a18:	f7ff fd5e 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4809      	ldr	r0, [pc, #36]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 8002a20:	f005 ff5e 	bl	80088e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002a2a:	f7ff fd55 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <MX_LPUART1_UART_Init+0x90>)
 8002a30:	f005 fedf 	bl	80087f2 <HAL_UARTEx_DisableFifoMode>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002a3a:	f7ff fd4d 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20001230 	.word	0x20001230
 8002a48:	40008000 	.word	0x40008000
 8002a4c:	00033324 	.word	0x00033324

08002a50 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a56:	4a23      	ldr	r2, [pc, #140]	; (8002ae4 <MX_UART5_Init+0x94>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8002a5a:	4b21      	ldr	r3, [pc, #132]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a5c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a60:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002a68:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002a6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002a74:	4b1a      	ldr	r3, [pc, #104]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a76:	220c      	movs	r2, #12
 8002a78:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a80:	4b17      	ldr	r3, [pc, #92]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a92:	4b13      	ldr	r3, [pc, #76]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002a98:	4811      	ldr	r0, [pc, #68]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002a9a:	f004 fa5d 	bl	8006f58 <HAL_UART_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8002aa4:	f7ff fd18 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	480d      	ldr	r0, [pc, #52]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002aac:	f005 feda 	bl	8008864 <HAL_UARTEx_SetTxFifoThreshold>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8002ab6:	f7ff fd0f 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aba:	2100      	movs	r1, #0
 8002abc:	4808      	ldr	r0, [pc, #32]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002abe:	f005 ff0f 	bl	80088e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8002ac8:	f7ff fd06 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8002acc:	4804      	ldr	r0, [pc, #16]	; (8002ae0 <MX_UART5_Init+0x90>)
 8002ace:	f005 fe90 	bl	80087f2 <HAL_UARTEx_DisableFifoMode>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8002ad8:	f7ff fcfe 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002adc:	bf00      	nop
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	200012c4 	.word	0x200012c4
 8002ae4:	40005000 	.word	0x40005000

08002ae8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002aee:	4a23      	ldr	r2, [pc, #140]	; (8002b7c <MX_USART2_UART_Init+0x94>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002af2:	4b21      	ldr	r3, [pc, #132]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b1f      	ldr	r3, [pc, #124]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b1d      	ldr	r3, [pc, #116]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b1a      	ldr	r3, [pc, #104]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b1e:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2a:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b30:	4811      	ldr	r0, [pc, #68]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b32:	f004 fa11 	bl	8006f58 <HAL_UART_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002b3c:	f7ff fccc 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b40:	2100      	movs	r1, #0
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b44:	f005 fe8e 	bl	8008864 <HAL_UARTEx_SetTxFifoThreshold>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002b4e:	f7ff fcc3 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b52:	2100      	movs	r1, #0
 8002b54:	4808      	ldr	r0, [pc, #32]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b56:	f005 fec3 	bl	80088e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002b60:	f7ff fcba 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b64:	4804      	ldr	r0, [pc, #16]	; (8002b78 <MX_USART2_UART_Init+0x90>)
 8002b66:	f005 fe44 	bl	80087f2 <HAL_UARTEx_DisableFifoMode>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002b70:	f7ff fcb2 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b74:	bf00      	nop
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	20001358 	.word	0x20001358
 8002b7c:	40004400 	.word	0x40004400

08002b80 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b84:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002b86:	4a23      	ldr	r2, [pc, #140]	; (8002c14 <MX_USART3_UART_Init+0x94>)
 8002b88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b8a:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002b8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b92:	4b1f      	ldr	r3, [pc, #124]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ba4:	4b1a      	ldr	r3, [pc, #104]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002ba6:	220c      	movs	r2, #12
 8002ba8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002baa:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb0:	4b17      	ldr	r3, [pc, #92]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bbc:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc2:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bc8:	4811      	ldr	r0, [pc, #68]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bca:	f004 f9c5 	bl	8006f58 <HAL_UART_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002bd4:	f7ff fc80 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bd8:	2100      	movs	r1, #0
 8002bda:	480d      	ldr	r0, [pc, #52]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bdc:	f005 fe42 	bl	8008864 <HAL_UARTEx_SetTxFifoThreshold>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002be6:	f7ff fc77 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bea:	2100      	movs	r1, #0
 8002bec:	4808      	ldr	r0, [pc, #32]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bee:	f005 fe77 	bl	80088e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002bf8:	f7ff fc6e 	bl	80024d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002bfc:	4804      	ldr	r0, [pc, #16]	; (8002c10 <MX_USART3_UART_Init+0x90>)
 8002bfe:	f005 fdf8 	bl	80087f2 <HAL_UARTEx_DisableFifoMode>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002c08:	f7ff fc66 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200013ec 	.word	0x200013ec
 8002c14:	40004800 	.word	0x40004800

08002c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b0b6      	sub	sp, #216	; 0xd8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c34:	2294      	movs	r2, #148	; 0x94
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f006 f9a0 	bl	8008f7e <memset>
  if(uartHandle->Instance==LPUART1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4ab3      	ldr	r2, [pc, #716]	; (8002f10 <HAL_UART_MspInit+0x2f8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d13e      	bne.n	8002cc6 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002c48:	2320      	movs	r3, #32
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fb2f 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002c60:	f7ff fc3a 	bl	80024d8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002c64:	4bab      	ldr	r3, [pc, #684]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	4aaa      	ldr	r2, [pc, #680]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002c6a:	f043 0301 	orr.w	r3, r3, #1
 8002c6e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002c70:	4ba8      	ldr	r3, [pc, #672]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c7c:	4ba5      	ldr	r3, [pc, #660]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	4aa4      	ldr	r2, [pc, #656]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c88:	4ba2      	ldr	r3, [pc, #648]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_PWREx_EnableVddIO2();
 8002c94:	f002 fb22 	bl	80052dc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8002c98:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cb8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4896      	ldr	r0, [pc, #600]	; (8002f18 <HAL_UART_MspInit+0x300>)
 8002cc0:	f001 fed0 	bl	8004a64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002cc4:	e120      	b.n	8002f08 <HAL_UART_MspInit+0x2f0>
  else if(uartHandle->Instance==UART5)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a94      	ldr	r2, [pc, #592]	; (8002f1c <HAL_UART_MspInit+0x304>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	f040 8099 	bne.w	8002e04 <HAL_UART_MspInit+0x1ec>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002cda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f003 faea 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002cea:	f7ff fbf5 	bl	80024d8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	4a88      	ldr	r2, [pc, #544]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002cf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8002cfa:	4b86      	ldr	r3, [pc, #536]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d06:	4b83      	ldr	r3, [pc, #524]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d0a:	4a82      	ldr	r2, [pc, #520]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002d0c:	f043 0304 	orr.w	r3, r3, #4
 8002d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d12:	4b80      	ldr	r3, [pc, #512]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	623b      	str	r3, [r7, #32]
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1e:	4b7d      	ldr	r3, [pc, #500]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d22:	4a7c      	ldr	r2, [pc, #496]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002d24:	f043 0308 	orr.w	r3, r3, #8
 8002d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d2a:	4b7a      	ldr	r3, [pc, #488]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	61fb      	str	r3, [r7, #28]
 8002d34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d50:	2308      	movs	r3, #8
 8002d52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d56:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4870      	ldr	r0, [pc, #448]	; (8002f20 <HAL_UART_MspInit+0x308>)
 8002d5e:	f001 fe81 	bl	8004a64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d62:	2304      	movs	r3, #4
 8002d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4867      	ldr	r0, [pc, #412]	; (8002f24 <HAL_UART_MspInit+0x30c>)
 8002d88:	f001 fe6c 	bl	8004a64 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Channel1;
 8002d8c:	4b66      	ldr	r3, [pc, #408]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002d8e:	4a67      	ldr	r2, [pc, #412]	; (8002f2c <HAL_UART_MspInit+0x314>)
 8002d90:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8002d92:	4b65      	ldr	r3, [pc, #404]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002d94:	2221      	movs	r2, #33	; 0x21
 8002d96:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d98:	4b63      	ldr	r3, [pc, #396]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9e:	4b62      	ldr	r3, [pc, #392]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002da4:	4b60      	ldr	r3, [pc, #384]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002da6:	2280      	movs	r2, #128	; 0x80
 8002da8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002daa:	4b5f      	ldr	r3, [pc, #380]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db0:	4b5d      	ldr	r3, [pc, #372]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002db6:	4b5c      	ldr	r3, [pc, #368]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002db8:	2220      	movs	r2, #32
 8002dba:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002dbc:	4b5a      	ldr	r3, [pc, #360]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002dc2:	4859      	ldr	r0, [pc, #356]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002dc4:	f001 fa94 	bl	80042f0 <HAL_DMA_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_UART_MspInit+0x1ba>
      Error_Handler();
 8002dce:	f7ff fb83 	bl	80024d8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_uart5_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	4854      	ldr	r0, [pc, #336]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002dd6:	f001 fd75 	bl	80048c4 <HAL_DMA_ConfigChannelAttributes>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_UART_MspInit+0x1cc>
      Error_Handler();
 8002de0:	f7ff fb7a 	bl	80024d8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a50      	ldr	r2, [pc, #320]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002dec:	4a4e      	ldr	r2, [pc, #312]	; (8002f28 <HAL_UART_MspInit+0x310>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	2041      	movs	r0, #65	; 0x41
 8002df8:	f001 fa45 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002dfc:	2041      	movs	r0, #65	; 0x41
 8002dfe:	f001 fa5c 	bl	80042ba <HAL_NVIC_EnableIRQ>
}
 8002e02:	e081      	b.n	8002f08 <HAL_UART_MspInit+0x2f0>
  else if(uartHandle->Instance==USART2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_UART_MspInit+0x318>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d13b      	bne.n	8002e86 <HAL_UART_MspInit+0x26e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e12:	2300      	movs	r3, #0
 8002e14:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fa4c 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <HAL_UART_MspInit+0x212>
      Error_Handler();
 8002e26:	f7ff fb57 	bl	80024d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	4a39      	ldr	r2, [pc, #228]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e34:	6593      	str	r3, [r2, #88]	; 0x58
 8002e36:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	61bb      	str	r3, [r7, #24]
 8002e40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	4a33      	ldr	r2, [pc, #204]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002e5a:	230c      	movs	r3, #12
 8002e5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e72:	2307      	movs	r3, #7
 8002e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	482d      	ldr	r0, [pc, #180]	; (8002f34 <HAL_UART_MspInit+0x31c>)
 8002e80:	f001 fdf0 	bl	8004a64 <HAL_GPIO_Init>
}
 8002e84:	e040      	b.n	8002f08 <HAL_UART_MspInit+0x2f0>
  else if(uartHandle->Instance==USART3)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a2b      	ldr	r2, [pc, #172]	; (8002f38 <HAL_UART_MspInit+0x320>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d13b      	bne.n	8002f08 <HAL_UART_MspInit+0x2f0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002e90:	2304      	movs	r3, #4
 8002e92:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002e94:	2300      	movs	r3, #0
 8002e96:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fa0b 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_UART_MspInit+0x294>
      Error_Handler();
 8002ea8:	f7ff fb16 	bl	80024d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eac:	4b19      	ldr	r3, [pc, #100]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb6:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb8:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec8:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002eca:	f043 0302 	orr.w	r3, r3, #2
 8002ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <HAL_UART_MspInit+0x2fc>)
 8002ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002edc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ee0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ef6:	2307      	movs	r3, #7
 8002ef8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f00:	4619      	mov	r1, r3
 8002f02:	480e      	ldr	r0, [pc, #56]	; (8002f3c <HAL_UART_MspInit+0x324>)
 8002f04:	f001 fdae 	bl	8004a64 <HAL_GPIO_Init>
}
 8002f08:	bf00      	nop
 8002f0a:	37d8      	adds	r7, #216	; 0xd8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40008000 	.word	0x40008000
 8002f14:	40021000 	.word	0x40021000
 8002f18:	42021800 	.word	0x42021800
 8002f1c:	40005000 	.word	0x40005000
 8002f20:	42020800 	.word	0x42020800
 8002f24:	42020c00 	.word	0x42020c00
 8002f28:	20001480 	.word	0x20001480
 8002f2c:	40020008 	.word	0x40020008
 8002f30:	40004400 	.word	0x40004400
 8002f34:	42020000 	.word	0x42020000
 8002f38:	40004800 	.word	0x40004800
 8002f3c:	42020400 	.word	0x42020400

08002f40 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f46:	4a11      	ldr	r2, [pc, #68]	; (8002f8c <MX_USB_PCD_Init+0x4c>)
 8002f48:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f52:	2202      	movs	r2, #2
 8002f54:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f58:	2202      	movs	r2, #2
 8002f5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <MX_USB_PCD_Init+0x48>)
 8002f76:	f002 f833 	bl	8004fe0 <HAL_PCD_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002f80:	f7ff faaa 	bl	80024d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200014e8 	.word	0x200014e8
 8002f8c:	4000d400 	.word	0x4000d400

08002f90 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ae      	sub	sp, #184	; 0xb8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	2294      	movs	r2, #148	; 0x94
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f005 ffe4 	bl	8008f7e <memset>
  if(pcdHandle->Instance==USB)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a22      	ldr	r2, [pc, #136]	; (8003044 <HAL_PCD_MspInit+0xb4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d13d      	bne.n	800303c <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fcc:	f107 0310 	add.w	r3, r7, #16
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 f971 	bl	80062b8 <HAL_RCCEx_PeriphCLKConfig>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002fdc:	f7ff fa7c 	bl	80024d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe0:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_PCD_MspInit+0xb8>)
 8002fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe4:	4a18      	ldr	r2, [pc, #96]	; (8003048 <HAL_PCD_MspInit+0xb8>)
 8002fe6:	f043 0301 	orr.w	r3, r3, #1
 8002fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fec:	4b16      	ldr	r3, [pc, #88]	; (8003048 <HAL_PCD_MspInit+0xb8>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002ff8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003000:	2302      	movs	r3, #2
 8003002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300c:	2300      	movs	r3, #0
 800300e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003012:	230a      	movs	r3, #10
 8003014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800301c:	4619      	mov	r1, r3
 800301e:	480b      	ldr	r0, [pc, #44]	; (800304c <HAL_PCD_MspInit+0xbc>)
 8003020:	f001 fd20 	bl	8004a64 <HAL_GPIO_Init>

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HAL_PCD_MspInit+0xb8>)
 8003026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <HAL_PCD_MspInit+0xb8>)
 800302a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800302e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HAL_PCD_MspInit+0xb8>)
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800303c:	bf00      	nop
 800303e:	37b8      	adds	r7, #184	; 0xb8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	4000d400 	.word	0x4000d400
 8003048:	40021000 	.word	0x40021000
 800304c:	42020000 	.word	0x42020000

08003050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003088 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003054:	f7ff fb88 	bl	8002768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003058:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800305a:	e003      	b.n	8003064 <LoopCopyDataInit>

0800305c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800305c:	4b0b      	ldr	r3, [pc, #44]	; (800308c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800305e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003060:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003062:	3104      	adds	r1, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003064:	480a      	ldr	r0, [pc, #40]	; (8003090 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003066:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003068:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800306a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800306c:	d3f6      	bcc.n	800305c <CopyDataInit>
	ldr	r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003070:	e002      	b.n	8003078 <LoopFillZerobss>

08003072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003072:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003074:	f842 3b04 	str.w	r3, [r2], #4

08003078 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <LoopForever+0x16>)
	cmp	r2, r3
 800307a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800307c:	d3f9      	bcc.n	8003072 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800307e:	f005 ff2d 	bl	8008edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003082:	f7ff f949 	bl	8002318 <main>

08003086 <LoopForever>:

LoopForever:
    b LoopForever
 8003086:	e7fe      	b.n	8003086 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003088:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800308c:	0800a1a4 	.word	0x0800a1a4
	ldr	r0, =_sdata
 8003090:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003094:	20000078 	.word	0x20000078
	ldr	r2, =_sbss
 8003098:	20000078 	.word	0x20000078
	ldr	r3, = _ebss
 800309c:	200017f4 	.word	0x200017f4

080030a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC1_2_IRQHandler>

080030a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80030ac:	2004      	movs	r0, #4
 80030ae:	f001 f8df 	bl	8004270 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80030b2:	f7ff fb6b 	bl	800278c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030b6:	2000      	movs	r0, #0
 80030b8:	f000 f80e 	bl	80030d8 <HAL_InitTick>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	71fb      	strb	r3, [r7, #7]
 80030c6:	e001      	b.n	80030cc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030c8:	f7ff fa94 	bl	80025f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030cc:	79fb      	ldrb	r3, [r7, #7]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030e4:	4b17      	ldr	r3, [pc, #92]	; (8003144 <HAL_InitTick+0x6c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d023      	beq.n	8003134 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_InitTick+0x70>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_InitTick+0x6c>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f001 f8e7 	bl	80042d6 <HAL_SYSTICK_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b07      	cmp	r3, #7
 8003112:	d809      	bhi.n	8003128 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003114:	2200      	movs	r2, #0
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f001 f8b3 	bl	8004286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_InitTick+0x74>)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e007      	b.n	8003138 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e004      	b.n	8003138 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e001      	b.n	8003138 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000010 	.word	0x20000010
 8003148:	20000008 	.word	0x20000008
 800314c:	2000000c 	.word	0x2000000c

08003150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_IncTick+0x20>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_IncTick+0x24>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4413      	add	r3, r2
 8003160:	4a04      	ldr	r2, [pc, #16]	; (8003174 <HAL_IncTick+0x24>)
 8003162:	6013      	str	r3, [r2, #0]
}
 8003164:	bf00      	nop
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000010 	.word	0x20000010
 8003174:	200017dc 	.word	0x200017dc

08003178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  return uwTick;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <HAL_GetTick+0x14>)
 800317e:	681b      	ldr	r3, [r3, #0]
}
 8003180:	4618      	mov	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	200017dc 	.word	0x200017dc

08003190 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	609a      	str	r2, [r3, #8]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3360      	adds	r3, #96	; 0x60
 800320a:	461a      	mov	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b08      	ldr	r3, [pc, #32]	; (800323c <LL_ADC_SetOffset+0x44>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	4313      	orrs	r3, r2
 8003228:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	03fff000 	.word	0x03fff000

08003240 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3360      	adds	r3, #96	; 0x60
 800324e:	461a      	mov	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800326c:	b480      	push	{r7}
 800326e:	b087      	sub	sp, #28
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	3360      	adds	r3, #96	; 0x60
 800327c:	461a      	mov	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	431a      	orrs	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003296:	bf00      	nop
 8003298:	371c      	adds	r7, #28
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	431a      	orrs	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	615a      	str	r2, [r3, #20]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3330      	adds	r3, #48	; 0x30
 80032d8:	461a      	mov	r2, r3
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	0a1b      	lsrs	r3, r3, #8
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	f003 030c 	and.w	r3, r3, #12
 80032e4:	4413      	add	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	211f      	movs	r1, #31
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0e9b      	lsrs	r3, r3, #26
 8003300:	f003 011f 	and.w	r1, r3, #31
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 031f 	and.w	r3, r3, #31
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	431a      	orrs	r2, r3
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	3314      	adds	r3, #20
 8003330:	461a      	mov	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0e5b      	lsrs	r3, r3, #25
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	0d1b      	lsrs	r3, r3, #20
 8003348:	f003 031f 	and.w	r3, r3, #31
 800334c:	2107      	movs	r1, #7
 800334e:	fa01 f303 	lsl.w	r3, r1, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	401a      	ands	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	0d1b      	lsrs	r3, r3, #20
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	431a      	orrs	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	43db      	mvns	r3, r3
 8003392:	401a      	ands	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 0318 	and.w	r3, r3, #24
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800339c:	40d9      	lsrs	r1, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	400b      	ands	r3, r1
 80033a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033a6:	431a      	orrs	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	0007ffff 	.word	0x0007ffff

080033c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80033d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6093      	str	r3, [r2, #8]
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033f8:	d101      	bne.n	80033fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800341c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003420:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003448:	d101      	bne.n	800344e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800344a:	2301      	movs	r3, #1
 800344c:	e000      	b.n	8003450 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <LL_ADC_IsEnabled+0x18>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <LL_ADC_IsEnabled+0x1a>
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b04      	cmp	r3, #4
 8003494:	d101      	bne.n	800349a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d101      	bne.n	80034c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034d0:	b590      	push	{r4, r7, lr}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e12e      	b.n	8003748 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d109      	bne.n	800350c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7fe fc2b 	bl	8001d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff67 	bl	80033e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff4d 	bl	80033c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff82 	bl	8003434 <LL_ADC_IsInternalRegulatorEnabled>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d115      	bne.n	8003562 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff66 	bl	800340c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003540:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_ADC_Init+0x280>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	099b      	lsrs	r3, r3, #6
 8003546:	4a83      	ldr	r2, [pc, #524]	; (8003754 <HAL_ADC_Init+0x284>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003554:	e002      	b.n	800355c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b01      	subs	r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f9      	bne.n	8003556 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff ff64 	bl	8003434 <LL_ADC_IsInternalRegulatorEnabled>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	f043 0210 	orr.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff ff75 	bl	8003482 <LL_ADC_REG_IsConversionOngoing>
 8003598:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f040 80c7 	bne.w	8003736 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f040 80c3 	bne.w	8003736 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035b8:	f043 0202 	orr.w	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff ff49 	bl	800345c <LL_ADC_IsEnabled>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d110      	bne.n	80035f2 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d0:	4861      	ldr	r0, [pc, #388]	; (8003758 <HAL_ADC_Init+0x288>)
 80035d2:	f7ff ff43 	bl	800345c <LL_ADC_IsEnabled>
 80035d6:	4604      	mov	r4, r0
 80035d8:	4860      	ldr	r0, [pc, #384]	; (800375c <HAL_ADC_Init+0x28c>)
 80035da:	f7ff ff3f 	bl	800345c <LL_ADC_IsEnabled>
 80035de:	4603      	mov	r3, r0
 80035e0:	4323      	orrs	r3, r4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4619      	mov	r1, r3
 80035ec:	485c      	ldr	r0, [pc, #368]	; (8003760 <HAL_ADC_Init+0x290>)
 80035ee:	f7ff fdcf 	bl	8003190 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	7e5b      	ldrb	r3, [r3, #25]
 80035f6:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035fc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003602:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003608:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003610:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d106      	bne.n	800362e <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	3b01      	subs	r3, #1
 8003626:	045b      	lsls	r3, r3, #17
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003642:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68da      	ldr	r2, [r3, #12]
 8003650:	4b44      	ldr	r3, [pc, #272]	; (8003764 <HAL_ADC_Init+0x294>)
 8003652:	4013      	ands	r3, r2
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	69b9      	ldr	r1, [r7, #24]
 800365a:	430b      	orrs	r3, r1
 800365c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff ff20 	bl	80034a8 <LL_ADC_INJ_IsConversionOngoing>
 8003668:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d140      	bne.n	80036f2 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d13d      	bne.n	80036f2 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	7e1b      	ldrb	r3, [r3, #24]
 800367e:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003680:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003688:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800368a:	4313      	orrs	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003698:	f023 0306 	bic.w	r3, r3, #6
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	69b9      	ldr	r1, [r7, #24]
 80036a2:	430b      	orrs	r3, r1
 80036a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d118      	bne.n	80036e2 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80036ba:	f023 0304 	bic.w	r3, r3, #4
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036cc:	4311      	orrs	r1, r2
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036d2:	430a      	orrs	r2, r1
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	611a      	str	r2, [r3, #16]
 80036e0:	e007      	b.n	80036f2 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d10c      	bne.n	8003714 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	f023 010f 	bic.w	r1, r3, #15
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	1e5a      	subs	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
 8003712:	e007      	b.n	8003724 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 020f 	bic.w	r2, r2, #15
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003728:	f023 0303 	bic.w	r3, r3, #3
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	659a      	str	r2, [r3, #88]	; 0x58
 8003734:	e007      	b.n	8003746 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f043 0210 	orr.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003746:	7ffb      	ldrb	r3, [r7, #31]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3724      	adds	r7, #36	; 0x24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd90      	pop	{r4, r7, pc}
 8003750:	20000008 	.word	0x20000008
 8003754:	053e2d63 	.word	0x053e2d63
 8003758:	42028000 	.word	0x42028000
 800375c:	42028100 	.word	0x42028100
 8003760:	42028300 	.word	0x42028300
 8003764:	fff0c007 	.word	0xfff0c007

08003768 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b0b7      	sub	sp, #220	; 0xdc
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_ADC_ConfigChannel+0x22>
 8003786:	2302      	movs	r3, #2
 8003788:	e3c1      	b.n	8003f0e <HAL_ADC_ConfigChannel+0x7a6>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff fe73 	bl	8003482 <LL_ADC_REG_IsConversionOngoing>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f040 83a6 	bne.w	8003ef0 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	f7ff fd89 	bl	80032c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fe61 	bl	8003482 <LL_ADC_REG_IsConversionOngoing>
 80037c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fe6d 	bl	80034a8 <LL_ADC_INJ_IsConversionOngoing>
 80037ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80037d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 81c1 	bne.w	8003b5e <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80037dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f040 81bc 	bne.w	8003b5e <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ee:	d10f      	bne.n	8003810 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2200      	movs	r2, #0
 80037fa:	4619      	mov	r1, r3
 80037fc:	f7ff fd90 	bl	8003320 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff fd4a 	bl	80032a2 <LL_ADC_SetSamplingTimeCommonConfig>
 800380e:	e00e      	b.n	800382e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6818      	ldr	r0, [r3, #0]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	461a      	mov	r2, r3
 800381e:	f7ff fd7f 	bl	8003320 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fd3a 	bl	80032a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d00a      	beq.n	8003866 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6919      	ldr	r1, [r3, #16]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003860:	f7ff fcca 	bl	80031f8 <LL_ADC_SetOffset>
 8003864:	e17b      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fce7 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003872:	4603      	mov	r3, r0
 8003874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10a      	bne.n	8003892 <HAL_ADC_ConfigChannel+0x12a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2100      	movs	r1, #0
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff fcdc 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	0e9b      	lsrs	r3, r3, #26
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	e01e      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x168>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff fcd1 	bl	8003240 <LL_ADC_GetOffsetChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80038a8:	fa93 f3a3 	rbit	r3, r3
 80038ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80038b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80038b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80038b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80038c0:	2320      	movs	r3, #32
 80038c2:	e004      	b.n	80038ce <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 80038c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80038c8:	fab3 f383 	clz	r3, r3
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d105      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x180>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	0e9b      	lsrs	r3, r3, #26
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	e018      	b.n	800391a <HAL_ADC_ConfigChannel+0x1b2>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80038f4:	fa93 f3a3 	rbit	r3, r3
 80038f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80038fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003904:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 800390c:	2320      	movs	r3, #32
 800390e:	e004      	b.n	800391a <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8003910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003914:	fab3 f383 	clz	r3, r3
 8003918:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800391a:	429a      	cmp	r2, r3
 800391c:	d106      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff fca0 	bl	800326c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fc84 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003938:	4603      	mov	r3, r0
 800393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x1f0>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fc79 	bl	8003240 <LL_ADC_GetOffsetChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	f003 021f 	and.w	r2, r3, #31
 8003956:	e01e      	b.n	8003996 <HAL_ADC_ConfigChannel+0x22e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2101      	movs	r1, #1
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fc6e 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800396e:	fa93 f3a3 	rbit	r3, r3
 8003972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800397a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800397e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8003986:	2320      	movs	r3, #32
 8003988:	e004      	b.n	8003994 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800398a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x246>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	0e9b      	lsrs	r3, r3, #26
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	e018      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x278>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80039c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80039ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 80039d2:	2320      	movs	r3, #32
 80039d4:	e004      	b.n	80039e0 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 80039d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d106      	bne.n	80039f2 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2101      	movs	r1, #1
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fc3d 	bl	800326c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fc21 	bl	8003240 <LL_ADC_GetOffsetChannel>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10a      	bne.n	8003a1e <HAL_ADC_ConfigChannel+0x2b6>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2102      	movs	r1, #2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc16 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003a14:	4603      	mov	r3, r0
 8003a16:	0e9b      	lsrs	r3, r3, #26
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	e01e      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x2f4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2102      	movs	r1, #2
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fc0b 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003a3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003a44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8003a4c:	2320      	movs	r3, #32
 8003a4e:	e004      	b.n	8003a5a <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8003a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a54:	fab3 f383 	clz	r3, r3
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <HAL_ADC_ConfigChannel+0x30c>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	0e9b      	lsrs	r3, r3, #26
 8003a6e:	f003 031f 	and.w	r3, r3, #31
 8003a72:	e016      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x33a>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a80:	fa93 f3a3 	rbit	r3, r3
 8003a84:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003a86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003a94:	2320      	movs	r3, #32
 8003a96:	e004      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8003a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9c:	fab3 f383 	clz	r3, r3
 8003aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d106      	bne.n	8003ab4 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	2102      	movs	r1, #2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7ff fbdc 	bl	800326c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2103      	movs	r1, #3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff fbc0 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10a      	bne.n	8003ae0 <HAL_ADC_ConfigChannel+0x378>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2103      	movs	r1, #3
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff fbb5 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	0e9b      	lsrs	r3, r3, #26
 8003ada:	f003 021f 	and.w	r2, r3, #31
 8003ade:	e017      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x3a8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2103      	movs	r1, #3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fbaa 	bl	8003240 <LL_ADC_GetOffsetChannel>
 8003aec:	4603      	mov	r3, r0
 8003aee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af2:	fa93 f3a3 	rbit	r3, r3
 8003af6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003af8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003afa:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8003b02:	2320      	movs	r3, #32
 8003b04:	e003      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8003b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b08:	fab3 f383 	clz	r3, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x3c0>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	0e9b      	lsrs	r3, r3, #26
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	e011      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x3e4>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b30:	fa93 f3a3 	rbit	r3, r3
 8003b34:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003b36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b38:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8003b40:	2320      	movs	r3, #32
 8003b42:	e003      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8003b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b46:	fab3 f383 	clz	r3, r3
 8003b4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d106      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2200      	movs	r2, #0
 8003b56:	2103      	movs	r1, #3
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff fb87 	bl	800326c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fc7a 	bl	800345c <LL_ADC_IsEnabled>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f040 81c9 	bne.w	8003f02 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6819      	ldr	r1, [r3, #0]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f7ff fbfb 	bl	8003378 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	4a8f      	ldr	r2, [pc, #572]	; (8003dc4 <HAL_ADC_ConfigChannel+0x65c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	f040 8131 	bne.w	8003df0 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x44e>
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	0e9b      	lsrs	r3, r3, #26
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	f003 031f 	and.w	r3, r3, #31
 8003baa:	2b09      	cmp	r3, #9
 8003bac:	bf94      	ite	ls
 8003bae:	2301      	movls	r3, #1
 8003bb0:	2300      	movhi	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e019      	b.n	8003bea <HAL_ADC_ConfigChannel+0x482>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bbe:	fa93 f3a3 	rbit	r3, r3
 8003bc2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003bc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003bce:	2320      	movs	r3, #32
 8003bd0:	e003      	b.n	8003bda <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003bd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd4:	fab3 f383 	clz	r3, r3
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2b09      	cmp	r3, #9
 8003be2:	bf94      	ite	ls
 8003be4:	2301      	movls	r3, #1
 8003be6:	2300      	movhi	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d079      	beq.n	8003ce2 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d107      	bne.n	8003c0a <HAL_ADC_ConfigChannel+0x4a2>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	0e9b      	lsrs	r3, r3, #26
 8003c00:	3301      	adds	r3, #1
 8003c02:	069b      	lsls	r3, r3, #26
 8003c04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c08:	e015      	b.n	8003c36 <HAL_ADC_ConfigChannel+0x4ce>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c12:	fa93 f3a3 	rbit	r3, r3
 8003c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c1a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8003c22:	2320      	movs	r3, #32
 8003c24:	e003      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	fab3 f383 	clz	r3, r3
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	3301      	adds	r3, #1
 8003c30:	069b      	lsls	r3, r3, #26
 8003c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d109      	bne.n	8003c56 <HAL_ADC_ConfigChannel+0x4ee>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	0e9b      	lsrs	r3, r3, #26
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2101      	movs	r1, #1
 8003c50:	fa01 f303 	lsl.w	r3, r1, r3
 8003c54:	e017      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x51e>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c5e:	fa93 f3a3 	rbit	r3, r3
 8003c62:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8003c6e:	2320      	movs	r3, #32
 8003c70:	e003      	b.n	8003c7a <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f303 	lsl.w	r3, r1, r3
 8003c86:	ea42 0103 	orr.w	r1, r2, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <HAL_ADC_ConfigChannel+0x544>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	0e9b      	lsrs	r3, r3, #26
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	f003 021f 	and.w	r2, r3, #31
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4413      	add	r3, r2
 8003ca8:	051b      	lsls	r3, r3, #20
 8003caa:	e018      	b.n	8003cde <HAL_ADC_ConfigChannel+0x576>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	fa93 f3a3 	rbit	r3, r3
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e003      	b.n	8003cd0 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	f003 021f 	and.w	r2, r3, #31
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	4413      	add	r3, r2
 8003cdc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cde:	430b      	orrs	r3, r1
 8003ce0:	e081      	b.n	8003de6 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d107      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x596>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	0e9b      	lsrs	r3, r3, #26
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	069b      	lsls	r3, r3, #26
 8003cf8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003cfc:	e015      	b.n	8003d2a <HAL_ADC_ConfigChannel+0x5c2>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	fa93 f3a3 	rbit	r3, r3
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003d16:	2320      	movs	r3, #32
 8003d18:	e003      	b.n	8003d22 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	fab3 f383 	clz	r3, r3
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	3301      	adds	r3, #1
 8003d24:	069b      	lsls	r3, r3, #26
 8003d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x5e2>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	0e9b      	lsrs	r3, r3, #26
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	f003 031f 	and.w	r3, r3, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f303 	lsl.w	r3, r1, r3
 8003d48:	e017      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x612>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	61fb      	str	r3, [r7, #28]
  return result;
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003d62:	2320      	movs	r3, #32
 8003d64:	e003      	b.n	8003d6e <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	3301      	adds	r3, #1
 8003d70:	f003 031f 	and.w	r3, r3, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	ea42 0103 	orr.w	r1, r2, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10d      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x63e>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0e9b      	lsrs	r3, r3, #26
 8003d90:	3301      	adds	r3, #1
 8003d92:	f003 021f 	and.w	r2, r3, #31
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3b1e      	subs	r3, #30
 8003d9e:	051b      	lsls	r3, r3, #20
 8003da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003da4:	e01e      	b.n	8003de4 <HAL_ADC_ConfigChannel+0x67c>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	fa93 f3a3 	rbit	r3, r3
 8003db2:	613b      	str	r3, [r7, #16]
  return result;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d104      	bne.n	8003dc8 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8003dbe:	2320      	movs	r3, #32
 8003dc0:	e006      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x668>
 8003dc2:	bf00      	nop
 8003dc4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	fab3 f383 	clz	r3, r3
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f003 021f 	and.w	r2, r3, #31
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b1e      	subs	r3, #30
 8003dde:	051b      	lsls	r3, r3, #20
 8003de0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003de4:	430b      	orrs	r3, r1
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	6892      	ldr	r2, [r2, #8]
 8003dea:	4619      	mov	r1, r3
 8003dec:	f7ff fa98 	bl	8003320 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b48      	ldr	r3, [pc, #288]	; (8003f18 <HAL_ADC_ConfigChannel+0x7b0>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8082 	beq.w	8003f02 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003dfe:	4847      	ldr	r0, [pc, #284]	; (8003f1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003e00:	f7ff f9ec 	bl	80031dc <LL_ADC_GetCommonPathInternalCh>
 8003e04:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	4845      	ldr	r0, [pc, #276]	; (8003f20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e0a:	f7ff fb27 	bl	800345c <LL_ADC_IsEnabled>
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4844      	ldr	r0, [pc, #272]	; (8003f24 <HAL_ADC_ConfigChannel+0x7bc>)
 8003e12:	f7ff fb23 	bl	800345c <LL_ADC_IsEnabled>
 8003e16:	4603      	mov	r3, r0
 8003e18:	4323      	orrs	r3, r4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d15e      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a41      	ldr	r2, [pc, #260]	; (8003f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d127      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d121      	bne.n	8003e78 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a39      	ldr	r2, [pc, #228]	; (8003f20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d161      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e46:	4619      	mov	r1, r3
 8003e48:	4834      	ldr	r0, [pc, #208]	; (8003f1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003e4a:	f7ff f9b4 	bl	80031b6 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e4e:	4b37      	ldr	r3, [pc, #220]	; (8003f2c <HAL_ADC_ConfigChannel+0x7c4>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	4a36      	ldr	r2, [pc, #216]	; (8003f30 <HAL_ADC_ConfigChannel+0x7c8>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	4613      	mov	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003e66:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003e68:	e002      	b.n	8003e70 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f9      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e76:	e044      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2d      	ldr	r2, [pc, #180]	; (8003f34 <HAL_ADC_ConfigChannel+0x7cc>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d113      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10d      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a23      	ldr	r2, [pc, #140]	; (8003f20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d134      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	481e      	ldr	r0, [pc, #120]	; (8003f1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003ea4:	f7ff f987 	bl	80031b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ea8:	e02b      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <HAL_ADC_ConfigChannel+0x7d0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d126      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003eb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d120      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a16      	ldr	r2, [pc, #88]	; (8003f20 <HAL_ADC_ConfigChannel+0x7b8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d11b      	bne.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003eca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4811      	ldr	r0, [pc, #68]	; (8003f1c <HAL_ADC_ConfigChannel+0x7b4>)
 8003ed6:	f7ff f96e 	bl	80031b6 <LL_ADC_SetCommonPathInternalCh>
 8003eda:	e012      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003eee:	e008      	b.n	8003f02 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003f0a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	37dc      	adds	r7, #220	; 0xdc
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd90      	pop	{r4, r7, pc}
 8003f16:	bf00      	nop
 8003f18:	80080000 	.word	0x80080000
 8003f1c:	42028300 	.word	0x42028300
 8003f20:	42028000 	.word	0x42028000
 8003f24:	42028100 	.word	0x42028100
 8003f28:	c7520000 	.word	0xc7520000
 8003f2c:	20000008 	.word	0x20000008
 8003f30:	053e2d63 	.word	0x053e2d63
 8003f34:	cb840000 	.word	0xcb840000
 8003f38:	80000001 	.word	0x80000001

08003f3c <LL_ADC_IsEnabled>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <LL_ADC_IsEnabled+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <LL_ADC_IsEnabled+0x1a>
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d101      	bne.n	8003f7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b0a1      	sub	sp, #132	; 0x84
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e089      	b.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a42      	ldr	r2, [pc, #264]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d102      	bne.n	8003fc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fc0:	4b41      	ldr	r3, [pc, #260]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	e001      	b.n	8003fca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e068      	b.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ffb9 	bl	8003f62 <LL_ADC_REG_IsConversionOngoing>
 8003ff0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ffb3 	bl	8003f62 <LL_ADC_REG_IsConversionOngoing>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d14a      	bne.n	8004098 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004004:	2b00      	cmp	r3, #0
 8004006:	d147      	bne.n	8004098 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004008:	4b30      	ldr	r3, [pc, #192]	; (80040cc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800400a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d027      	beq.n	8004064 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004026:	035b      	lsls	r3, r3, #13
 8004028:	430b      	orrs	r3, r1
 800402a:	431a      	orrs	r2, r3
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004030:	4824      	ldr	r0, [pc, #144]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004032:	f7ff ff83 	bl	8003f3c <LL_ADC_IsEnabled>
 8004036:	4604      	mov	r4, r0
 8004038:	4823      	ldr	r0, [pc, #140]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800403a:	f7ff ff7f 	bl	8003f3c <LL_ADC_IsEnabled>
 800403e:	4603      	mov	r3, r0
 8004040:	4323      	orrs	r3, r4
 8004042:	2b00      	cmp	r3, #0
 8004044:	d132      	bne.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800404e:	f023 030f 	bic.w	r3, r3, #15
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	6811      	ldr	r1, [r2, #0]
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	6892      	ldr	r2, [r2, #8]
 800405a:	430a      	orrs	r2, r1
 800405c:	431a      	orrs	r2, r3
 800405e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004060:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004062:	e023      	b.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800406c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800406e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004070:	4814      	ldr	r0, [pc, #80]	; (80040c4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8004072:	f7ff ff63 	bl	8003f3c <LL_ADC_IsEnabled>
 8004076:	4604      	mov	r4, r0
 8004078:	4813      	ldr	r0, [pc, #76]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800407a:	f7ff ff5f 	bl	8003f3c <LL_ADC_IsEnabled>
 800407e:	4603      	mov	r3, r0
 8004080:	4323      	orrs	r3, r4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d112      	bne.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800408e:	f023 030f 	bic.w	r3, r3, #15
 8004092:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004094:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004096:	e009      	b.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040aa:	e000      	b.n	80040ae <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80040ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80040b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3784      	adds	r7, #132	; 0x84
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd90      	pop	{r4, r7, pc}
 80040c2:	bf00      	nop
 80040c4:	42028000 	.word	0x42028000
 80040c8:	42028100 	.word	0x42028100
 80040cc:	42028300 	.word	0x42028300

080040d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <__NVIC_SetPriorityGrouping+0x44>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ec:	4013      	ands	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <__NVIC_SetPriorityGrouping+0x44>)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	60d3      	str	r3, [r2, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <__NVIC_GetPriorityGrouping+0x18>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	f003 0307 	and.w	r3, r3, #7
}
 8004126:	4618      	mov	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	2b00      	cmp	r3, #0
 8004144:	db0b      	blt.n	800415e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	4907      	ldr	r1, [pc, #28]	; (800416c <__NVIC_EnableIRQ+0x38>)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2001      	movs	r0, #1
 8004156:	fa00 f202 	lsl.w	r2, r0, r2
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000e100 	.word	0xe000e100

08004170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	0152      	lsls	r2, r2, #5
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0152      	lsls	r2, r2, #5
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	2b03      	cmp	r3, #3
 80041e0:	bf28      	it	cs
 80041e2:	2303      	movcs	r3, #3
 80041e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3303      	adds	r3, #3
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d902      	bls.n	80041f4 <NVIC_EncodePriority+0x30>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3b04      	subs	r3, #4
 80041f2:	e000      	b.n	80041f6 <NVIC_EncodePriority+0x32>
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43da      	mvns	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	401a      	ands	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800420c:	f04f 31ff 	mov.w	r1, #4294967295
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43d9      	mvns	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	4313      	orrs	r3, r2
         );
}
 800421e:	4618      	mov	r0, r3
 8004220:	3724      	adds	r7, #36	; 0x24
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423c:	d301      	bcc.n	8004242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800423e:	2301      	movs	r3, #1
 8004240:	e00f      	b.n	8004262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <SysTick_Config+0x40>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800424a:	2107      	movs	r1, #7
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	f7ff ff8e 	bl	8004170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <SysTick_Config+0x40>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <SysTick_Config+0x40>)
 800425c:	2207      	movs	r2, #7
 800425e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	e000e010 	.word	0xe000e010

08004270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff29 	bl	80040d0 <__NVIC_SetPriorityGrouping>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004294:	f7ff ff40 	bl	8004118 <__NVIC_GetPriorityGrouping>
 8004298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7ff ff90 	bl	80041c4 <NVIC_EncodePriority>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff5f 	bl	8004170 <__NVIC_SetPriority>
}
 80042b2:	bf00      	nop
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff33 	bl	8004134 <__NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ffa4 	bl	800422c <SysTick_Config>
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e08d      	b.n	800441e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_DMA_Init+0x138>)
 800430a:	429a      	cmp	r2, r3
 800430c:	d80f      	bhi.n	800432e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b45      	ldr	r3, [pc, #276]	; (800442c <HAL_DMA_Init+0x13c>)
 8004316:	4413      	add	r3, r2
 8004318:	4a45      	ldr	r2, [pc, #276]	; (8004430 <HAL_DMA_Init+0x140>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_DMA_Init+0x144>)
 800432a:	649a      	str	r2, [r3, #72]	; 0x48
 800432c:	e00e      	b.n	800434c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	4b40      	ldr	r3, [pc, #256]	; (8004438 <HAL_DMA_Init+0x148>)
 8004336:	4413      	add	r3, r2
 8004338:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <HAL_DMA_Init+0x140>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	009a      	lsls	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a3c      	ldr	r2, [pc, #240]	; (800443c <HAL_DMA_Init+0x14c>)
 800434a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8004362:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8004366:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800437c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fafe 	bl	80049a0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ac:	d102      	bne.n	80043b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043c8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_DMA_Init+0x104>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d80c      	bhi.n	80043f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fb1e 	bl	8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	e008      	b.n	8004406 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40020407 	.word	0x40020407
 800442c:	bffdfff8 	.word	0xbffdfff8
 8004430:	cccccccd 	.word	0xcccccccd
 8004434:	40020000 	.word	0x40020000
 8004438:	bffdfbf8 	.word	0xbffdfbf8
 800443c:	40020400 	.word	0x40020400

08004440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_DMA_Start_IT+0x20>
 800445c:	2302      	movs	r3, #2
 800445e:	e066      	b.n	800452e <HAL_DMA_Start_IT+0xee>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d155      	bne.n	8004520 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fa43 	bl	8004924 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 020e 	orr.w	r2, r2, #14
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e00f      	b.n	80044d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 020a 	orr.w	r2, r2, #10
 80044d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e005      	b.n	800452c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004528:	2302      	movs	r3, #2
 800452a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004536:	b480      	push	{r7}
 8004538:	b085      	sub	sp, #20
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b02      	cmp	r3, #2
 800454c:	d008      	beq.n	8004560 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2204      	movs	r2, #4
 8004552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e040      	b.n	80045e2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 020e 	bic.w	r2, r2, #14
 800456e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800457e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0201 	bic.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004594:	f003 021c 	and.w	r2, r3, #28
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f202 	lsl.w	r2, r1, r2
 80045a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045ac:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00c      	beq.n	80045d0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80045ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d005      	beq.n	8004612 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2204      	movs	r2, #4
 800460a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	73fb      	strb	r3, [r7, #15]
 8004610:	e047      	b.n	80046a2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 020e 	bic.w	r2, r2, #14
 8004620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0201 	bic.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004640:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004646:	f003 021c 	and.w	r2, r3, #28
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800465e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00c      	beq.n	8004682 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004672:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004676:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004680:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2201      	movs	r2, #1
 8004686:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
    }
  }
  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c8:	f003 031c 	and.w	r3, r3, #28
 80046cc:	2204      	movs	r2, #4
 80046ce:	409a      	lsls	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d053      	beq.n	8004780 <HAL_DMA_IRQHandler+0xd4>
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d04e      	beq.n	8004780 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d024      	beq.n	800473a <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f4:	f003 021c 	and.w	r2, r3, #28
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fc:	2104      	movs	r1, #4
 80046fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004702:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d109      	bne.n	8004726 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80c0 	beq.w	800489c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004724:	e0ba      	b.n	800489c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 80b6 	beq.w	800489c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004738:	e0b0      	b.n	800489c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d107      	bne.n	8004758 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0204 	bic.w	r2, r2, #4
 8004756:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475c:	f003 021c 	and.w	r2, r3, #28
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004764:	2104      	movs	r1, #4
 8004766:	fa01 f202 	lsl.w	r2, r1, r2
 800476a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	2b00      	cmp	r3, #0
 8004772:	f000 8093 	beq.w	800489c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800477e:	e08d      	b.n	800489c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004784:	f003 031c 	and.w	r3, r3, #28
 8004788:	2202      	movs	r2, #2
 800478a:	409a      	lsls	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4013      	ands	r3, r2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d04e      	beq.n	8004832 <HAL_DMA_IRQHandler+0x186>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d049      	beq.n	8004832 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d018      	beq.n	80047de <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d108      	bne.n	80047cc <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d06e      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80047ca:	e069      	b.n	80048a0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d065      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80047dc:	e060      	b.n	80048a0 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 020a 	bic.w	r2, r2, #10
 80047fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004808:	f003 021c 	and.w	r2, r3, #28
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004810:	2102      	movs	r1, #2
 8004812:	fa01 f202 	lsl.w	r2, r1, r2
 8004816:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d03b      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8004830:	e036      	b.n	80048a0 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	f003 031c 	and.w	r3, r3, #28
 800483a:	2208      	movs	r2, #8
 800483c:	409a      	lsls	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02e      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x1f8>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d029      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f022 020e 	bic.w	r2, r2, #14
 800485e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004864:	f003 021c 	and.w	r2, r3, #28
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f202 	lsl.w	r2, r1, r2
 8004872:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800489a:	e002      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800489c:	bf00      	nop
 800489e:	e000      	b.n	80048a2 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80048a0:	bf00      	nop
  return;
 80048a2:	bf00      	nop
 80048a4:	bf00      	nop
}
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d103      	bne.n	80048e0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	72fb      	strb	r3, [r7, #11]
    return status;
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	e01b      	b.n	8004918 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00d      	beq.n	800490e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d004      	beq.n	8004906 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	e003      	b.n	800490e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800490c:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	601a      	str	r2, [r3, #0]

  return status;
 8004916:	7afb      	ldrb	r3, [r7, #11]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
 8004930:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800493a:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d004      	beq.n	800494e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800494c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	f003 021c 	and.w	r2, r3, #28
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495a:	2101      	movs	r1, #1
 800495c:	fa01 f202 	lsl.w	r2, r1, r2
 8004960:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b10      	cmp	r3, #16
 8004970:	d108      	bne.n	8004984 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8004982:	e007      	b.n	8004994 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d80a      	bhi.n	80049ca <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049c0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6513      	str	r3, [r2, #80]	; 0x50
 80049c8:	e007      	b.n	80049da <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	009a      	lsls	r2, r3, #2
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80049d4:	4413      	add	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	3b08      	subs	r3, #8
 80049e2:	4a0c      	ldr	r2, [pc, #48]	; (8004a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80049e4:	fba2 2303 	umull	r2, r3, r2, r3
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 031f 	and.w	r3, r3, #31
 80049f8:	2201      	movs	r2, #1
 80049fa:	409a      	lsls	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40020407 	.word	0x40020407
 8004a10:	40020820 	.word	0x40020820
 8004a14:	cccccccd 	.word	0xcccccccd
 8004a18:	40020880 	.word	0x40020880

08004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4b0b      	ldr	r3, [pc, #44]	; (8004a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	461a      	mov	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a08      	ldr	r2, [pc, #32]	; (8004a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004a3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	2201      	movs	r2, #1
 8004a4a:	409a      	lsls	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	1000823f 	.word	0x1000823f
 8004a60:	40020940 	.word	0x40020940

08004a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a72:	e158      	b.n	8004d26 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	2101      	movs	r1, #1
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	4013      	ands	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 814a 	beq.w	8004d20 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 0303 	and.w	r3, r3, #3
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d005      	beq.n	8004aa4 <HAL_GPIO_Init+0x40>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d130      	bne.n	8004b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ada:	2201      	movs	r2, #1
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae2:	43db      	mvns	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	f003 0201 	and.w	r2, r3, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d017      	beq.n	8004b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43db      	mvns	r3, r3
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4013      	ands	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	689a      	ldr	r2, [r3, #8]
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d123      	bne.n	8004b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	08da      	lsrs	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3208      	adds	r2, #8
 8004b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	220f      	movs	r2, #15
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	691a      	ldr	r2, [r3, #16]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	08da      	lsrs	r2, r3, #3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3208      	adds	r2, #8
 8004b90:	6939      	ldr	r1, [r7, #16]
 8004b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	005b      	lsls	r3, r3, #1
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4013      	ands	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0203 	and.w	r2, r3, #3
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80a4 	beq.w	8004d20 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8004bd8:	4a5a      	ldr	r2, [pc, #360]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	089b      	lsrs	r3, r3, #2
 8004bde:	3318      	adds	r3, #24
 8004be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004be4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	220f      	movs	r2, #15
 8004bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf4:	43db      	mvns	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a52      	ldr	r2, [pc, #328]	; (8004d48 <HAL_GPIO_Init+0x2e4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d025      	beq.n	8004c50 <HAL_GPIO_Init+0x1ec>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a51      	ldr	r2, [pc, #324]	; (8004d4c <HAL_GPIO_Init+0x2e8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d01f      	beq.n	8004c4c <HAL_GPIO_Init+0x1e8>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a50      	ldr	r2, [pc, #320]	; (8004d50 <HAL_GPIO_Init+0x2ec>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d019      	beq.n	8004c48 <HAL_GPIO_Init+0x1e4>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a4f      	ldr	r2, [pc, #316]	; (8004d54 <HAL_GPIO_Init+0x2f0>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d013      	beq.n	8004c44 <HAL_GPIO_Init+0x1e0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a4e      	ldr	r2, [pc, #312]	; (8004d58 <HAL_GPIO_Init+0x2f4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00d      	beq.n	8004c40 <HAL_GPIO_Init+0x1dc>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a4d      	ldr	r2, [pc, #308]	; (8004d5c <HAL_GPIO_Init+0x2f8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <HAL_GPIO_Init+0x1d8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a4c      	ldr	r2, [pc, #304]	; (8004d60 <HAL_GPIO_Init+0x2fc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_GPIO_Init+0x1d4>
 8004c34:	2306      	movs	r3, #6
 8004c36:	e00c      	b.n	8004c52 <HAL_GPIO_Init+0x1ee>
 8004c38:	2307      	movs	r3, #7
 8004c3a:	e00a      	b.n	8004c52 <HAL_GPIO_Init+0x1ee>
 8004c3c:	2305      	movs	r3, #5
 8004c3e:	e008      	b.n	8004c52 <HAL_GPIO_Init+0x1ee>
 8004c40:	2304      	movs	r3, #4
 8004c42:	e006      	b.n	8004c52 <HAL_GPIO_Init+0x1ee>
 8004c44:	2303      	movs	r3, #3
 8004c46:	e004      	b.n	8004c52 <HAL_GPIO_Init+0x1ee>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e002      	b.n	8004c52 <HAL_GPIO_Init+0x1ee>
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_GPIO_Init+0x1ee>
 8004c50:	2300      	movs	r3, #0
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	f002 0203 	and.w	r2, r2, #3
 8004c58:	00d2      	lsls	r2, r2, #3
 8004c5a:	4093      	lsls	r3, r2
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004c62:	4938      	ldr	r1, [pc, #224]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	089b      	lsrs	r3, r3, #2
 8004c68:	3318      	adds	r3, #24
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c70:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c94:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c9a:	4b2a      	ldr	r3, [pc, #168]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004cbe:	4a21      	ldr	r2, [pc, #132]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	43db      	mvns	r3, r3
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cea:	4a16      	ldr	r2, [pc, #88]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8004cf2:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4013      	ands	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004d18:	4a0a      	ldr	r2, [pc, #40]	; (8004d44 <HAL_GPIO_Init+0x2e0>)
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3301      	adds	r3, #1
 8004d24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f47f ae9f 	bne.w	8004a74 <HAL_GPIO_Init+0x10>
  }
}
 8004d36:	bf00      	nop
 8004d38:	bf00      	nop
 8004d3a:	371c      	adds	r7, #28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	4002f400 	.word	0x4002f400
 8004d48:	42020000 	.word	0x42020000
 8004d4c:	42020400 	.word	0x42020400
 8004d50:	42020800 	.word	0x42020800
 8004d54:	42020c00 	.word	0x42020c00
 8004d58:	42021000 	.word	0x42021000
 8004d5c:	42021400 	.word	0x42021400
 8004d60:	42021800 	.word	0x42021800

08004d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	807b      	strh	r3, [r7, #2]
 8004d70:	4613      	mov	r3, r2
 8004d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d74:	787b      	ldrb	r3, [r7, #1]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d7a:	887a      	ldrh	r2, [r7, #2]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d80:	e002      	b.n	8004d88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d101      	bne.n	8004da6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e081      	b.n	8004eaa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d106      	bne.n	8004dc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fd fa4e 	bl	800225c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2224      	movs	r2, #36	; 0x24
 8004dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0201 	bic.w	r2, r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004de4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004df4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d107      	bne.n	8004e0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689a      	ldr	r2, [r3, #8]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e0a:	609a      	str	r2, [r3, #8]
 8004e0c:	e006      	b.n	8004e1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d104      	bne.n	8004e2e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e2c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69d9      	ldr	r1, [r3, #28]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1a      	ldr	r2, [r3, #32]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0201 	orr.w	r2, r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b20      	cmp	r3, #32
 8004ec6:	d138      	bne.n	8004f3a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d101      	bne.n	8004ed6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	e032      	b.n	8004f3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2224      	movs	r2, #36	; 0x24
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f022 0201 	bic.w	r2, r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f04:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0201 	orr.w	r2, r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d139      	bne.n	8004fd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d101      	bne.n	8004f6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	e033      	b.n	8004fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2224      	movs	r2, #36	; 0x24
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0201 	bic.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	e000      	b.n	8004fd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fd2:	2302      	movs	r3, #2
  }
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe2:	b08b      	sub	sp, #44	; 0x2c
 8004fe4:	af06      	add	r7, sp, #24
 8004fe6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e0cb      	b.n	800518a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fd ffc2 	bl	8002f90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2203      	movs	r2, #3
 8005010:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f003 fef9 	bl	8008e10 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
 8005022:	e040      	b.n	80050a6 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005024:	7bfb      	ldrb	r3, [r7, #15]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	1c5a      	adds	r2, r3, #1
 800502a:	4613      	mov	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	440b      	add	r3, r1
 8005034:	3301      	adds	r3, #1
 8005036:	2201      	movs	r2, #1
 8005038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800503a:	7bfb      	ldrb	r3, [r7, #15]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	4613      	mov	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4413      	add	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	440b      	add	r3, r1
 800504a:	7bfa      	ldrb	r2, [r7, #15]
 800504c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	440b      	add	r3, r1
 800505e:	3303      	adds	r3, #3
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005064:	7bfa      	ldrb	r2, [r7, #15]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	440b      	add	r3, r1
 8005072:	3338      	adds	r3, #56	; 0x38
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	440b      	add	r3, r1
 8005086:	333c      	adds	r3, #60	; 0x3c
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800508c:	7bfa      	ldrb	r2, [r7, #15]
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	3340      	adds	r3, #64	; 0x40
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	3301      	adds	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
 80050a6:	7bfa      	ldrb	r2, [r7, #15]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d3b9      	bcc.n	8005024 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050b0:	2300      	movs	r3, #0
 80050b2:	73fb      	strb	r3, [r7, #15]
 80050b4:	e044      	b.n	8005140 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	440b      	add	r3, r1
 80050c4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	6879      	ldr	r1, [r7, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	440b      	add	r3, r1
 80050da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80050de:	7bfa      	ldrb	r2, [r7, #15]
 80050e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050e2:	7bfa      	ldrb	r2, [r7, #15]
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	440b      	add	r3, r1
 80050f0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050f8:	7bfa      	ldrb	r2, [r7, #15]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	440b      	add	r3, r1
 8005106:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	00db      	lsls	r3, r3, #3
 800511a:	440b      	add	r3, r1
 800511c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	00db      	lsls	r3, r3, #3
 8005130:	440b      	add	r3, r1
 8005132:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	3301      	adds	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	429a      	cmp	r2, r3
 8005148:	d3b5      	bcc.n	80050b6 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	687e      	ldr	r6, [r7, #4]
 8005152:	466d      	mov	r5, sp
 8005154:	f106 0410 	add.w	r4, r6, #16
 8005158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800515a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	602b      	str	r3, [r5, #0]
 8005160:	1d33      	adds	r3, r6, #4
 8005162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005164:	6838      	ldr	r0, [r7, #0]
 8005166:	f003 fe6e 	bl	8008e46 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d102      	bne.n	8005188 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f805 	bl	8005192 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005192 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	f043 0301 	orr.w	r3, r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f043 0302 	orr.w	r3, r3, #2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
	...

080051e8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a04      	ldr	r2, [pc, #16]	; (8005204 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80051f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f6:	6013      	str	r3, [r2, #0]
}
 80051f8:	bf00      	nop
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40007000 	.word	0x40007000

08005208 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800520c:	4b04      	ldr	r3, [pc, #16]	; (8005220 <HAL_PWREx_GetVoltageRange+0x18>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005214:	4618      	mov	r0, r3
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40007000 	.word	0x40007000

08005224 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005234:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8005236:	f000 f861 	bl	80052fc <HAL_PWREx_SMPS_GetEffectiveMode>
 800523a:	4603      	mov	r3, r0
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005240:	d101      	bne.n	8005246 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e03e      	b.n	80052c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8005246:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800524e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005252:	d101      	bne.n	8005258 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e035      	b.n	80052c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	d101      	bne.n	8005264 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e02f      	b.n	80052c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800526c:	4917      	ldr	r1, [pc, #92]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4313      	orrs	r3, r2
 8005272:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8005274:	4b16      	ldr	r3, [pc, #88]	; (80052d0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	4a16      	ldr	r2, [pc, #88]	; (80052d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	09db      	lsrs	r3, r3, #7
 8005282:	2232      	movs	r2, #50	; 0x32
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800528a:	fba2 2303 	umull	r2, r3, r2, r3
 800528e:	08db      	lsrs	r3, r3, #3
 8005290:	3301      	adds	r3, #1
 8005292:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005294:	e002      	b.n	800529c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	3b01      	subs	r3, #1
 800529a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800529c:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a8:	d102      	bne.n	80052b0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f2      	bne.n	8005296 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052bc:	d101      	bne.n	80052c2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e000      	b.n	80052c4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3710      	adds	r7, #16
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40007000 	.word	0x40007000
 80052d0:	20000008 	.word	0x20000008
 80052d4:	0a7c5ac5 	.word	0x0a7c5ac5
 80052d8:	cccccccd 	.word	0xcccccccd

080052dc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a04      	ldr	r2, [pc, #16]	; (80052f8 <HAL_PWREx_EnableVddIO2+0x1c>)
 80052e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ea:	6053      	str	r3, [r2, #4]
}
 80052ec:	bf00      	nop
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	40007000 	.word	0x40007000

080052fc <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8005302:	4b0f      	ldr	r3, [pc, #60]	; (8005340 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8005312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e00a      	b.n	8005330 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d103      	bne.n	800532c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8005324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005328:	607b      	str	r3, [r7, #4]
 800532a:	e001      	b.n	8005330 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 800532c:	2300      	movs	r3, #0
 800532e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8005330:	687b      	ldr	r3, [r7, #4]
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40007000 	.word	0x40007000

08005344 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d102      	bne.n	8005358 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	f000 bcc2 	b.w	8005cdc <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005358:	4b99      	ldr	r3, [pc, #612]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005362:	4b97      	ldr	r3, [pc, #604]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 80e9 	beq.w	800554c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d006      	beq.n	800538e <HAL_RCC_OscConfig+0x4a>
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b0c      	cmp	r3, #12
 8005384:	f040 8083 	bne.w	800548e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d17f      	bne.n	800548e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800538e:	4b8c      	ldr	r3, [pc, #560]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d006      	beq.n	80053a8 <HAL_RCC_OscConfig+0x64>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69db      	ldr	r3, [r3, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d102      	bne.n	80053a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	f000 bc9a 	b.w	8005cdc <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053ac:	4b84      	ldr	r3, [pc, #528]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HAL_RCC_OscConfig+0x7e>
 80053b8:	4b81      	ldr	r3, [pc, #516]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053c0:	e005      	b.n	80053ce <HAL_RCC_OscConfig+0x8a>
 80053c2:	4b7f      	ldr	r3, [pc, #508]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80053c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d224      	bcs.n	800541c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fe9c 	bl	8006114 <RCC_SetFlashLatencyFromMSIRange>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f000 bc7a 	b.w	8005cdc <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053e8:	4b75      	ldr	r3, [pc, #468]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a74      	ldr	r2, [pc, #464]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80053ee:	f043 0308 	orr.w	r3, r3, #8
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b72      	ldr	r3, [pc, #456]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	496f      	ldr	r1, [pc, #444]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005402:	4313      	orrs	r3, r2
 8005404:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005406:	4b6e      	ldr	r3, [pc, #440]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	496a      	ldr	r1, [pc, #424]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
 800541a:	e026      	b.n	800546a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800541c:	4b68      	ldr	r3, [pc, #416]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a67      	ldr	r2, [pc, #412]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005422:	f043 0308 	orr.w	r3, r3, #8
 8005426:	6013      	str	r3, [r2, #0]
 8005428:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	4962      	ldr	r1, [pc, #392]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543a:	4b61      	ldr	r3, [pc, #388]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	495d      	ldr	r1, [pc, #372]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fe5b 	bl	8006114 <RCC_SetFlashLatencyFromMSIRange>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	f000 bc39 	b.w	8005cdc <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800546a:	f000 fe17 	bl	800609c <HAL_RCC_GetHCLKFreq>
 800546e:	4603      	mov	r3, r0
 8005470:	4a54      	ldr	r2, [pc, #336]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005472:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005474:	4b54      	ldr	r3, [pc, #336]	; (80055c8 <HAL_RCC_OscConfig+0x284>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f7fd fe2d 	bl	80030d8 <HAL_InitTick>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d060      	beq.n	800554a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	f000 bc27 	b.w	8005cdc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69db      	ldr	r3, [r3, #28]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d039      	beq.n	800550a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005496:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a49      	ldr	r2, [pc, #292]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800549c:	f043 0301 	orr.w	r3, r3, #1
 80054a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054a2:	f7fd fe69 	bl	8003178 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054a8:	e00f      	b.n	80054ca <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054aa:	f7fd fe65 	bl	8003178 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d908      	bls.n	80054ca <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054b8:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d102      	bne.n	80054ca <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	f000 bc09 	b.w	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054ca:	4b3d      	ldr	r3, [pc, #244]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0e9      	beq.n	80054aa <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054d6:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a39      	ldr	r2, [pc, #228]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80054dc:	f043 0308 	orr.w	r3, r3, #8
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4b37      	ldr	r3, [pc, #220]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	4934      	ldr	r1, [pc, #208]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	021b      	lsls	r3, r3, #8
 8005502:	492f      	ldr	r1, [pc, #188]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005504:	4313      	orrs	r3, r2
 8005506:	604b      	str	r3, [r1, #4]
 8005508:	e020      	b.n	800554c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800550a:	4b2d      	ldr	r3, [pc, #180]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005510:	f023 0301 	bic.w	r3, r3, #1
 8005514:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005516:	f7fd fe2f 	bl	8003178 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800551c:	e00e      	b.n	800553c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800551e:	f7fd fe2b 	bl	8003178 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d907      	bls.n	800553c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800552c:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e3cf      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800553c:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1ea      	bne.n	800551e <HAL_RCC_OscConfig+0x1da>
 8005548:	e000      	b.n	800554c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800554a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0301 	and.w	r3, r3, #1
 8005554:	2b00      	cmp	r3, #0
 8005556:	d07e      	beq.n	8005656 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2b08      	cmp	r3, #8
 800555c:	d005      	beq.n	800556a <HAL_RCC_OscConfig+0x226>
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	2b0c      	cmp	r3, #12
 8005562:	d10e      	bne.n	8005582 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d10b      	bne.n	8005582 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556a:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d06e      	beq.n	8005654 <HAL_RCC_OscConfig+0x310>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d16a      	bne.n	8005654 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e3ac      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d106      	bne.n	800559a <HAL_RCC_OscConfig+0x256>
 800558c:	4b0c      	ldr	r3, [pc, #48]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0b      	ldr	r2, [pc, #44]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 8005592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	e024      	b.n	80055e4 <HAL_RCC_OscConfig+0x2a0>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a2:	d113      	bne.n	80055cc <HAL_RCC_OscConfig+0x288>
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a05      	ldr	r2, [pc, #20]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80055aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a02      	ldr	r2, [pc, #8]	; (80055c0 <HAL_RCC_OscConfig+0x27c>)
 80055b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ba:	6013      	str	r3, [r2, #0]
 80055bc:	e012      	b.n	80055e4 <HAL_RCC_OscConfig+0x2a0>
 80055be:	bf00      	nop
 80055c0:	40021000 	.word	0x40021000
 80055c4:	20000008 	.word	0x20000008
 80055c8:	2000000c 	.word	0x2000000c
 80055cc:	4b8b      	ldr	r3, [pc, #556]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a8a      	ldr	r2, [pc, #552]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80055d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d6:	6013      	str	r3, [r2, #0]
 80055d8:	4b88      	ldr	r3, [pc, #544]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a87      	ldr	r2, [pc, #540]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80055de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d019      	beq.n	8005620 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ec:	f7fd fdc4 	bl	8003178 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055f2:	e00e      	b.n	8005612 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f4:	f7fd fdc0 	bl	8003178 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	2b64      	cmp	r3, #100	; 0x64
 8005600:	d907      	bls.n	8005612 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005602:	4b7e      	ldr	r3, [pc, #504]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e364      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005612:	4b7a      	ldr	r3, [pc, #488]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ea      	beq.n	80055f4 <HAL_RCC_OscConfig+0x2b0>
 800561e:	e01a      	b.n	8005656 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005620:	f7fd fdaa 	bl	8003178 <HAL_GetTick>
 8005624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005626:	e00e      	b.n	8005646 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005628:	f7fd fda6 	bl	8003178 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b64      	cmp	r3, #100	; 0x64
 8005634:	d907      	bls.n	8005646 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005636:	4b71      	ldr	r3, [pc, #452]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e34a      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005646:	4b6d      	ldr	r3, [pc, #436]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1ea      	bne.n	8005628 <HAL_RCC_OscConfig+0x2e4>
 8005652:	e000      	b.n	8005656 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0302 	and.w	r3, r3, #2
 800565e:	2b00      	cmp	r3, #0
 8005660:	d06c      	beq.n	800573c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	2b04      	cmp	r3, #4
 8005666:	d005      	beq.n	8005674 <HAL_RCC_OscConfig+0x330>
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b0c      	cmp	r3, #12
 800566c:	d119      	bne.n	80056a2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b02      	cmp	r3, #2
 8005672:	d116      	bne.n	80056a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005674:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_RCC_OscConfig+0x348>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e327      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568c:	4b5b      	ldr	r3, [pc, #364]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	061b      	lsls	r3, r3, #24
 800569a:	4958      	ldr	r1, [pc, #352]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 800569c:	4313      	orrs	r3, r2
 800569e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a0:	e04c      	b.n	800573c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d029      	beq.n	80056fe <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056aa:	4b54      	ldr	r3, [pc, #336]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a53      	ldr	r2, [pc, #332]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80056b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fd fd5f 	bl	8003178 <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056bc:	e00e      	b.n	80056dc <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056be:	f7fd fd5b 	bl	8003178 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d907      	bls.n	80056dc <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056cc:	4b4b      	ldr	r3, [pc, #300]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e2ff      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056dc:	4b47      	ldr	r3, [pc, #284]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ea      	beq.n	80056be <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e8:	4b44      	ldr	r3, [pc, #272]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	4941      	ldr	r1, [pc, #260]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]
 80056fc:	e01e      	b.n	800573c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fe:	4b3f      	ldr	r3, [pc, #252]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a3e      	ldr	r2, [pc, #248]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800570a:	f7fd fd35 	bl	8003178 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005710:	e00e      	b.n	8005730 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005712:	f7fd fd31 	bl	8003178 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d907      	bls.n	8005730 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005720:	4b36      	ldr	r3, [pc, #216]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d001      	beq.n	8005730 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e2d5      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ea      	bne.n	8005712 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d062      	beq.n	800580e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d038      	beq.n	80057c2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d108      	bne.n	800576a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 800575a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800575e:	4a27      	ldr	r2, [pc, #156]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005760:	f023 0310 	bic.w	r3, r3, #16
 8005764:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005768:	e007      	b.n	800577a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800576a:	4b24      	ldr	r3, [pc, #144]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 800576c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005770:	4a22      	ldr	r2, [pc, #136]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005772:	f043 0310 	orr.w	r3, r3, #16
 8005776:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800577a:	4b20      	ldr	r3, [pc, #128]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 800577c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005780:	4a1e      	ldr	r2, [pc, #120]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 8005782:	f043 0301 	orr.w	r3, r3, #1
 8005786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578a:	f7fd fcf5 	bl	8003178 <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005790:	e00f      	b.n	80057b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005792:	f7fd fcf1 	bl	8003178 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b07      	cmp	r3, #7
 800579e:	d908      	bls.n	80057b2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80057a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e294      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80057b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b8:	f003 0302 	and.w	r3, r3, #2
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0e8      	beq.n	8005792 <HAL_RCC_OscConfig+0x44e>
 80057c0:	e025      	b.n	800580e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80057c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057c8:	4a0c      	ldr	r2, [pc, #48]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d2:	f7fd fcd1 	bl	8003178 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d8:	e012      	b.n	8005800 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057da:	f7fd fccd 	bl	8003178 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b07      	cmp	r3, #7
 80057e6:	d90b      	bls.n	8005800 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <HAL_RCC_OscConfig+0x4b8>)
 80057ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d004      	beq.n	8005800 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e270      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
 80057fa:	bf00      	nop
 80057fc:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005800:	4ba8      	ldr	r3, [pc, #672]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e5      	bne.n	80057da <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0304 	and.w	r3, r3, #4
 8005816:	2b00      	cmp	r3, #0
 8005818:	f000 812d 	beq.w	8005a76 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581c:	2300      	movs	r3, #0
 800581e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005820:	4ba0      	ldr	r3, [pc, #640]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10d      	bne.n	8005848 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582c:	4b9d      	ldr	r3, [pc, #628]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 800582e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005830:	4a9c      	ldr	r2, [pc, #624]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	6593      	str	r3, [r2, #88]	; 0x58
 8005838:	4b9a      	ldr	r3, [pc, #616]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 800583a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005840:	60bb      	str	r3, [r7, #8]
 8005842:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005844:	2301      	movs	r3, #1
 8005846:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005848:	4b97      	ldr	r3, [pc, #604]	; (8005aa8 <HAL_RCC_OscConfig+0x764>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11e      	bne.n	8005892 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005854:	4b94      	ldr	r3, [pc, #592]	; (8005aa8 <HAL_RCC_OscConfig+0x764>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a93      	ldr	r2, [pc, #588]	; (8005aa8 <HAL_RCC_OscConfig+0x764>)
 800585a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005860:	f7fd fc8a 	bl	8003178 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005866:	e00e      	b.n	8005886 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005868:	f7fd fc86 	bl	8003178 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d907      	bls.n	8005886 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005876:	4b8c      	ldr	r3, [pc, #560]	; (8005aa8 <HAL_RCC_OscConfig+0x764>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e22a      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005886:	4b88      	ldr	r3, [pc, #544]	; (8005aa8 <HAL_RCC_OscConfig+0x764>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d0ea      	beq.n	8005868 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b00      	cmp	r3, #0
 800589c:	d01f      	beq.n	80058de <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d010      	beq.n	80058cc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058aa:	4b7e      	ldr	r3, [pc, #504]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b0:	4a7c      	ldr	r2, [pc, #496]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058b2:	f043 0304 	orr.w	r3, r3, #4
 80058b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058ba:	4b7a      	ldr	r3, [pc, #488]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	4a78      	ldr	r2, [pc, #480]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058c2:	f043 0301 	orr.w	r3, r3, #1
 80058c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ca:	e018      	b.n	80058fe <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058cc:	4b75      	ldr	r3, [pc, #468]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d2:	4a74      	ldr	r2, [pc, #464]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058dc:	e00f      	b.n	80058fe <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058de:	4b71      	ldr	r3, [pc, #452]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	4a6f      	ldr	r2, [pc, #444]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058ee:	4b6d      	ldr	r3, [pc, #436]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f4:	4a6b      	ldr	r2, [pc, #428]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80058f6:	f023 0304 	bic.w	r3, r3, #4
 80058fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d068      	beq.n	80059d8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005906:	f7fd fc37 	bl	8003178 <HAL_GetTick>
 800590a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800590c:	e011      	b.n	8005932 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800590e:	f7fd fc33 	bl	8003178 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	f241 3288 	movw	r2, #5000	; 0x1388
 800591c:	4293      	cmp	r3, r2
 800591e:	d908      	bls.n	8005932 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005920:	4b60      	ldr	r3, [pc, #384]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e1d4      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005932:	4b5c      	ldr	r3, [pc, #368]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0e6      	beq.n	800590e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b00      	cmp	r3, #0
 800594a:	d022      	beq.n	8005992 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800594c:	4b55      	ldr	r3, [pc, #340]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	4a54      	ldr	r2, [pc, #336]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800595c:	e011      	b.n	8005982 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fd fc0b 	bl	8003178 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f241 3288 	movw	r2, #5000	; 0x1388
 800596c:	4293      	cmp	r3, r2
 800596e:	d908      	bls.n	8005982 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005970:	4b4c      	ldr	r3, [pc, #304]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e1ac      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005982:	4b48      	ldr	r3, [pc, #288]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0e6      	beq.n	800595e <HAL_RCC_OscConfig+0x61a>
 8005990:	e068      	b.n	8005a64 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005992:	4b44      	ldr	r3, [pc, #272]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005998:	4a42      	ldr	r2, [pc, #264]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 800599a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800599e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059a2:	e011      	b.n	80059c8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a4:	f7fd fbe8 	bl	8003178 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d908      	bls.n	80059c8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059b6:	4b3b      	ldr	r3, [pc, #236]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e189      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059c8:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e6      	bne.n	80059a4 <HAL_RCC_OscConfig+0x660>
 80059d6:	e045      	b.n	8005a64 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d8:	f7fd fbce 	bl	8003178 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059de:	e011      	b.n	8005a04 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059e0:	f7fd fbca 	bl	8003178 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d908      	bls.n	8005a04 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059f2:	4b2c      	ldr	r3, [pc, #176]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 80059f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e16b      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a04:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e6      	bne.n	80059e0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005a12:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d021      	beq.n	8005a64 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a20:	4b20      	ldr	r3, [pc, #128]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a26:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a30:	e011      	b.n	8005a56 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fd fba1 	bl	8003178 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d908      	bls.n	8005a56 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a44:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e142      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a56:	4b13      	ldr	r3, [pc, #76]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1e6      	bne.n	8005a32 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a64:	7ffb      	ldrb	r3, [r7, #31]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d105      	bne.n	8005a76 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6a:	4b0e      	ldr	r3, [pc, #56]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0320 	and.w	r3, r3, #32
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d04f      	beq.n	8005b22 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d028      	beq.n	8005adc <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a8a:	4b06      	ldr	r3, [pc, #24]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a90:	4a04      	ldr	r2, [pc, #16]	; (8005aa4 <HAL_RCC_OscConfig+0x760>)
 8005a92:	f043 0301 	orr.w	r3, r3, #1
 8005a96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a9a:	f7fd fb6d 	bl	8003178 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aa0:	e014      	b.n	8005acc <HAL_RCC_OscConfig+0x788>
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005aac:	f7fd fb64 	bl	8003178 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d908      	bls.n	8005acc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005aba:	4b8a      	ldr	r3, [pc, #552]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e107      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005acc:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005ace:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0e8      	beq.n	8005aac <HAL_RCC_OscConfig+0x768>
 8005ada:	e022      	b.n	8005b22 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005adc:	4b81      	ldr	r3, [pc, #516]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ae2:	4a80      	ldr	r2, [pc, #512]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aec:	f7fd fb44 	bl	8003178 <HAL_GetTick>
 8005af0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005af2:	e00f      	b.n	8005b14 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005af4:	f7fd fb40 	bl	8003178 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d908      	bls.n	8005b14 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b02:	4b78      	ldr	r3, [pc, #480]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e0e3      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005b14:	4b73      	ldr	r3, [pc, #460]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1e8      	bne.n	8005af4 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 80d7 	beq.w	8005cda <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b2c:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b0c      	cmp	r3, #12
 8005b36:	f000 8091 	beq.w	8005c5c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d166      	bne.n	8005c10 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	4b68      	ldr	r3, [pc, #416]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a67      	ldr	r2, [pc, #412]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fd fb13 	bl	8003178 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b54:	e00e      	b.n	8005b74 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b56:	f7fd fb0f 	bl	8003178 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d907      	bls.n	8005b74 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b64:	4b5f      	ldr	r3, [pc, #380]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e0b3      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b74:	4b5b      	ldr	r3, [pc, #364]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ea      	bne.n	8005b56 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b80:	4b58      	ldr	r3, [pc, #352]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	4b58      	ldr	r3, [pc, #352]	; (8005ce8 <HAL_RCC_OscConfig+0x9a4>)
 8005b86:	4013      	ands	r3, r2
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b90:	3a01      	subs	r2, #1
 8005b92:	0112      	lsls	r2, r2, #4
 8005b94:	4311      	orrs	r1, r2
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b9a:	0212      	lsls	r2, r2, #8
 8005b9c:	4311      	orrs	r1, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ba2:	0852      	lsrs	r2, r2, #1
 8005ba4:	3a01      	subs	r2, #1
 8005ba6:	0552      	lsls	r2, r2, #21
 8005ba8:	4311      	orrs	r1, r2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005bae:	0852      	lsrs	r2, r2, #1
 8005bb0:	3a01      	subs	r2, #1
 8005bb2:	0652      	lsls	r2, r2, #25
 8005bb4:	4311      	orrs	r1, r2
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bba:	06d2      	lsls	r2, r2, #27
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	4949      	ldr	r1, [pc, #292]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc4:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a46      	ldr	r2, [pc, #280]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005bca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bd0:	4b44      	ldr	r3, [pc, #272]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	4a43      	ldr	r2, [pc, #268]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005bd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bdc:	f7fd facc 	bl	8003178 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005be2:	e00e      	b.n	8005c02 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fd fac8 	bl	8003178 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d907      	bls.n	8005c02 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf2:	4b3c      	ldr	r3, [pc, #240]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e06c      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c02:	4b38      	ldr	r3, [pc, #224]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ea      	beq.n	8005be4 <HAL_RCC_OscConfig+0x8a0>
 8005c0e:	e064      	b.n	8005cda <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c10:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a33      	ldr	r2, [pc, #204]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fd faac 	bl	8003178 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c22:	e00e      	b.n	8005c42 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c24:	f7fd faa8 	bl	8003178 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d907      	bls.n	8005c42 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c32:	4b2c      	ldr	r3, [pc, #176]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e04c      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c42:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1ea      	bne.n	8005c24 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c4e:	4b25      	ldr	r3, [pc, #148]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	4924      	ldr	r1, [pc, #144]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c54:	4b25      	ldr	r3, [pc, #148]	; (8005cec <HAL_RCC_OscConfig+0x9a8>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	60cb      	str	r3, [r1, #12]
 8005c5a:	e03e      	b.n	8005cda <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d101      	bne.n	8005c68 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e039      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8005c68:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <HAL_RCC_OscConfig+0x9a0>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f003 0203 	and.w	r2, r3, #3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d12c      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	3b01      	subs	r3, #1
 8005c88:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d123      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d11b      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d113      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d109      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ccc:	085b      	lsrs	r3, r3, #1
 8005cce:	3b01      	subs	r3, #1
 8005cd0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d001      	beq.n	8005cda <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3720      	adds	r7, #32
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40021000 	.word	0x40021000
 8005ce8:	019f800c 	.word	0x019f800c
 8005cec:	feeefffc 	.word	0xfeeefffc

08005cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e11c      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d08:	4b90      	ldr	r3, [pc, #576]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d910      	bls.n	8005d38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d16:	4b8d      	ldr	r3, [pc, #564]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 020f 	bic.w	r2, r3, #15
 8005d1e:	498b      	ldr	r1, [pc, #556]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b89      	ldr	r3, [pc, #548]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e104      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	4b81      	ldr	r3, [pc, #516]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d908      	bls.n	8005d66 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d54:	4b7e      	ldr	r3, [pc, #504]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	497b      	ldr	r1, [pc, #492]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 8085 	beq.w	8005e7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d11f      	bne.n	8005dbc <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d7c:	4b74      	ldr	r3, [pc, #464]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e0da      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005d8c:	f000 fa26 	bl	80061dc <RCC_GetSysClockFreqFromPLLSource>
 8005d90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4a6f      	ldr	r2, [pc, #444]	; (8005f54 <HAL_RCC_ClockConfig+0x264>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d947      	bls.n	8005e2a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005d9a:	4b6d      	ldr	r3, [pc, #436]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d141      	bne.n	8005e2a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005da6:	4b6a      	ldr	r3, [pc, #424]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dae:	4a68      	ldr	r2, [pc, #416]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005db6:	2380      	movs	r3, #128	; 0x80
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	e036      	b.n	8005e2a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b02      	cmp	r3, #2
 8005dc2:	d107      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc4:	4b62      	ldr	r3, [pc, #392]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d115      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e0b6      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d107      	bne.n	8005dec <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ddc:	4b5c      	ldr	r3, [pc, #368]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0aa      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dec:	4b58      	ldr	r3, [pc, #352]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e0a2      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005dfc:	f000 f8b0 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4a53      	ldr	r2, [pc, #332]	; (8005f54 <HAL_RCC_ClockConfig+0x264>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d90f      	bls.n	8005e2a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005e0a:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005e16:	4b4e      	ldr	r3, [pc, #312]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e1e:	4a4c      	ldr	r2, [pc, #304]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005e26:	2380      	movs	r3, #128	; 0x80
 8005e28:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e2a:	4b49      	ldr	r3, [pc, #292]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f023 0203 	bic.w	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4946      	ldr	r1, [pc, #280]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e3c:	f7fd f99c 	bl	8003178 <HAL_GetTick>
 8005e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e42:	e013      	b.n	8005e6c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e44:	f7fd f998 	bl	8003178 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d90a      	bls.n	8005e6c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f003 020c 	and.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e06a      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e6c:	4b38      	ldr	r3, [pc, #224]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	f003 020c 	and.w	r2, r3, #12
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d1e2      	bne.n	8005e44 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b80      	cmp	r3, #128	; 0x80
 8005e82:	d105      	bne.n	8005e90 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005e84:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4a31      	ldr	r2, [pc, #196]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e8e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d010      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d208      	bcs.n	8005ebe <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eac:	4b28      	ldr	r3, [pc, #160]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4925      	ldr	r1, [pc, #148]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ebe:	4b23      	ldr	r3, [pc, #140]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 030f 	and.w	r3, r3, #15
 8005ec6:	683a      	ldr	r2, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d210      	bcs.n	8005eee <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ecc:	4b1f      	ldr	r3, [pc, #124]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f023 020f 	bic.w	r2, r3, #15
 8005ed4:	491d      	ldr	r1, [pc, #116]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005edc:	4b1b      	ldr	r3, [pc, #108]	; (8005f4c <HAL_RCC_ClockConfig+0x25c>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d001      	beq.n	8005eee <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e029      	b.n	8005f42 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d008      	beq.n	8005f0c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	4912      	ldr	r1, [pc, #72]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d009      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f18:	4b0d      	ldr	r3, [pc, #52]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	00db      	lsls	r3, r3, #3
 8005f26:	490a      	ldr	r1, [pc, #40]	; (8005f50 <HAL_RCC_ClockConfig+0x260>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005f2c:	f000 f8b6 	bl	800609c <HAL_RCC_GetHCLKFreq>
 8005f30:	4603      	mov	r3, r0
 8005f32:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <HAL_RCC_ClockConfig+0x268>)
 8005f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <HAL_RCC_ClockConfig+0x26c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fd f8cc 	bl	80030d8 <HAL_InitTick>
 8005f40:	4603      	mov	r3, r0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40022000 	.word	0x40022000
 8005f50:	40021000 	.word	0x40021000
 8005f54:	04c4b400 	.word	0x04c4b400
 8005f58:	20000008 	.word	0x20000008
 8005f5c:	2000000c 	.word	0x2000000c

08005f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b089      	sub	sp, #36	; 0x24
 8005f64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f6e:	4b47      	ldr	r3, [pc, #284]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	f003 030c 	and.w	r3, r3, #12
 8005f76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f78:	4b44      	ldr	r3, [pc, #272]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d005      	beq.n	8005f94 <HAL_RCC_GetSysClockFreq+0x34>
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	2b0c      	cmp	r3, #12
 8005f8c:	d121      	bne.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d11e      	bne.n	8005fd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f94:	4b3d      	ldr	r3, [pc, #244]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d107      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fa0:	4b3a      	ldr	r3, [pc, #232]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	61fb      	str	r3, [r7, #28]
 8005fae:	e005      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fb0:	4b36      	ldr	r3, [pc, #216]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	091b      	lsrs	r3, r3, #4
 8005fb6:	f003 030f 	and.w	r3, r3, #15
 8005fba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005fbc:	4a34      	ldr	r2, [pc, #208]	; (8006090 <HAL_RCC_GetSysClockFreq+0x130>)
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10d      	bne.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005fd0:	e00a      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b04      	cmp	r3, #4
 8005fd6:	d102      	bne.n	8005fde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fd8:	4b2e      	ldr	r3, [pc, #184]	; (8006094 <HAL_RCC_GetSysClockFreq+0x134>)
 8005fda:	61bb      	str	r3, [r7, #24]
 8005fdc:	e004      	b.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fe4:	4b2c      	ldr	r3, [pc, #176]	; (8006098 <HAL_RCC_GetSysClockFreq+0x138>)
 8005fe6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	2b0c      	cmp	r3, #12
 8005fec:	d146      	bne.n	800607c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005fee:	4b27      	ldr	r3, [pc, #156]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ff8:	4b24      	ldr	r3, [pc, #144]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	091b      	lsrs	r3, r3, #4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	3301      	adds	r3, #1
 8006004:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b02      	cmp	r3, #2
 800600a:	d003      	beq.n	8006014 <HAL_RCC_GetSysClockFreq+0xb4>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b03      	cmp	r3, #3
 8006010:	d00d      	beq.n	800602e <HAL_RCC_GetSysClockFreq+0xce>
 8006012:	e019      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006014:	4a1f      	ldr	r2, [pc, #124]	; (8006094 <HAL_RCC_GetSysClockFreq+0x134>)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	4a1b      	ldr	r2, [pc, #108]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 800601e:	68d2      	ldr	r2, [r2, #12]
 8006020:	0a12      	lsrs	r2, r2, #8
 8006022:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	617b      	str	r3, [r7, #20]
        break;
 800602c:	e019      	b.n	8006062 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800602e:	4a1a      	ldr	r2, [pc, #104]	; (8006098 <HAL_RCC_GetSysClockFreq+0x138>)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	fbb2 f3f3 	udiv	r3, r2, r3
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006038:	68d2      	ldr	r2, [r2, #12]
 800603a:	0a12      	lsrs	r2, r2, #8
 800603c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006040:	fb02 f303 	mul.w	r3, r2, r3
 8006044:	617b      	str	r3, [r7, #20]
        break;
 8006046:	e00c      	b.n	8006062 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	4a0e      	ldr	r2, [pc, #56]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006052:	68d2      	ldr	r2, [r2, #12]
 8006054:	0a12      	lsrs	r2, r2, #8
 8006056:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	617b      	str	r3, [r7, #20]
        break;
 8006060:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006062:	4b0a      	ldr	r3, [pc, #40]	; (800608c <HAL_RCC_GetSysClockFreq+0x12c>)
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	0e5b      	lsrs	r3, r3, #25
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	3301      	adds	r3, #1
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	fbb2 f3f3 	udiv	r3, r2, r3
 800607a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800607c:	69bb      	ldr	r3, [r7, #24]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3724      	adds	r7, #36	; 0x24
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40021000 	.word	0x40021000
 8006090:	0800a124 	.word	0x0800a124
 8006094:	00f42400 	.word	0x00f42400
 8006098:	007a1200 	.word	0x007a1200

0800609c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 80060a0:	f7ff ff5e 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 80060a4:	4602      	mov	r2, r0
 80060a6:	4b05      	ldr	r3, [pc, #20]	; (80060bc <HAL_RCC_GetHCLKFreq+0x20>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	4903      	ldr	r1, [pc, #12]	; (80060c0 <HAL_RCC_GetHCLKFreq+0x24>)
 80060b2:	5ccb      	ldrb	r3, [r1, r3]
 80060b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40021000 	.word	0x40021000
 80060c0:	0800a10c 	.word	0x0800a10c

080060c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060c8:	f7ff ffe8 	bl	800609c <HAL_RCC_GetHCLKFreq>
 80060cc:	4602      	mov	r2, r0
 80060ce:	4b05      	ldr	r3, [pc, #20]	; (80060e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	0a1b      	lsrs	r3, r3, #8
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	4903      	ldr	r1, [pc, #12]	; (80060e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060da:	5ccb      	ldrb	r3, [r1, r3]
 80060dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40021000 	.word	0x40021000
 80060e8:	0800a11c 	.word	0x0800a11c

080060ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060f0:	f7ff ffd4 	bl	800609c <HAL_RCC_GetHCLKFreq>
 80060f4:	4602      	mov	r2, r0
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <HAL_RCC_GetPCLK2Freq+0x20>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	0adb      	lsrs	r3, r3, #11
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	4903      	ldr	r1, [pc, #12]	; (8006110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006102:	5ccb      	ldrb	r3, [r1, r3]
 8006104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	bd80      	pop	{r7, pc}
 800610c:	40021000 	.word	0x40021000
 8006110:	0800a11c 	.word	0x0800a11c

08006114 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b086      	sub	sp, #24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800611c:	2300      	movs	r3, #0
 800611e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006120:	4b2c      	ldr	r3, [pc, #176]	; (80061d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800612c:	f7ff f86c 	bl	8005208 <HAL_PWREx_GetVoltageRange>
 8006130:	6138      	str	r0, [r7, #16]
 8006132:	e014      	b.n	800615e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006138:	4a26      	ldr	r2, [pc, #152]	; (80061d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800613a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613e:	6593      	str	r3, [r2, #88]	; 0x58
 8006140:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006148:	60fb      	str	r3, [r7, #12]
 800614a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800614c:	f7ff f85c 	bl	8005208 <HAL_PWREx_GetVoltageRange>
 8006150:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006152:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006156:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8006158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800615c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800616a:	d10b      	bne.n	8006184 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b80      	cmp	r3, #128	; 0x80
 8006170:	d919      	bls.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2ba0      	cmp	r3, #160	; 0xa0
 8006176:	d902      	bls.n	800617e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006178:	2302      	movs	r3, #2
 800617a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800617c:	e013      	b.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800617e:	2301      	movs	r3, #1
 8006180:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8006182:	e010      	b.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b80      	cmp	r3, #128	; 0x80
 8006188:	d902      	bls.n	8006190 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800618a:	2303      	movs	r3, #3
 800618c:	617b      	str	r3, [r7, #20]
 800618e:	e00a      	b.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b80      	cmp	r3, #128	; 0x80
 8006194:	d102      	bne.n	800619c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006196:	2302      	movs	r3, #2
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	e004      	b.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b70      	cmp	r3, #112	; 0x70
 80061a0:	d101      	bne.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80061a2:	2301      	movs	r3, #1
 80061a4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061a6:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f023 020f 	bic.w	r2, r3, #15
 80061ae:	490a      	ldr	r1, [pc, #40]	; (80061d8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80061b6:	4b08      	ldr	r3, [pc, #32]	; (80061d8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 030f 	and.w	r3, r3, #15
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d001      	beq.n	80061c8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40021000 	.word	0x40021000
 80061d8:	40022000 	.word	0x40022000

080061dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061e2:	4b31      	ldr	r3, [pc, #196]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0303 	and.w	r3, r3, #3
 80061ea:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061ec:	4b2e      	ldr	r3, [pc, #184]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	091b      	lsrs	r3, r3, #4
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	3301      	adds	r3, #1
 80061f8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d015      	beq.n	800622c <RCC_GetSysClockFreqFromPLLSource+0x50>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d839      	bhi.n	800627a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d01c      	beq.n	8006246 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2b02      	cmp	r3, #2
 8006210:	d133      	bne.n	800627a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006212:	4a26      	ldr	r2, [pc, #152]	; (80062ac <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	fbb2 f3f3 	udiv	r3, r2, r3
 800621a:	4a23      	ldr	r2, [pc, #140]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800621c:	68d2      	ldr	r2, [r2, #12]
 800621e:	0a12      	lsrs	r2, r2, #8
 8006220:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006224:	fb02 f303 	mul.w	r3, r2, r3
 8006228:	613b      	str	r3, [r7, #16]
      break;
 800622a:	e029      	b.n	8006280 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800622c:	4a20      	ldr	r2, [pc, #128]	; (80062b0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006236:	68d2      	ldr	r2, [r2, #12]
 8006238:	0a12      	lsrs	r2, r2, #8
 800623a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	613b      	str	r3, [r7, #16]
      break;
 8006244:	e01c      	b.n	8006280 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006246:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 0308 	and.w	r3, r3, #8
 800624e:	2b00      	cmp	r3, #0
 8006250:	d107      	bne.n	8006262 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006258:	0a1b      	lsrs	r3, r3, #8
 800625a:	f003 030f 	and.w	r3, r3, #15
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e005      	b.n	800626e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006262:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	091b      	lsrs	r3, r3, #4
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800626e:	4a11      	ldr	r2, [pc, #68]	; (80062b4 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006276:	613b      	str	r3, [r7, #16]
        break;
 8006278:	e002      	b.n	8006280 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
      break;
 800627e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8006280:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	0e5b      	lsrs	r3, r3, #25
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	3301      	adds	r3, #1
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	fbb2 f3f3 	udiv	r3, r2, r3
 8006298:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800629a:	683b      	ldr	r3, [r7, #0]
}
 800629c:	4618      	mov	r0, r3
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	40021000 	.word	0x40021000
 80062ac:	00f42400 	.word	0x00f42400
 80062b0:	007a1200 	.word	0x007a1200
 80062b4:	0800a124 	.word	0x0800a124

080062b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b088      	sub	sp, #32
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062c0:	2300      	movs	r3, #0
 80062c2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062c4:	2300      	movs	r3, #0
 80062c6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d040      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d8:	2b80      	cmp	r3, #128	; 0x80
 80062da:	d02a      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062dc:	2b80      	cmp	r3, #128	; 0x80
 80062de:	d825      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062e0:	2b60      	cmp	r3, #96	; 0x60
 80062e2:	d026      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80062e4:	2b60      	cmp	r3, #96	; 0x60
 80062e6:	d821      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062e8:	2b40      	cmp	r3, #64	; 0x40
 80062ea:	d006      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x42>
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d81d      	bhi.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x74>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d009      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80062f4:	2b20      	cmp	r3, #32
 80062f6:	d010      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x62>
 80062f8:	e018      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062fa:	4b8f      	ldr	r3, [pc, #572]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	4a8e      	ldr	r2, [pc, #568]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006304:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006306:	e015      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3304      	adds	r3, #4
 800630c:	2100      	movs	r1, #0
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fb56 	bl	80069c0 <RCCEx_PLLSAI1_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006318:	e00c      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3320      	adds	r3, #32
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fc33 	bl	8006b8c <RCCEx_PLLSAI2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800632a:	e003      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	77fb      	strb	r3, [r7, #31]
        break;
 8006330:	e000      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8006332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006334:	7ffb      	ldrb	r3, [r7, #31]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800633a:	4b7f      	ldr	r3, [pc, #508]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800633c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006340:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006348:	497b      	ldr	r1, [pc, #492]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8006350:	e001      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006352:	7ffb      	ldrb	r3, [r7, #31]
 8006354:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d047      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d030      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d82a      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8006372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006376:	d02a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800637c:	d824      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800637e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006382:	d008      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8006384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006388:	d81e      	bhi.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800638e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006392:	d010      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006394:	e018      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006396:	4b68      	ldr	r3, [pc, #416]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	4a67      	ldr	r2, [pc, #412]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063a2:	e015      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	3304      	adds	r3, #4
 80063a8:	2100      	movs	r1, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fb08 	bl	80069c0 <RCCEx_PLLSAI1_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063b4:	e00c      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3320      	adds	r3, #32
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fbe5 	bl	8006b8c <RCCEx_PLLSAI2_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	77fb      	strb	r3, [r7, #31]
        break;
 80063cc:	e000      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80063ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063d0:	7ffb      	ldrb	r3, [r7, #31]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80063d6:	4b58      	ldr	r3, [pc, #352]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e4:	4954      	ldr	r1, [pc, #336]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80063ec:	e001      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ee:	7ffb      	ldrb	r3, [r7, #31]
 80063f0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 80ab 	beq.w	8006556 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006400:	2300      	movs	r3, #0
 8006402:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006404:	4b4c      	ldr	r3, [pc, #304]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10d      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006410:	4b49      	ldr	r3, [pc, #292]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006414:	4a48      	ldr	r2, [pc, #288]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800641a:	6593      	str	r3, [r2, #88]	; 0x58
 800641c:	4b46      	ldr	r3, [pc, #280]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800641e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800642c:	4b43      	ldr	r3, [pc, #268]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a42      	ldr	r2, [pc, #264]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006436:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006438:	f7fc fe9e 	bl	8003178 <HAL_GetTick>
 800643c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643e:	e00f      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006440:	f7fc fe9a 	bl	8003178 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b02      	cmp	r3, #2
 800644c:	d908      	bls.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800644e:	4b3b      	ldr	r3, [pc, #236]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d109      	bne.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800645e:	e006      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006460:	4b36      	ldr	r3, [pc, #216]	; (800653c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0e9      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800646c:	e000      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800646e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006470:	7ffb      	ldrb	r3, [r7, #31]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d164      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800647c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006480:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01f      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648e:	69ba      	ldr	r2, [r7, #24]
 8006490:	429a      	cmp	r2, r3
 8006492:	d019      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006494:	4b28      	ldr	r3, [pc, #160]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064a0:	4b25      	ldr	r3, [pc, #148]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	4a24      	ldr	r2, [pc, #144]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064b0:	4b21      	ldr	r3, [pc, #132]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	4a20      	ldr	r2, [pc, #128]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064c0:	4a1d      	ldr	r2, [pc, #116]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d01f      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d2:	f7fc fe51 	bl	8003178 <HAL_GetTick>
 80064d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064d8:	e012      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064da:	f7fc fe4d 	bl	8003178 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d909      	bls.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80064ec:	4b12      	ldr	r3, [pc, #72]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10a      	bne.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80064fa:	2303      	movs	r3, #3
 80064fc:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80064fe:	e007      	b.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006500:	4b0d      	ldr	r3, [pc, #52]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d0e5      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x222>
 800650e:	e000      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8006510:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8006512:	7ffb      	ldrb	r3, [r7, #31]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d10c      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006518:	4b07      	ldr	r3, [pc, #28]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800651e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006528:	4903      	ldr	r1, [pc, #12]	; (8006538 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800652a:	4313      	orrs	r3, r2
 800652c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006530:	e008      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006532:	7ffb      	ldrb	r3, [r7, #31]
 8006534:	77bb      	strb	r3, [r7, #30]
 8006536:	e005      	b.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8006538:	40021000 	.word	0x40021000
 800653c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006540:	7ffb      	ldrb	r3, [r7, #31]
 8006542:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	2b01      	cmp	r3, #1
 8006548:	d105      	bne.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800654a:	4b9c      	ldr	r3, [pc, #624]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800654c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654e:	4a9b      	ldr	r2, [pc, #620]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006554:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00a      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006562:	4b96      	ldr	r3, [pc, #600]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006568:	f023 0203 	bic.w	r2, r3, #3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	4992      	ldr	r1, [pc, #584]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006584:	4b8d      	ldr	r3, [pc, #564]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f023 020c 	bic.w	r2, r3, #12
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006592:	498a      	ldr	r1, [pc, #552]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065a6:	4b85      	ldr	r3, [pc, #532]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	4981      	ldr	r1, [pc, #516]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f003 0308 	and.w	r3, r3, #8
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00a      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065c8:	4b7c      	ldr	r3, [pc, #496]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4979      	ldr	r1, [pc, #484]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80065ea:	4b74      	ldr	r3, [pc, #464]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f8:	4970      	ldr	r1, [pc, #448]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0320 	and.w	r3, r3, #32
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00a      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800660c:	4b6b      	ldr	r3, [pc, #428]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800661a:	4968      	ldr	r1, [pc, #416]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800662e:	4b63      	ldr	r3, [pc, #396]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006634:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800663c:	495f      	ldr	r1, [pc, #380]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800663e:	4313      	orrs	r3, r2
 8006640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00a      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006650:	4b5a      	ldr	r3, [pc, #360]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006656:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665e:	4957      	ldr	r1, [pc, #348]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00a      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006672:	4b52      	ldr	r3, [pc, #328]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006678:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006680:	494e      	ldr	r1, [pc, #312]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d031      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800669c:	d00e      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x404>
 800669e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066a2:	d814      	bhi.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d015      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80066a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066ac:	d10f      	bne.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066ae:	4b43      	ldr	r3, [pc, #268]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4a42      	ldr	r2, [pc, #264]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80066ba:	e00c      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3304      	adds	r3, #4
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 f97c 	bl	80069c0 <RCCEx_PLLSAI1_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80066cc:	e003      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	77fb      	strb	r3, [r7, #31]
        break;
 80066d2:	e000      	b.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80066d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066d6:	7ffb      	ldrb	r3, [r7, #31]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d10b      	bne.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066dc:	4b37      	ldr	r3, [pc, #220]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ea:	4934      	ldr	r1, [pc, #208]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066f2:	e001      	b.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f4:	7ffb      	ldrb	r3, [r7, #31]
 80066f6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006704:	4b2d      	ldr	r3, [pc, #180]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006712:	492a      	ldr	r1, [pc, #168]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006726:	4b25      	ldr	r3, [pc, #148]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006734:	4921      	ldr	r1, [pc, #132]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006736:	4313      	orrs	r3, r2
 8006738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006748:	4b1c      	ldr	r3, [pc, #112]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006756:	4919      	ldr	r1, [pc, #100]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800676a:	4b14      	ldr	r3, [pc, #80]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800676c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006770:	f023 0203 	bic.w	r2, r3, #3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006778:	4910      	ldr	r1, [pc, #64]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800677a:	4313      	orrs	r3, r2
 800677c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d02b      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800678c:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006792:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679a:	4908      	ldr	r1, [pc, #32]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067aa:	d109      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	4a02      	ldr	r2, [pc, #8]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80067b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80067b6:	60d3      	str	r3, [r2, #12]
 80067b8:	e014      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80067ba:	bf00      	nop
 80067bc:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3304      	adds	r3, #4
 80067ce:	2101      	movs	r1, #1
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f8f5 	bl	80069c0 <RCCEx_PLLSAI1_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80067da:	7ffb      	ldrb	r3, [r7, #31]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80067e0:	7ffb      	ldrb	r3, [r7, #31]
 80067e2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d04a      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80067f8:	d108      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x554>
 80067fa:	4b70      	ldr	r3, [pc, #448]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80067fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006800:	4a6e      	ldr	r2, [pc, #440]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006806:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800680a:	e012      	b.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 800680c:	4b6b      	ldr	r3, [pc, #428]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800681a:	4968      	ldr	r1, [pc, #416]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006822:	4b66      	ldr	r3, [pc, #408]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006828:	4a64      	ldr	r2, [pc, #400]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800682a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800682e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006836:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800683a:	d10d      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3304      	adds	r3, #4
 8006840:	2101      	movs	r1, #1
 8006842:	4618      	mov	r0, r3
 8006844:	f000 f8bc 	bl	80069c0 <RCCEx_PLLSAI1_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800684c:	7ffb      	ldrb	r3, [r7, #31]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d019      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8006852:	7ffb      	ldrb	r3, [r7, #31]
 8006854:	77bb      	strb	r3, [r7, #30]
 8006856:	e016      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006860:	d106      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006862:	4b56      	ldr	r3, [pc, #344]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	4a55      	ldr	r2, [pc, #340]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006868:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800686c:	60d3      	str	r3, [r2, #12]
 800686e:	e00a      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006878:	d105      	bne.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800687a:	4b50      	ldr	r3, [pc, #320]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	4a4f      	ldr	r2, [pc, #316]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006884:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d028      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006892:	4b4a      	ldr	r3, [pc, #296]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068a0:	4946      	ldr	r1, [pc, #280]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b0:	d106      	bne.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068b2:	4b42      	ldr	r3, [pc, #264]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	4a41      	ldr	r2, [pc, #260]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068bc:	60d3      	str	r3, [r2, #12]
 80068be:	e011      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3304      	adds	r3, #4
 80068ce:	2101      	movs	r1, #1
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f875 	bl	80069c0 <RCCEx_PLLSAI1_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80068da:	7ffb      	ldrb	r3, [r7, #31]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d001      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80068e0:	7ffb      	ldrb	r3, [r7, #31]
 80068e2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01e      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068f0:	4b32      	ldr	r3, [pc, #200]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80068f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006900:	492e      	ldr	r1, [pc, #184]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006902:	4313      	orrs	r3, r2
 8006904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800690e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006912:	d10c      	bne.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	3304      	adds	r3, #4
 8006918:	2102      	movs	r1, #2
 800691a:	4618      	mov	r0, r3
 800691c:	f000 f850 	bl	80069c0 <RCCEx_PLLSAI1_Config>
 8006920:	4603      	mov	r3, r0
 8006922:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006924:	7ffb      	ldrb	r3, [r7, #31]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800692a:	7ffb      	ldrb	r3, [r7, #31]
 800692c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00b      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800693a:	4b20      	ldr	r3, [pc, #128]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800693c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006940:	f023 0204 	bic.w	r2, r3, #4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800694a:	491c      	ldr	r1, [pc, #112]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800694c:	4313      	orrs	r3, r2
 800694e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00b      	beq.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800695e:	4b17      	ldr	r3, [pc, #92]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006960:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006964:	f023 0218 	bic.w	r2, r3, #24
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696e:	4913      	ldr	r1, [pc, #76]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006970:	4313      	orrs	r3, r2
 8006972:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800697e:	2b00      	cmp	r3, #0
 8006980:	d017      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006982:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006984:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006992:	490a      	ldr	r1, [pc, #40]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006994:	4313      	orrs	r3, r2
 8006996:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069a4:	d105      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a6:	4b05      	ldr	r3, [pc, #20]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	4a04      	ldr	r2, [pc, #16]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80069ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069b0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80069b2:	7fbb      	ldrb	r3, [r7, #30]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40021000 	.word	0x40021000

080069c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d018      	beq.n	8006a08 <RCCEx_PLLSAI1_Config+0x48>
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d81f      	bhi.n	8006a1a <RCCEx_PLLSAI1_Config+0x5a>
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d002      	beq.n	80069e4 <RCCEx_PLLSAI1_Config+0x24>
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d009      	beq.n	80069f6 <RCCEx_PLLSAI1_Config+0x36>
 80069e2:	e01a      	b.n	8006a1a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069e4:	4b65      	ldr	r3, [pc, #404]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d117      	bne.n	8006a20 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069f4:	e014      	b.n	8006a20 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80069f6:	4b61      	ldr	r3, [pc, #388]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d110      	bne.n	8006a24 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a06:	e00d      	b.n	8006a24 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006a08:	4b5c      	ldr	r3, [pc, #368]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d109      	bne.n	8006a28 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a18:	e006      	b.n	8006a28 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8006a1e:	e004      	b.n	8006a2a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006a20:	bf00      	nop
 8006a22:	e002      	b.n	8006a2a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006a24:	bf00      	nop
 8006a26:	e000      	b.n	8006a2a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006a28:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 809f 	bne.w	8006b70 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a32:	4b52      	ldr	r3, [pc, #328]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a51      	ldr	r2, [pc, #324]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a3e:	f7fc fb9b 	bl	8003178 <HAL_GetTick>
 8006a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a44:	e00f      	b.n	8006a66 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a46:	f7fc fb97 	bl	8003178 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d908      	bls.n	8006a66 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a54:	4b49      	ldr	r3, [pc, #292]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d009      	beq.n	8006a74 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a64:	e006      	b.n	8006a74 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a66:	4b45      	ldr	r3, [pc, #276]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e9      	bne.n	8006a46 <RCCEx_PLLSAI1_Config+0x86>
 8006a72:	e000      	b.n	8006a76 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8006a74:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d179      	bne.n	8006b70 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d116      	bne.n	8006ab0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a82:	4b3e      	ldr	r3, [pc, #248]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006a84:	691a      	ldr	r2, [r3, #16]
 8006a86:	4b3e      	ldr	r3, [pc, #248]	; (8006b80 <RCCEx_PLLSAI1_Config+0x1c0>)
 8006a88:	4013      	ands	r3, r2
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	6892      	ldr	r2, [r2, #8]
 8006a8e:	0211      	lsls	r1, r2, #8
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	68d2      	ldr	r2, [r2, #12]
 8006a94:	06d2      	lsls	r2, r2, #27
 8006a96:	4311      	orrs	r1, r2
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6852      	ldr	r2, [r2, #4]
 8006a9c:	3a01      	subs	r2, #1
 8006a9e:	0112      	lsls	r2, r2, #4
 8006aa0:	4311      	orrs	r1, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	4934      	ldr	r1, [pc, #208]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	610b      	str	r3, [r1, #16]
 8006aae:	e033      	b.n	8006b18 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d118      	bne.n	8006ae8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ab6:	4b31      	ldr	r3, [pc, #196]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	4b32      	ldr	r3, [pc, #200]	; (8006b84 <RCCEx_PLLSAI1_Config+0x1c4>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	6892      	ldr	r2, [r2, #8]
 8006ac2:	0211      	lsls	r1, r2, #8
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6912      	ldr	r2, [r2, #16]
 8006ac8:	0852      	lsrs	r2, r2, #1
 8006aca:	3a01      	subs	r2, #1
 8006acc:	0552      	lsls	r2, r2, #21
 8006ace:	4311      	orrs	r1, r2
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6852      	ldr	r2, [r2, #4]
 8006ad4:	3a01      	subs	r2, #1
 8006ad6:	0112      	lsls	r2, r2, #4
 8006ad8:	4311      	orrs	r1, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	4926      	ldr	r1, [pc, #152]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	610b      	str	r3, [r1, #16]
 8006ae6:	e017      	b.n	8006b18 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ae8:	4b24      	ldr	r3, [pc, #144]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006aea:	691a      	ldr	r2, [r3, #16]
 8006aec:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <RCCEx_PLLSAI1_Config+0x1c8>)
 8006aee:	4013      	ands	r3, r2
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6892      	ldr	r2, [r2, #8]
 8006af4:	0211      	lsls	r1, r2, #8
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6952      	ldr	r2, [r2, #20]
 8006afa:	0852      	lsrs	r2, r2, #1
 8006afc:	3a01      	subs	r2, #1
 8006afe:	0652      	lsls	r2, r2, #25
 8006b00:	4311      	orrs	r1, r2
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	6852      	ldr	r2, [r2, #4]
 8006b06:	3a01      	subs	r2, #1
 8006b08:	0112      	lsls	r2, r2, #4
 8006b0a:	4311      	orrs	r1, r2
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	6812      	ldr	r2, [r2, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	491a      	ldr	r1, [pc, #104]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b18:	4b18      	ldr	r3, [pc, #96]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a17      	ldr	r2, [pc, #92]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b24:	f7fc fb28 	bl	8003178 <HAL_GetTick>
 8006b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b2a:	e00f      	b.n	8006b4c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b2c:	f7fc fb24 	bl	8003178 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d908      	bls.n	8006b4c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b3a:	4b10      	ldr	r3, [pc, #64]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d109      	bne.n	8006b5a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006b4a:	e006      	b.n	8006b5a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d0e9      	beq.n	8006b2c <RCCEx_PLLSAI1_Config+0x16c>
 8006b58:	e000      	b.n	8006b5c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006b5a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8006b62:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	4904      	ldr	r1, [pc, #16]	; (8006b7c <RCCEx_PLLSAI1_Config+0x1bc>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	40021000 	.word	0x40021000
 8006b80:	07ff800c 	.word	0x07ff800c
 8006b84:	ff9f800c 	.word	0xff9f800c
 8006b88:	f9ff800c 	.word	0xf9ff800c

08006b8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b03      	cmp	r3, #3
 8006ba0:	d018      	beq.n	8006bd4 <RCCEx_PLLSAI2_Config+0x48>
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d81f      	bhi.n	8006be6 <RCCEx_PLLSAI2_Config+0x5a>
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d002      	beq.n	8006bb0 <RCCEx_PLLSAI2_Config+0x24>
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d009      	beq.n	8006bc2 <RCCEx_PLLSAI2_Config+0x36>
 8006bae:	e01a      	b.n	8006be6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bb0:	4b4a      	ldr	r3, [pc, #296]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0302 	and.w	r3, r3, #2
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d117      	bne.n	8006bec <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bc0:	e014      	b.n	8006bec <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bc2:	4b46      	ldr	r3, [pc, #280]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d110      	bne.n	8006bf0 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bd2:	e00d      	b.n	8006bf0 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006bd4:	4b41      	ldr	r3, [pc, #260]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d109      	bne.n	8006bf4 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006be4:	e006      	b.n	8006bf4 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bea:	e004      	b.n	8006bf6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006bec:	bf00      	nop
 8006bee:	e002      	b.n	8006bf6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006bf0:	bf00      	nop
 8006bf2:	e000      	b.n	8006bf6 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006bf4:	bf00      	nop
  }

  if (status == HAL_OK)
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d169      	bne.n	8006cd0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bfc:	4b37      	ldr	r3, [pc, #220]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a36      	ldr	r2, [pc, #216]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c08:	f7fc fab6 	bl	8003178 <HAL_GetTick>
 8006c0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c0e:	e00f      	b.n	8006c30 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c10:	f7fc fab2 	bl	8003178 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d908      	bls.n	8006c30 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c1e:	4b2f      	ldr	r3, [pc, #188]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d009      	beq.n	8006c3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006c2e:	e006      	b.n	8006c3e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c30:	4b2a      	ldr	r3, [pc, #168]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e9      	bne.n	8006c10 <RCCEx_PLLSAI2_Config+0x84>
 8006c3c:	e000      	b.n	8006c40 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006c3e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d144      	bne.n	8006cd0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d115      	bne.n	8006c78 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c4c:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c4e:	695a      	ldr	r2, [r3, #20]
 8006c50:	4b23      	ldr	r3, [pc, #140]	; (8006ce0 <RCCEx_PLLSAI2_Config+0x154>)
 8006c52:	4013      	ands	r3, r2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	6892      	ldr	r2, [r2, #8]
 8006c58:	0211      	lsls	r1, r2, #8
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	68d2      	ldr	r2, [r2, #12]
 8006c5e:	06d2      	lsls	r2, r2, #27
 8006c60:	4311      	orrs	r1, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	6852      	ldr	r2, [r2, #4]
 8006c66:	3a01      	subs	r2, #1
 8006c68:	0112      	lsls	r2, r2, #4
 8006c6a:	4311      	orrs	r1, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6812      	ldr	r2, [r2, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	491a      	ldr	r1, [pc, #104]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c78:	4b18      	ldr	r3, [pc, #96]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a17      	ldr	r2, [pc, #92]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c84:	f7fc fa78 	bl	8003178 <HAL_GetTick>
 8006c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c8a:	e00f      	b.n	8006cac <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c8c:	f7fc fa74 	bl	8003178 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d908      	bls.n	8006cac <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c9a:	4b10      	ldr	r3, [pc, #64]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d109      	bne.n	8006cba <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006caa:	e006      	b.n	8006cba <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006cac:	4b0b      	ldr	r3, [pc, #44]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0e9      	beq.n	8006c8c <RCCEx_PLLSAI2_Config+0x100>
 8006cb8:	e000      	b.n	8006cbc <RCCEx_PLLSAI2_Config+0x130>
          break;
 8006cba:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006cc4:	695a      	ldr	r2, [r3, #20]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	4904      	ldr	r1, [pc, #16]	; (8006cdc <RCCEx_PLLSAI2_Config+0x150>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40021000 	.word	0x40021000
 8006ce0:	07ff800c 	.word	0x07ff800c

08006ce4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d066      	beq.n	8006dc4 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d106      	bne.n	8006d10 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fb fc34 	bl	8002578 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b10      	cmp	r3, #16
 8006d24:	d045      	beq.n	8006db2 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d26:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d28:	22ca      	movs	r2, #202	; 0xca
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24
 8006d2c:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d2e:	2253      	movs	r2, #83	; 0x53
 8006d30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 f872 	bl	8006e1c <RTC_EnterInitMode>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d121      	bne.n	8006d86 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006d42:	4b23      	ldr	r3, [pc, #140]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	4a22      	ldr	r2, [pc, #136]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d48:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006d4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d50:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006d52:	4b1f      	ldr	r3, [pc, #124]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d54:	699a      	ldr	r2, [r3, #24]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6859      	ldr	r1, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	4319      	orrs	r1, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	430b      	orrs	r3, r1
 8006d66:	491a      	ldr	r1, [pc, #104]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	041b      	lsls	r3, r3, #16
 8006d76:	4916      	ldr	r1, [pc, #88]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 f881 	bl	8006e84 <RTC_ExitInitMode>
 8006d82:	4603      	mov	r3, r0
 8006d84:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10e      	bne.n	8006daa <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8006d8c:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6a19      	ldr	r1, [r3, #32]
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4319      	orrs	r1, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	430b      	orrs	r3, r1
 8006da4:	490a      	ldr	r1, [pc, #40]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <HAL_RTC_Init+0xec>)
 8006dac:	22ff      	movs	r2, #255	; 0xff
 8006dae:	625a      	str	r2, [r3, #36]	; 0x24
 8006db0:	e001      	b.n	8006db6 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006db2:	2300      	movs	r3, #0
 8006db4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006db6:	7bfb      	ldrb	r3, [r7, #15]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40002800 	.word	0x40002800

08006dd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <HAL_RTC_WaitForSynchro+0x40>)
 8006dde:	4a0e      	ldr	r2, [pc, #56]	; (8006e18 <HAL_RTC_WaitForSynchro+0x44>)
 8006de0:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006de2:	f7fc f9c9 	bl	8003178 <HAL_GetTick>
 8006de6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006de8:	e009      	b.n	8006dfe <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dea:	f7fc f9c5 	bl	8003178 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006df8:	d901      	bls.n	8006dfe <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e006      	b.n	8006e0c <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006dfe:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <HAL_RTC_WaitForSynchro+0x40>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0ef      	beq.n	8006dea <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40002800 	.word	0x40002800
 8006e18:	0001005c 	.word	0x0001005c

08006e1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006e28:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <RTC_EnterInitMode+0x64>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d120      	bne.n	8006e76 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e34:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <RTC_EnterInitMode+0x64>)
 8006e36:	68db      	ldr	r3, [r3, #12]
 8006e38:	4a11      	ldr	r2, [pc, #68]	; (8006e80 <RTC_EnterInitMode+0x64>)
 8006e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e3e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006e40:	f7fc f99a 	bl	8003178 <HAL_GetTick>
 8006e44:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e46:	e00d      	b.n	8006e64 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006e48:	f7fc f996 	bl	8003178 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e56:	d905      	bls.n	8006e64 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2203      	movs	r2, #3
 8006e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e64:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <RTC_EnterInitMode+0x64>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <RTC_EnterInitMode+0x5a>
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d1e8      	bne.n	8006e48 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3710      	adds	r7, #16
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40002800 	.word	0x40002800

08006e84 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006e90:	4b1a      	ldr	r3, [pc, #104]	; (8006efc <RTC_ExitInitMode+0x78>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	4a19      	ldr	r2, [pc, #100]	; (8006efc <RTC_ExitInitMode+0x78>)
 8006e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e9a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006e9c:	4b17      	ldr	r3, [pc, #92]	; (8006efc <RTC_ExitInitMode+0x78>)
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f003 0320 	and.w	r3, r3, #32
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10c      	bne.n	8006ec2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7ff ff93 	bl	8006dd4 <HAL_RTC_WaitForSynchro>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d01e      	beq.n	8006ef2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006ebc:	2303      	movs	r3, #3
 8006ebe:	73fb      	strb	r3, [r7, #15]
 8006ec0:	e017      	b.n	8006ef2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ec2:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <RTC_ExitInitMode+0x78>)
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	4a0d      	ldr	r2, [pc, #52]	; (8006efc <RTC_ExitInitMode+0x78>)
 8006ec8:	f023 0320 	bic.w	r3, r3, #32
 8006ecc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff ff80 	bl	8006dd4 <HAL_RTC_WaitForSynchro>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d005      	beq.n	8006ee6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2203      	movs	r2, #3
 8006ede:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ee6:	4b05      	ldr	r3, [pc, #20]	; (8006efc <RTC_ExitInitMode+0x78>)
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	4a04      	ldr	r2, [pc, #16]	; (8006efc <RTC_ExitInitMode+0x78>)
 8006eec:	f043 0320 	orr.w	r3, r3, #32
 8006ef0:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	40002800 	.word	0x40002800

08006f00 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	490f      	ldr	r1, [pc, #60]	; (8006f50 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	490c      	ldr	r1, [pc, #48]	; (8006f54 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	6919      	ldr	r1, [r3, #16]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	041b      	lsls	r3, r3, #16
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	4906      	ldr	r1, [pc, #24]	; (8006f54 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	40002800 	.word	0x40002800
 8006f54:	40003400 	.word	0x40003400

08006f58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e042      	b.n	8006ff0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d106      	bne.n	8006f82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f7fb fe4b 	bl	8002c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2224      	movs	r2, #36	; 0x24
 8006f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f022 0201 	bic.w	r2, r2, #1
 8006f98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fcd4 	bl	8007948 <UART_SetConfig>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e022      	b.n	8006ff0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 ffc8 	bl	8007f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0201 	orr.w	r2, r2, #1
 8006fe6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 f84f 	bl	800808c <UART_CheckIdleState>
 8006fee:	4603      	mov	r3, r0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	60f8      	str	r0, [r7, #12]
 8007000:	60b9      	str	r1, [r7, #8]
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	4613      	mov	r3, r2
 8007006:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700e:	2b20      	cmp	r3, #32
 8007010:	d17b      	bne.n	800710a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <HAL_UART_Transmit+0x26>
 8007018:	88fb      	ldrh	r3, [r7, #6]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e074      	b.n	800710c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2221      	movs	r2, #33	; 0x21
 800702e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007032:	f7fc f8a1 	bl	8003178 <HAL_GetTick>
 8007036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	88fa      	ldrh	r2, [r7, #6]
 800703c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	88fa      	ldrh	r2, [r7, #6]
 8007044:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007050:	d108      	bne.n	8007064 <HAL_UART_Transmit+0x6c>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d104      	bne.n	8007064 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800705a:	2300      	movs	r3, #0
 800705c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e003      	b.n	800706c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800706c:	e030      	b.n	80070d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	9300      	str	r3, [sp, #0]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2200      	movs	r2, #0
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f001 f8b1 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d005      	beq.n	8007090 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2220      	movs	r2, #32
 8007088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e03d      	b.n	800710c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	3302      	adds	r3, #2
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	e007      	b.n	80070be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	3301      	adds	r3, #1
 80070bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	3b01      	subs	r3, #1
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1c8      	bne.n	800706e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	9300      	str	r3, [sp, #0]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	2200      	movs	r2, #0
 80070e4:	2140      	movs	r1, #64	; 0x40
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f001 f87a 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d005      	beq.n	80070fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2220      	movs	r2, #32
 80070f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e006      	b.n	800710c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2220      	movs	r2, #32
 8007102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	e000      	b.n	800710c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800710a:	2302      	movs	r3, #2
  }
}
 800710c:	4618      	mov	r0, r3
 800710e:	3720      	adds	r7, #32
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	4613      	mov	r3, r2
 8007120:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007128:	2b20      	cmp	r3, #32
 800712a:	d137      	bne.n	800719c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <HAL_UART_Receive_DMA+0x24>
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e030      	b.n	800719e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a18      	ldr	r2, [pc, #96]	; (80071a8 <HAL_UART_Receive_DMA+0x94>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d01f      	beq.n	800718c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d018      	beq.n	800718c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	613b      	str	r3, [r7, #16]
   return(result);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007178:	623b      	str	r3, [r7, #32]
 800717a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	69f9      	ldr	r1, [r7, #28]
 800717e:	6a3a      	ldr	r2, [r7, #32]
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	61bb      	str	r3, [r7, #24]
   return(result);
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e6      	bne.n	800715a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800718c:	88fb      	ldrh	r3, [r7, #6]
 800718e:	461a      	mov	r2, r3
 8007190:	68b9      	ldr	r1, [r7, #8]
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f001 f88c 	bl	80082b0 <UART_Start_Receive_DMA>
 8007198:	4603      	mov	r3, r0
 800719a:	e000      	b.n	800719e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3728      	adds	r7, #40	; 0x28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	40008000 	.word	0x40008000

080071ac <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b090      	sub	sp, #64	; 0x40
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b80      	cmp	r3, #128	; 0x80
 80071d0:	d139      	bne.n	8007246 <HAL_UART_DMAStop+0x9a>
 80071d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d4:	2b21      	cmp	r3, #33	; 0x21
 80071d6:	d136      	bne.n	8007246 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3308      	adds	r3, #8
 80071de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	e853 3f00 	ldrex	r3, [r3]
 80071e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071ee:	637b      	str	r3, [r7, #52]	; 0x34
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3308      	adds	r3, #8
 80071f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007200:	e841 2300 	strex	r3, r2, [r1]
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1e5      	bne.n	80071d8 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007210:	2b00      	cmp	r3, #0
 8007212:	d015      	beq.n	8007240 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007218:	4618      	mov	r0, r3
 800721a:	f7fd f98c 	bl	8004536 <HAL_DMA_Abort>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00d      	beq.n	8007240 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007228:	4618      	mov	r0, r3
 800722a:	f7fd fb3f 	bl	80048ac <HAL_DMA_GetError>
 800722e:	4603      	mov	r3, r0
 8007230:	2b20      	cmp	r3, #32
 8007232:	d105      	bne.n	8007240 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2210      	movs	r2, #16
 8007238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e047      	b.n	80072d0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f001 f8db 	bl	80083fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007250:	2b40      	cmp	r3, #64	; 0x40
 8007252:	d13c      	bne.n	80072ce <HAL_UART_DMAStop+0x122>
 8007254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007256:	2b22      	cmp	r3, #34	; 0x22
 8007258:	d139      	bne.n	80072ce <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3308      	adds	r3, #8
 8007260:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	60bb      	str	r3, [r7, #8]
   return(result);
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007270:	633b      	str	r3, [r7, #48]	; 0x30
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3308      	adds	r3, #8
 8007278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727a:	61ba      	str	r2, [r7, #24]
 800727c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6979      	ldr	r1, [r7, #20]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	613b      	str	r3, [r7, #16]
   return(result);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e5      	bne.n	800725a <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007294:	2b00      	cmp	r3, #0
 8007296:	d017      	beq.n	80072c8 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729e:	4618      	mov	r0, r3
 80072a0:	f7fd f949 	bl	8004536 <HAL_DMA_Abort>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00e      	beq.n	80072c8 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fd fafb 	bl	80048ac <HAL_DMA_GetError>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b20      	cmp	r3, #32
 80072ba:	d105      	bne.n	80072c8 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2210      	movs	r2, #16
 80072c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e003      	b.n	80072d0 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f001 f8d8 	bl	800847e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3740      	adds	r7, #64	; 0x40
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b0ba      	sub	sp, #232	; 0xe8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007302:	f640 030f 	movw	r3, #2063	; 0x80f
 8007306:	4013      	ands	r3, r2
 8007308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800730c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d11b      	bne.n	800734c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d015      	beq.n	800734c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d105      	bne.n	8007338 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800732c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d009      	beq.n	800734c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800733c:	2b00      	cmp	r3, #0
 800733e:	f000 82e3 	beq.w	8007908 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
      }
      return;
 800734a:	e2dd      	b.n	8007908 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800734c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 8123 	beq.w	800759c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007356:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800735a:	4b8d      	ldr	r3, [pc, #564]	; (8007590 <HAL_UART_IRQHandler+0x2b8>)
 800735c:	4013      	ands	r3, r2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007366:	4b8b      	ldr	r3, [pc, #556]	; (8007594 <HAL_UART_IRQHandler+0x2bc>)
 8007368:	4013      	ands	r3, r2
 800736a:	2b00      	cmp	r3, #0
 800736c:	f000 8116 	beq.w	800759c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d011      	beq.n	80073a0 <HAL_UART_IRQHandler+0xc8>
 800737c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007384:	2b00      	cmp	r3, #0
 8007386:	d00b      	beq.n	80073a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2201      	movs	r2, #1
 800738e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007396:	f043 0201 	orr.w	r2, r3, #1
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d011      	beq.n	80073d0 <HAL_UART_IRQHandler+0xf8>
 80073ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2202      	movs	r2, #2
 80073be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	f043 0204 	orr.w	r2, r3, #4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d011      	beq.n	8007400 <HAL_UART_IRQHandler+0x128>
 80073dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2204      	movs	r2, #4
 80073ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	f043 0202 	orr.w	r2, r3, #2
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d017      	beq.n	800743c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800740c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007410:	f003 0320 	and.w	r3, r3, #32
 8007414:	2b00      	cmp	r3, #0
 8007416:	d105      	bne.n	8007424 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800741c:	4b5c      	ldr	r3, [pc, #368]	; (8007590 <HAL_UART_IRQHandler+0x2b8>)
 800741e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2208      	movs	r2, #8
 800742a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007432:	f043 0208 	orr.w	r2, r3, #8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800743c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007444:	2b00      	cmp	r3, #0
 8007446:	d012      	beq.n	800746e <HAL_UART_IRQHandler+0x196>
 8007448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800744c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00c      	beq.n	800746e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800745c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007464:	f043 0220 	orr.w	r2, r3, #32
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 8249 	beq.w	800790c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800747a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747e:	f003 0320 	and.w	r3, r3, #32
 8007482:	2b00      	cmp	r3, #0
 8007484:	d013      	beq.n	80074ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d007      	beq.n	80074ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d003      	beq.n	80074ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d005      	beq.n	80074d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d054      	beq.n	800757c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 ffd3 	bl	800847e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e2:	2b40      	cmp	r3, #64	; 0x40
 80074e4:	d146      	bne.n	8007574 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074f4:	e853 3f00 	ldrex	r3, [r3]
 80074f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007512:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800751e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800752a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1d9      	bne.n	80074e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007538:	2b00      	cmp	r3, #0
 800753a:	d017      	beq.n	800756c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007542:	4a15      	ldr	r2, [pc, #84]	; (8007598 <HAL_UART_IRQHandler+0x2c0>)
 8007544:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800754c:	4618      	mov	r0, r3
 800754e:	f7fd f84e 	bl	80045ee <HAL_DMA_Abort_IT>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d019      	beq.n	800758c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007566:	4610      	mov	r0, r2
 8007568:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756a:	e00f      	b.n	800758c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7fa fd2f 	bl	8001fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007572:	e00b      	b.n	800758c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f7fa fd2b 	bl	8001fd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757a:	e007      	b.n	800758c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fa fd27 	bl	8001fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800758a:	e1bf      	b.n	800790c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800758c:	bf00      	nop
    return;
 800758e:	e1bd      	b.n	800790c <HAL_UART_IRQHandler+0x634>
 8007590:	10000001 	.word	0x10000001
 8007594:	04000120 	.word	0x04000120
 8007598:	08008735 	.word	0x08008735

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	f040 8153 	bne.w	800784c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075aa:	f003 0310 	and.w	r3, r3, #16
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 814c 	beq.w	800784c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b8:	f003 0310 	and.w	r3, r3, #16
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8145 	beq.w	800784c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2210      	movs	r2, #16
 80075c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b40      	cmp	r3, #64	; 0x40
 80075d6:	f040 80bb 	bne.w	8007750 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 818f 	beq.w	8007910 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075fc:	429a      	cmp	r2, r3
 80075fe:	f080 8187 	bcs.w	8007910 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f003 0320 	and.w	r3, r3, #32
 800761a:	2b00      	cmp	r3, #0
 800761c:	f040 8087 	bne.w	800772e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800762c:	e853 3f00 	ldrex	r3, [r3]
 8007630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800763c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800764a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800764e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007652:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007656:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1da      	bne.n	8007620 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800767a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800767c:	f023 0301 	bic.w	r3, r3, #1
 8007680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800768e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007692:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007694:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007696:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e1      	bne.n	800766a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3308      	adds	r3, #8
 80076c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e3      	bne.n	80076a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fc:	f023 0310 	bic.w	r3, r3, #16
 8007700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800770e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007710:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800771c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e4      	bne.n	80076ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007728:	4618      	mov	r0, r3
 800772a:	f7fc ff04 	bl	8004536 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2202      	movs	r2, #2
 8007732:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007740:	b29b      	uxth	r3, r3
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	b29b      	uxth	r3, r3
 8007746:	4619      	mov	r1, r3
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f7fa fb5d 	bl	8001e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800774e:	e0df      	b.n	8007910 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800775c:	b29b      	uxth	r3, r3
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800776a:	b29b      	uxth	r3, r3
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80d1 	beq.w	8007914 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 80cc 	beq.w	8007914 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800778a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800779e:	647b      	str	r3, [r7, #68]	; 0x44
 80077a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e4      	bne.n	800777c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	623b      	str	r3, [r7, #32]
   return(result);
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3308      	adds	r3, #8
 80077d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077da:	633a      	str	r2, [r7, #48]	; 0x30
 80077dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e1      	bne.n	80077b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2220      	movs	r2, #32
 80077f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	e853 3f00 	ldrex	r3, [r3]
 800780e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0310 	bic.w	r3, r3, #16
 8007816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007824:	61fb      	str	r3, [r7, #28]
 8007826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	69b9      	ldr	r1, [r7, #24]
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	617b      	str	r3, [r7, #20]
   return(result);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e4      	bne.n	8007802 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800783e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fa fadf 	bl	8001e08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800784a:	e063      	b.n	8007914 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800784c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <HAL_UART_IRQHandler+0x59e>
 8007858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800785c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800786c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 ffa1 	bl	80087b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007874:	e051      	b.n	800791a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b00      	cmp	r3, #0
 8007880:	d014      	beq.n	80078ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788a:	2b00      	cmp	r3, #0
 800788c:	d105      	bne.n	800789a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800788e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d008      	beq.n	80078ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d03a      	beq.n	8007918 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
    }
    return;
 80078aa:	e035      	b.n	8007918 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d009      	beq.n	80078cc <HAL_UART_IRQHandler+0x5f4>
 80078b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 ff4b 	bl	8008760 <UART_EndTransmit_IT>
    return;
 80078ca:	e026      	b.n	800791a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d009      	beq.n	80078ec <HAL_UART_IRQHandler+0x614>
 80078d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 ff7a 	bl	80087de <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078ea:	e016      	b.n	800791a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d010      	beq.n	800791a <HAL_UART_IRQHandler+0x642>
 80078f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	da0c      	bge.n	800791a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 ff62 	bl	80087ca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007906:	e008      	b.n	800791a <HAL_UART_IRQHandler+0x642>
      return;
 8007908:	bf00      	nop
 800790a:	e006      	b.n	800791a <HAL_UART_IRQHandler+0x642>
    return;
 800790c:	bf00      	nop
 800790e:	e004      	b.n	800791a <HAL_UART_IRQHandler+0x642>
      return;
 8007910:	bf00      	nop
 8007912:	e002      	b.n	800791a <HAL_UART_IRQHandler+0x642>
      return;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <HAL_UART_IRQHandler+0x642>
    return;
 8007918:	bf00      	nop
  }
}
 800791a:	37e8      	adds	r7, #232	; 0xe8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800794c:	b08c      	sub	sp, #48	; 0x30
 800794e:	af00      	add	r7, sp, #0
 8007950:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	689a      	ldr	r2, [r3, #8]
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	431a      	orrs	r2, r3
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	431a      	orrs	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	69db      	ldr	r3, [r3, #28]
 800796c:	4313      	orrs	r3, r2
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	4baa      	ldr	r3, [pc, #680]	; (8007c20 <UART_SetConfig+0x2d8>)
 8007978:	4013      	ands	r3, r2
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007980:	430b      	orrs	r3, r1
 8007982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	430a      	orrs	r2, r1
 8007998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	699b      	ldr	r3, [r3, #24]
 800799e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a9f      	ldr	r2, [pc, #636]	; (8007c24 <UART_SetConfig+0x2dc>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d004      	beq.n	80079b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b0:	4313      	orrs	r3, r2
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80079be:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079c8:	430b      	orrs	r3, r1
 80079ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	f023 010f 	bic.w	r1, r3, #15
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a90      	ldr	r2, [pc, #576]	; (8007c28 <UART_SetConfig+0x2e0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d125      	bne.n	8007a38 <UART_SetConfig+0xf0>
 80079ec:	4b8f      	ldr	r3, [pc, #572]	; (8007c2c <UART_SetConfig+0x2e4>)
 80079ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	2b03      	cmp	r3, #3
 80079f8:	d81a      	bhi.n	8007a30 <UART_SetConfig+0xe8>
 80079fa:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <UART_SetConfig+0xb8>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a11 	.word	0x08007a11
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a19 	.word	0x08007a19
 8007a0c:	08007a29 	.word	0x08007a29
 8007a10:	2301      	movs	r3, #1
 8007a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a16:	e116      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007a18:	2302      	movs	r3, #2
 8007a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a1e:	e112      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007a20:	2304      	movs	r3, #4
 8007a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a26:	e10e      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a2e:	e10a      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007a30:	2310      	movs	r3, #16
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a36:	e106      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a7c      	ldr	r2, [pc, #496]	; (8007c30 <UART_SetConfig+0x2e8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d138      	bne.n	8007ab4 <UART_SetConfig+0x16c>
 8007a42:	4b7a      	ldr	r3, [pc, #488]	; (8007c2c <UART_SetConfig+0x2e4>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	f003 030c 	and.w	r3, r3, #12
 8007a4c:	2b0c      	cmp	r3, #12
 8007a4e:	d82d      	bhi.n	8007aac <UART_SetConfig+0x164>
 8007a50:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0x110>)
 8007a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a56:	bf00      	nop
 8007a58:	08007a8d 	.word	0x08007a8d
 8007a5c:	08007aad 	.word	0x08007aad
 8007a60:	08007aad 	.word	0x08007aad
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007a9d 	.word	0x08007a9d
 8007a6c:	08007aad 	.word	0x08007aad
 8007a70:	08007aad 	.word	0x08007aad
 8007a74:	08007aad 	.word	0x08007aad
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007aad 	.word	0x08007aad
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a92:	e0d8      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007a94:	2302      	movs	r3, #2
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9a:	e0d4      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007a9c:	2304      	movs	r3, #4
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa2:	e0d0      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aaa:	e0cc      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007aac:	2310      	movs	r3, #16
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab2:	e0c8      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a5e      	ldr	r2, [pc, #376]	; (8007c34 <UART_SetConfig+0x2ec>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d125      	bne.n	8007b0a <UART_SetConfig+0x1c2>
 8007abe:	4b5b      	ldr	r3, [pc, #364]	; (8007c2c <UART_SetConfig+0x2e4>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007ac8:	2b30      	cmp	r3, #48	; 0x30
 8007aca:	d016      	beq.n	8007afa <UART_SetConfig+0x1b2>
 8007acc:	2b30      	cmp	r3, #48	; 0x30
 8007ace:	d818      	bhi.n	8007b02 <UART_SetConfig+0x1ba>
 8007ad0:	2b20      	cmp	r3, #32
 8007ad2:	d00a      	beq.n	8007aea <UART_SetConfig+0x1a2>
 8007ad4:	2b20      	cmp	r3, #32
 8007ad6:	d814      	bhi.n	8007b02 <UART_SetConfig+0x1ba>
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <UART_SetConfig+0x19a>
 8007adc:	2b10      	cmp	r3, #16
 8007ade:	d008      	beq.n	8007af2 <UART_SetConfig+0x1aa>
 8007ae0:	e00f      	b.n	8007b02 <UART_SetConfig+0x1ba>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae8:	e0ad      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007aea:	2302      	movs	r3, #2
 8007aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af0:	e0a9      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007af2:	2304      	movs	r3, #4
 8007af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af8:	e0a5      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007afa:	2308      	movs	r3, #8
 8007afc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b00:	e0a1      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007b02:	2310      	movs	r3, #16
 8007b04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b08:	e09d      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a4a      	ldr	r2, [pc, #296]	; (8007c38 <UART_SetConfig+0x2f0>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d125      	bne.n	8007b60 <UART_SetConfig+0x218>
 8007b14:	4b45      	ldr	r3, [pc, #276]	; (8007c2c <UART_SetConfig+0x2e4>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b20:	d016      	beq.n	8007b50 <UART_SetConfig+0x208>
 8007b22:	2bc0      	cmp	r3, #192	; 0xc0
 8007b24:	d818      	bhi.n	8007b58 <UART_SetConfig+0x210>
 8007b26:	2b80      	cmp	r3, #128	; 0x80
 8007b28:	d00a      	beq.n	8007b40 <UART_SetConfig+0x1f8>
 8007b2a:	2b80      	cmp	r3, #128	; 0x80
 8007b2c:	d814      	bhi.n	8007b58 <UART_SetConfig+0x210>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <UART_SetConfig+0x1f0>
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d008      	beq.n	8007b48 <UART_SetConfig+0x200>
 8007b36:	e00f      	b.n	8007b58 <UART_SetConfig+0x210>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b3e:	e082      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007b40:	2302      	movs	r3, #2
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b46:	e07e      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4e:	e07a      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007b50:	2308      	movs	r3, #8
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e076      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007b58:	2310      	movs	r3, #16
 8007b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5e:	e072      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a35      	ldr	r2, [pc, #212]	; (8007c3c <UART_SetConfig+0x2f4>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d12a      	bne.n	8007bc0 <UART_SetConfig+0x278>
 8007b6a:	4b30      	ldr	r3, [pc, #192]	; (8007c2c <UART_SetConfig+0x2e4>)
 8007b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b78:	d01a      	beq.n	8007bb0 <UART_SetConfig+0x268>
 8007b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7e:	d81b      	bhi.n	8007bb8 <UART_SetConfig+0x270>
 8007b80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b84:	d00c      	beq.n	8007ba0 <UART_SetConfig+0x258>
 8007b86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b8a:	d815      	bhi.n	8007bb8 <UART_SetConfig+0x270>
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <UART_SetConfig+0x250>
 8007b90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b94:	d008      	beq.n	8007ba8 <UART_SetConfig+0x260>
 8007b96:	e00f      	b.n	8007bb8 <UART_SetConfig+0x270>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b9e:	e052      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba6:	e04e      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007ba8:	2304      	movs	r3, #4
 8007baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bae:	e04a      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007bb0:	2308      	movs	r3, #8
 8007bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb6:	e046      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007bb8:	2310      	movs	r3, #16
 8007bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bbe:	e042      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a17      	ldr	r2, [pc, #92]	; (8007c24 <UART_SetConfig+0x2dc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d13a      	bne.n	8007c40 <UART_SetConfig+0x2f8>
 8007bca:	4b18      	ldr	r3, [pc, #96]	; (8007c2c <UART_SetConfig+0x2e4>)
 8007bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bd0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bd8:	d01a      	beq.n	8007c10 <UART_SetConfig+0x2c8>
 8007bda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bde:	d81b      	bhi.n	8007c18 <UART_SetConfig+0x2d0>
 8007be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007be4:	d00c      	beq.n	8007c00 <UART_SetConfig+0x2b8>
 8007be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bea:	d815      	bhi.n	8007c18 <UART_SetConfig+0x2d0>
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <UART_SetConfig+0x2b0>
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bf4:	d008      	beq.n	8007c08 <UART_SetConfig+0x2c0>
 8007bf6:	e00f      	b.n	8007c18 <UART_SetConfig+0x2d0>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfe:	e022      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007c00:	2302      	movs	r3, #2
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c06:	e01e      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007c08:	2304      	movs	r3, #4
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0e:	e01a      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007c10:	2308      	movs	r3, #8
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c16:	e016      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007c18:	2310      	movs	r3, #16
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1e:	e012      	b.n	8007c46 <UART_SetConfig+0x2fe>
 8007c20:	cfff69f3 	.word	0xcfff69f3
 8007c24:	40008000 	.word	0x40008000
 8007c28:	40013800 	.word	0x40013800
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	40004400 	.word	0x40004400
 8007c34:	40004800 	.word	0x40004800
 8007c38:	40004c00 	.word	0x40004c00
 8007c3c:	40005000 	.word	0x40005000
 8007c40:	2310      	movs	r3, #16
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4ab0      	ldr	r2, [pc, #704]	; (8007f0c <UART_SetConfig+0x5c4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	f040 809b 	bne.w	8007d88 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c56:	2b08      	cmp	r3, #8
 8007c58:	d827      	bhi.n	8007caa <UART_SetConfig+0x362>
 8007c5a:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0x318>)
 8007c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c60:	08007c85 	.word	0x08007c85
 8007c64:	08007c8d 	.word	0x08007c8d
 8007c68:	08007c95 	.word	0x08007c95
 8007c6c:	08007cab 	.word	0x08007cab
 8007c70:	08007c9b 	.word	0x08007c9b
 8007c74:	08007cab 	.word	0x08007cab
 8007c78:	08007cab 	.word	0x08007cab
 8007c7c:	08007cab 	.word	0x08007cab
 8007c80:	08007ca3 	.word	0x08007ca3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c84:	f7fe fa1e 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 8007c88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c8a:	e014      	b.n	8007cb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c8c:	f7fe fa2e 	bl	80060ec <HAL_RCC_GetPCLK2Freq>
 8007c90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c92:	e010      	b.n	8007cb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c94:	4b9e      	ldr	r3, [pc, #632]	; (8007f10 <UART_SetConfig+0x5c8>)
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007c98:	e00d      	b.n	8007cb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c9a:	f7fe f961 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 8007c9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ca0:	e009      	b.n	8007cb6 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ca8:	e005      	b.n	8007cb6 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cb4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 8130 	beq.w	8007f1e <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc2:	4a94      	ldr	r2, [pc, #592]	; (8007f14 <UART_SetConfig+0x5cc>)
 8007cc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	4413      	add	r3, r2
 8007cdc:	69ba      	ldr	r2, [r7, #24]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d305      	bcc.n	8007cee <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d903      	bls.n	8007cf6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007cf4:	e113      	b.n	8007f1e <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	60bb      	str	r3, [r7, #8]
 8007cfc:	60fa      	str	r2, [r7, #12]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	4a84      	ldr	r2, [pc, #528]	; (8007f14 <UART_SetConfig+0x5cc>)
 8007d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	603b      	str	r3, [r7, #0]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d18:	f7f8 fa8c 	bl	8000234 <__aeabi_uldivmod>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	460b      	mov	r3, r1
 8007d20:	4610      	mov	r0, r2
 8007d22:	4619      	mov	r1, r3
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	f04f 0300 	mov.w	r3, #0
 8007d2c:	020b      	lsls	r3, r1, #8
 8007d2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d32:	0202      	lsls	r2, r0, #8
 8007d34:	6979      	ldr	r1, [r7, #20]
 8007d36:	6849      	ldr	r1, [r1, #4]
 8007d38:	0849      	lsrs	r1, r1, #1
 8007d3a:	2000      	movs	r0, #0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	4605      	mov	r5, r0
 8007d40:	eb12 0804 	adds.w	r8, r2, r4
 8007d44:	eb43 0905 	adc.w	r9, r3, r5
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	469a      	mov	sl, r3
 8007d50:	4693      	mov	fp, r2
 8007d52:	4652      	mov	r2, sl
 8007d54:	465b      	mov	r3, fp
 8007d56:	4640      	mov	r0, r8
 8007d58:	4649      	mov	r1, r9
 8007d5a:	f7f8 fa6b 	bl	8000234 <__aeabi_uldivmod>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4613      	mov	r3, r2
 8007d64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d6c:	d308      	bcc.n	8007d80 <UART_SetConfig+0x438>
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d74:	d204      	bcs.n	8007d80 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6a3a      	ldr	r2, [r7, #32]
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	e0ce      	b.n	8007f1e <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d86:	e0ca      	b.n	8007f1e <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d90:	d166      	bne.n	8007e60 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8007d92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d827      	bhi.n	8007dea <UART_SetConfig+0x4a2>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <UART_SetConfig+0x458>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007dc5 	.word	0x08007dc5
 8007da4:	08007dcd 	.word	0x08007dcd
 8007da8:	08007dd5 	.word	0x08007dd5
 8007dac:	08007deb 	.word	0x08007deb
 8007db0:	08007ddb 	.word	0x08007ddb
 8007db4:	08007deb 	.word	0x08007deb
 8007db8:	08007deb 	.word	0x08007deb
 8007dbc:	08007deb 	.word	0x08007deb
 8007dc0:	08007de3 	.word	0x08007de3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc4:	f7fe f97e 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 8007dc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dca:	e014      	b.n	8007df6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dcc:	f7fe f98e 	bl	80060ec <HAL_RCC_GetPCLK2Freq>
 8007dd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dd2:	e010      	b.n	8007df6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd4:	4b4e      	ldr	r3, [pc, #312]	; (8007f10 <UART_SetConfig+0x5c8>)
 8007dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007dd8:	e00d      	b.n	8007df6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dda:	f7fe f8c1 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 8007dde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007de0:	e009      	b.n	8007df6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007de8:	e005      	b.n	8007df6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007df4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 8090 	beq.w	8007f1e <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	4a44      	ldr	r2, [pc, #272]	; (8007f14 <UART_SetConfig+0x5cc>)
 8007e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e10:	005a      	lsls	r2, r3, #1
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	085b      	lsrs	r3, r3, #1
 8007e18:	441a      	add	r2, r3
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	2b0f      	cmp	r3, #15
 8007e28:	d916      	bls.n	8007e58 <UART_SetConfig+0x510>
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e30:	d212      	bcs.n	8007e58 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f023 030f 	bic.w	r3, r3, #15
 8007e3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	8bfb      	ldrh	r3, [r7, #30]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	8bfa      	ldrh	r2, [r7, #30]
 8007e54:	60da      	str	r2, [r3, #12]
 8007e56:	e062      	b.n	8007f1e <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e5e:	e05e      	b.n	8007f1e <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d828      	bhi.n	8007eba <UART_SetConfig+0x572>
 8007e68:	a201      	add	r2, pc, #4	; (adr r2, 8007e70 <UART_SetConfig+0x528>)
 8007e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6e:	bf00      	nop
 8007e70:	08007e95 	.word	0x08007e95
 8007e74:	08007e9d 	.word	0x08007e9d
 8007e78:	08007ea5 	.word	0x08007ea5
 8007e7c:	08007ebb 	.word	0x08007ebb
 8007e80:	08007eab 	.word	0x08007eab
 8007e84:	08007ebb 	.word	0x08007ebb
 8007e88:	08007ebb 	.word	0x08007ebb
 8007e8c:	08007ebb 	.word	0x08007ebb
 8007e90:	08007eb3 	.word	0x08007eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e94:	f7fe f916 	bl	80060c4 <HAL_RCC_GetPCLK1Freq>
 8007e98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e9a:	e014      	b.n	8007ec6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e9c:	f7fe f926 	bl	80060ec <HAL_RCC_GetPCLK2Freq>
 8007ea0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ea2:	e010      	b.n	8007ec6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ea4:	4b1a      	ldr	r3, [pc, #104]	; (8007f10 <UART_SetConfig+0x5c8>)
 8007ea6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ea8:	e00d      	b.n	8007ec6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eaa:	f7fe f859 	bl	8005f60 <HAL_RCC_GetSysClockFreq>
 8007eae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eb0:	e009      	b.n	8007ec6 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eb8:	e005      	b.n	8007ec6 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ec4:	bf00      	nop
    }

    if (pclk != 0U)
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d028      	beq.n	8007f1e <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <UART_SetConfig+0x5cc>)
 8007ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	085b      	lsrs	r3, r3, #1
 8007ee4:	441a      	add	r2, r3
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2b0f      	cmp	r3, #15
 8007ef4:	d910      	bls.n	8007f18 <UART_SetConfig+0x5d0>
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efc:	d20c      	bcs.n	8007f18 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007efe:	6a3b      	ldr	r3, [r7, #32]
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60da      	str	r2, [r3, #12]
 8007f08:	e009      	b.n	8007f1e <UART_SetConfig+0x5d6>
 8007f0a:	bf00      	nop
 8007f0c:	40008000 	.word	0x40008000
 8007f10:	00f42400 	.word	0x00f42400
 8007f14:	0800a164 	.word	0x0800a164
      }
      else
      {
        ret = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	2200      	movs	r2, #0
 8007f32:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2200      	movs	r2, #0
 8007f38:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f3a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3730      	adds	r7, #48	; 0x30
 8007f42:	46bd      	mov	sp, r7
 8007f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f76:	f003 0302 	and.w	r3, r3, #2
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f98:	f003 0304 	and.w	r3, r3, #4
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fba:	f003 0308 	and.w	r3, r3, #8
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fdc:	f003 0310 	and.w	r3, r3, #16
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d01a      	beq.n	800805e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	430a      	orrs	r2, r1
 800803c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008046:	d10a      	bne.n	800805e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	430a      	orrs	r2, r1
 800805c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	605a      	str	r2, [r3, #4]
  }
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b098      	sub	sp, #96	; 0x60
 8008090:	af02      	add	r7, sp, #8
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800809c:	f7fb f86c 	bl	8003178 <HAL_GetTick>
 80080a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d12f      	bne.n	8008110 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080b8:	2200      	movs	r2, #0
 80080ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 f88e 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d022      	beq.n	8008110 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d2:	e853 3f00 	ldrex	r3, [r3]
 80080d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080de:	653b      	str	r3, [r7, #80]	; 0x50
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	461a      	mov	r2, r3
 80080e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e8:	647b      	str	r3, [r7, #68]	; 0x44
 80080ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080f0:	e841 2300 	strex	r3, r2, [r1]
 80080f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80080f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d1e6      	bne.n	80080ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2220      	movs	r2, #32
 8008100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	e063      	b.n	80081d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b04      	cmp	r3, #4
 800811c:	d149      	bne.n	80081b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800811e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008126:	2200      	movs	r2, #0
 8008128:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f857 	bl	80081e0 <UART_WaitOnFlagUntilTimeout>
 8008132:	4603      	mov	r3, r0
 8008134:	2b00      	cmp	r3, #0
 8008136:	d03c      	beq.n	80081b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	e853 3f00 	ldrex	r3, [r3]
 8008144:	623b      	str	r3, [r7, #32]
   return(result);
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800814c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008156:	633b      	str	r3, [r7, #48]	; 0x30
 8008158:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800815c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800815e:	e841 2300 	strex	r3, r2, [r1]
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1e6      	bne.n	8008138 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3308      	adds	r3, #8
 8008170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	e853 3f00 	ldrex	r3, [r3]
 8008178:	60fb      	str	r3, [r7, #12]
   return(result);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f023 0301 	bic.w	r3, r3, #1
 8008180:	64bb      	str	r3, [r7, #72]	; 0x48
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800818a:	61fa      	str	r2, [r7, #28]
 800818c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800818e:	69b9      	ldr	r1, [r7, #24]
 8008190:	69fa      	ldr	r2, [r7, #28]
 8008192:	e841 2300 	strex	r3, r2, [r1]
 8008196:	617b      	str	r3, [r7, #20]
   return(result);
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1e5      	bne.n	800816a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e012      	b.n	80081d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2220      	movs	r2, #32
 80081be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3758      	adds	r7, #88	; 0x58
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	603b      	str	r3, [r7, #0]
 80081ec:	4613      	mov	r3, r2
 80081ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f0:	e049      	b.n	8008286 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d045      	beq.n	8008286 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081fa:	f7fa ffbd 	bl	8003178 <HAL_GetTick>
 80081fe:	4602      	mov	r2, r0
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	429a      	cmp	r2, r3
 8008208:	d302      	bcc.n	8008210 <UART_WaitOnFlagUntilTimeout+0x30>
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008210:	2303      	movs	r3, #3
 8008212:	e048      	b.n	80082a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d031      	beq.n	8008286 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69db      	ldr	r3, [r3, #28]
 8008228:	f003 0308 	and.w	r3, r3, #8
 800822c:	2b08      	cmp	r3, #8
 800822e:	d110      	bne.n	8008252 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2208      	movs	r2, #8
 8008236:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f000 f920 	bl	800847e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2208      	movs	r2, #8
 8008242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800824e:	2301      	movs	r3, #1
 8008250:	e029      	b.n	80082a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800825c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008260:	d111      	bne.n	8008286 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800826a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f906 	bl	800847e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2220      	movs	r2, #32
 8008276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e00f      	b.n	80082a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	69da      	ldr	r2, [r3, #28]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	4013      	ands	r3, r2
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	429a      	cmp	r2, r3
 8008294:	bf0c      	ite	eq
 8008296:	2301      	moveq	r3, #1
 8008298:	2300      	movne	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	461a      	mov	r2, r3
 800829e:	79fb      	ldrb	r3, [r7, #7]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d0a6      	beq.n	80081f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3710      	adds	r7, #16
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b096      	sub	sp, #88	; 0x58
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	4613      	mov	r3, r2
 80082bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	88fa      	ldrh	r2, [r7, #6]
 80082c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2222      	movs	r2, #34	; 0x22
 80082d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d02d      	beq.n	8008342 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082ec:	4a40      	ldr	r2, [pc, #256]	; (80083f0 <UART_Start_Receive_DMA+0x140>)
 80082ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f6:	4a3f      	ldr	r2, [pc, #252]	; (80083f4 <UART_Start_Receive_DMA+0x144>)
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008300:	4a3d      	ldr	r2, [pc, #244]	; (80083f8 <UART_Start_Receive_DMA+0x148>)
 8008302:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800830a:	2200      	movs	r2, #0
 800830c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3324      	adds	r3, #36	; 0x24
 800831a:	4619      	mov	r1, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008320:	461a      	mov	r2, r3
 8008322:	88fb      	ldrh	r3, [r7, #6]
 8008324:	f7fc f88c 	bl	8004440 <HAL_DMA_Start_IT>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d009      	beq.n	8008342 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2210      	movs	r2, #16
 8008332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e051      	b.n	80083e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d018      	beq.n	800837c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008352:	e853 3f00 	ldrex	r3, [r3]
 8008356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835e:	657b      	str	r3, [r7, #84]	; 0x54
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	461a      	mov	r2, r3
 8008366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008368:	64bb      	str	r3, [r7, #72]	; 0x48
 800836a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800836e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008370:	e841 2300 	strex	r3, r2, [r1]
 8008374:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	d1e6      	bne.n	800834a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	f043 0301 	orr.w	r3, r3, #1
 8008392:	653b      	str	r3, [r7, #80]	; 0x50
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3308      	adds	r3, #8
 800839a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800839c:	637a      	str	r2, [r7, #52]	; 0x34
 800839e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a4:	e841 2300 	strex	r3, r2, [r1]
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1e5      	bne.n	800837c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3308      	adds	r3, #8
 80083b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	e853 3f00 	ldrex	r3, [r3]
 80083be:	613b      	str	r3, [r7, #16]
   return(result);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083d0:	623a      	str	r2, [r7, #32]
 80083d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	69f9      	ldr	r1, [r7, #28]
 80083d6:	6a3a      	ldr	r2, [r7, #32]
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e5      	bne.n	80083b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3758      	adds	r7, #88	; 0x58
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	0800854b 	.word	0x0800854b
 80083f4:	08008677 	.word	0x08008677
 80083f8:	080086b5 	.word	0x080086b5

080083fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b08f      	sub	sp, #60	; 0x3c
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	e853 3f00 	ldrex	r3, [r3]
 8008410:	61fb      	str	r3, [r7, #28]
   return(result);
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008424:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e6      	bne.n	8008404 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3308      	adds	r3, #8
 800843c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	e853 3f00 	ldrex	r3, [r3]
 8008444:	60bb      	str	r3, [r7, #8]
   return(result);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800844c:	633b      	str	r3, [r7, #48]	; 0x30
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3308      	adds	r3, #8
 8008454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008456:	61ba      	str	r2, [r7, #24]
 8008458:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845a:	6979      	ldr	r1, [r7, #20]
 800845c:	69ba      	ldr	r2, [r7, #24]
 800845e:	e841 2300 	strex	r3, r2, [r1]
 8008462:	613b      	str	r3, [r7, #16]
   return(result);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d1e5      	bne.n	8008436 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008472:	bf00      	nop
 8008474:	373c      	adds	r7, #60	; 0x3c
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800847e:	b480      	push	{r7}
 8008480:	b095      	sub	sp, #84	; 0x54
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800849a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a4:	643b      	str	r3, [r7, #64]	; 0x40
 80084a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084ac:	e841 2300 	strex	r3, r2, [r1]
 80084b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e6      	bne.n	8008486 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3308      	adds	r3, #8
 80084be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	3308      	adds	r3, #8
 80084da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e3      	bne.n	80084b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d118      	bne.n	800852a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	e853 3f00 	ldrex	r3, [r3]
 8008504:	60bb      	str	r3, [r7, #8]
   return(result);
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f023 0310 	bic.w	r3, r3, #16
 800850c:	647b      	str	r3, [r7, #68]	; 0x44
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	461a      	mov	r2, r3
 8008514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008516:	61bb      	str	r3, [r7, #24]
 8008518:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851a:	6979      	ldr	r1, [r7, #20]
 800851c:	69ba      	ldr	r2, [r7, #24]
 800851e:	e841 2300 	strex	r3, r2, [r1]
 8008522:	613b      	str	r3, [r7, #16]
   return(result);
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d1e6      	bne.n	80084f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2200      	movs	r2, #0
 800853c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800853e:	bf00      	nop
 8008540:	3754      	adds	r7, #84	; 0x54
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800854a:	b580      	push	{r7, lr}
 800854c:	b09c      	sub	sp, #112	; 0x70
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008556:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0320 	and.w	r3, r3, #32
 8008562:	2b00      	cmp	r3, #0
 8008564:	d171      	bne.n	800864a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008568:	2200      	movs	r2, #0
 800856a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800856e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800857c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008582:	66bb      	str	r3, [r7, #104]	; 0x68
 8008584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800858c:	65bb      	str	r3, [r7, #88]	; 0x58
 800858e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008592:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800859a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e6      	bne.n	800856e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	f023 0301 	bic.w	r3, r3, #1
 80085b6:	667b      	str	r3, [r7, #100]	; 0x64
 80085b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3308      	adds	r3, #8
 80085be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085c0:	647a      	str	r2, [r7, #68]	; 0x44
 80085c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e5      	bne.n	80085a0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3308      	adds	r3, #8
 80085da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	e853 3f00 	ldrex	r3, [r3]
 80085e2:	623b      	str	r3, [r7, #32]
   return(result);
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ea:	663b      	str	r3, [r7, #96]	; 0x60
 80085ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3308      	adds	r3, #8
 80085f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085f4:	633a      	str	r2, [r7, #48]	; 0x30
 80085f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085fc:	e841 2300 	strex	r3, r2, [r1]
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1e5      	bne.n	80085d4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860a:	2220      	movs	r2, #32
 800860c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008614:	2b01      	cmp	r3, #1
 8008616:	d118      	bne.n	800864a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	e853 3f00 	ldrex	r3, [r3]
 8008624:	60fb      	str	r3, [r7, #12]
   return(result);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f023 0310 	bic.w	r3, r3, #16
 800862c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800862e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	461a      	mov	r2, r3
 8008634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	69fa      	ldr	r2, [r7, #28]
 800863e:	e841 2300 	strex	r3, r2, [r1]
 8008642:	617b      	str	r3, [r7, #20]
   return(result);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1e6      	bne.n	8008618 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800864a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864c:	2200      	movs	r2, #0
 800864e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008654:	2b01      	cmp	r3, #1
 8008656:	d107      	bne.n	8008668 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800865e:	4619      	mov	r1, r3
 8008660:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008662:	f7f9 fbd1 	bl	8001e08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008666:	e002      	b.n	800866e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008668:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800866a:	f7f9 fc41 	bl	8001ef0 <HAL_UART_RxCpltCallback>
}
 800866e:	bf00      	nop
 8008670:	3770      	adds	r7, #112	; 0x70
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008682:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2201      	movs	r2, #1
 8008688:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800868e:	2b01      	cmp	r3, #1
 8008690:	d109      	bne.n	80086a6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	b29b      	uxth	r3, r3
 800869c:	4619      	mov	r1, r3
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7f9 fbb2 	bl	8001e08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086a4:	e002      	b.n	80086ac <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f7ff f944 	bl	8007934 <HAL_UART_RxHalfCpltCallback>
}
 80086ac:	bf00      	nop
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086dc:	2b80      	cmp	r3, #128	; 0x80
 80086de:	d109      	bne.n	80086f4 <UART_DMAError+0x40>
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	2b21      	cmp	r3, #33	; 0x21
 80086e4:	d106      	bne.n	80086f4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80086ee:	6978      	ldr	r0, [r7, #20]
 80086f0:	f7ff fe84 	bl	80083fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fe:	2b40      	cmp	r3, #64	; 0x40
 8008700:	d109      	bne.n	8008716 <UART_DMAError+0x62>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b22      	cmp	r3, #34	; 0x22
 8008706:	d106      	bne.n	8008716 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	2200      	movs	r2, #0
 800870c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008710:	6978      	ldr	r0, [r7, #20]
 8008712:	f7ff feb4 	bl	800847e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871c:	f043 0210 	orr.w	r2, r3, #16
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008726:	6978      	ldr	r0, [r7, #20]
 8008728:	f7f9 fc52 	bl	8001fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800872c:	bf00      	nop
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008752:	68f8      	ldr	r0, [r7, #12]
 8008754:	f7f9 fc3c 	bl	8001fd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b088      	sub	sp, #32
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	60bb      	str	r3, [r7, #8]
   return(result);
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800877c:	61fb      	str	r3, [r7, #28]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	461a      	mov	r2, r3
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6979      	ldr	r1, [r7, #20]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	613b      	str	r3, [r7, #16]
   return(result);
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e6      	bne.n	8008768 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7ff f8b9 	bl	8007920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087ae:	bf00      	nop
 80087b0:	3720      	adds	r7, #32
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b083      	sub	sp, #12
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b085      	sub	sp, #20
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_UARTEx_DisableFifoMode+0x16>
 8008804:	2302      	movs	r3, #2
 8008806:	e027      	b.n	8008858 <HAL_UARTEx_DisableFifoMode+0x66>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2224      	movs	r2, #36	; 0x24
 8008814:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0201 	bic.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008836:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2220      	movs	r2, #32
 800884a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008878:	2302      	movs	r3, #2
 800887a:	e02d      	b.n	80088d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2224      	movs	r2, #36	; 0x24
 8008888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0201 	bic.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 f8a3 	bl	8008a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2220      	movs	r2, #32
 80088ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e02d      	b.n	8008954 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	; 0x24
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f865 	bl	8008a04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2220      	movs	r2, #32
 8008946:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08c      	sub	sp, #48	; 0x30
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	4613      	mov	r3, r2
 8008968:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008970:	2b20      	cmp	r3, #32
 8008972:	d142      	bne.n	80089fa <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e03b      	b.n	80089fc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008990:	88fb      	ldrh	r3, [r7, #6]
 8008992:	461a      	mov	r2, r3
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7ff fc8a 	bl	80082b0 <UART_Start_Receive_DMA>
 800899c:	4603      	mov	r3, r0
 800899e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80089a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d124      	bne.n	80089f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d11d      	bne.n	80089ee <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2210      	movs	r2, #16
 80089b8:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	617b      	str	r3, [r7, #20]
   return(result);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f043 0310 	orr.w	r3, r3, #16
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	461a      	mov	r2, r3
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	627b      	str	r3, [r7, #36]	; 0x24
 80089da:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6a39      	ldr	r1, [r7, #32]
 80089de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e6      	bne.n	80089ba <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80089ec:	e002      	b.n	80089f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80089f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80089f8:	e000      	b.n	80089fc <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80089fa:	2302      	movs	r3, #2
  }
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3730      	adds	r7, #48	; 0x30
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d108      	bne.n	8008a26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a24:	e031      	b.n	8008a8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a26:	2308      	movs	r3, #8
 8008a28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a2a:	2308      	movs	r3, #8
 8008a2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	0e5b      	lsrs	r3, r3, #25
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	f003 0307 	and.w	r3, r3, #7
 8008a3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	0f5b      	lsrs	r3, r3, #29
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a4e:	7bbb      	ldrb	r3, [r7, #14]
 8008a50:	7b3a      	ldrb	r2, [r7, #12]
 8008a52:	4911      	ldr	r1, [pc, #68]	; (8008a98 <UARTEx_SetNbDataToProcess+0x94>)
 8008a54:	5c8a      	ldrb	r2, [r1, r2]
 8008a56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008a5a:	7b3a      	ldrb	r2, [r7, #12]
 8008a5c:	490f      	ldr	r1, [pc, #60]	; (8008a9c <UARTEx_SetNbDataToProcess+0x98>)
 8008a5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a60:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a64:	b29a      	uxth	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a6c:	7bfb      	ldrb	r3, [r7, #15]
 8008a6e:	7b7a      	ldrb	r2, [r7, #13]
 8008a70:	4909      	ldr	r1, [pc, #36]	; (8008a98 <UARTEx_SetNbDataToProcess+0x94>)
 8008a72:	5c8a      	ldrb	r2, [r1, r2]
 8008a74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a78:	7b7a      	ldrb	r2, [r7, #13]
 8008a7a:	4908      	ldr	r1, [pc, #32]	; (8008a9c <UARTEx_SetNbDataToProcess+0x98>)
 8008a7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008a8a:	bf00      	nop
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	0800a17c 	.word	0x0800a17c
 8008a9c:	0800a184 	.word	0x0800a184

08008aa0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b08b      	sub	sp, #44	; 0x2c
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	fa93 f3a3 	rbit	r3, r3
 8008aba:	613b      	str	r3, [r7, #16]
  return result;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008ac6:	2320      	movs	r3, #32
 8008ac8:	e003      	b.n	8008ad2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	fab3 f383 	clz	r3, r3
 8008ad0:	b2db      	uxtb	r3, r3
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	2103      	movs	r1, #3
 8008ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8008ada:	43db      	mvns	r3, r3
 8008adc:	401a      	ands	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ae2:	6a3b      	ldr	r3, [r7, #32]
 8008ae4:	fa93 f3a3 	rbit	r3, r3
 8008ae8:	61fb      	str	r3, [r7, #28]
  return result;
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008af4:	2320      	movs	r3, #32
 8008af6:	e003      	b.n	8008b00 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	fab3 f383 	clz	r3, r3
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	fa01 f303 	lsl.w	r3, r1, r3
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	601a      	str	r2, [r3, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	372c      	adds	r7, #44	; 0x2c
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	685a      	ldr	r2, [r3, #4]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	43db      	mvns	r3, r3
 8008b2e:	401a      	ands	r2, r3
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	fb01 f303 	mul.w	r3, r1, r3
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	605a      	str	r2, [r3, #4]
}
 8008b3e:	bf00      	nop
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b08b      	sub	sp, #44	; 0x2c
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	60b9      	str	r1, [r7, #8]
 8008b54:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	689a      	ldr	r2, [r3, #8]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	fa93 f3a3 	rbit	r3, r3
 8008b64:	613b      	str	r3, [r7, #16]
  return result;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008b70:	2320      	movs	r3, #32
 8008b72:	e003      	b.n	8008b7c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008b74:	69bb      	ldr	r3, [r7, #24]
 8008b76:	fab3 f383 	clz	r3, r3
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	2103      	movs	r1, #3
 8008b80:	fa01 f303 	lsl.w	r3, r1, r3
 8008b84:	43db      	mvns	r3, r3
 8008b86:	401a      	ands	r2, r3
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	fa93 f3a3 	rbit	r3, r3
 8008b92:	61fb      	str	r3, [r7, #28]
  return result;
 8008b94:	69fb      	ldr	r3, [r7, #28]
 8008b96:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008b9e:	2320      	movs	r3, #32
 8008ba0:	e003      	b.n	8008baa <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba4:	fab3 f383 	clz	r3, r3
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	005b      	lsls	r3, r3, #1
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008bb8:	bf00      	nop
 8008bba:	372c      	adds	r7, #44	; 0x2c
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b08b      	sub	sp, #44	; 0x2c
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	fa93 f3a3 	rbit	r3, r3
 8008bde:	613b      	str	r3, [r7, #16]
  return result;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008be4:	69bb      	ldr	r3, [r7, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008bea:	2320      	movs	r3, #32
 8008bec:	e003      	b.n	8008bf6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	fab3 f383 	clz	r3, r3
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	2103      	movs	r1, #3
 8008bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	401a      	ands	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	fa93 f3a3 	rbit	r3, r3
 8008c0c:	61fb      	str	r3, [r7, #28]
  return result;
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008c18:	2320      	movs	r3, #32
 8008c1a:	e003      	b.n	8008c24 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	fab3 f383 	clz	r3, r3
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	005b      	lsls	r3, r3, #1
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	fa01 f303 	lsl.w	r3, r1, r3
 8008c2c:	431a      	orrs	r2, r3
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	60da      	str	r2, [r3, #12]
}
 8008c32:	bf00      	nop
 8008c34:	372c      	adds	r7, #44	; 0x2c
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b08b      	sub	sp, #44	; 0x2c
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	60b9      	str	r1, [r7, #8]
 8008c48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1a      	ldr	r2, [r3, #32]
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	fa93 f3a3 	rbit	r3, r3
 8008c58:	613b      	str	r3, [r7, #16]
  return result;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008c64:	2320      	movs	r3, #32
 8008c66:	e003      	b.n	8008c70 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	fab3 f383 	clz	r3, r3
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	210f      	movs	r1, #15
 8008c74:	fa01 f303 	lsl.w	r3, r1, r3
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	401a      	ands	r2, r3
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	fa93 f3a3 	rbit	r3, r3
 8008c86:	61fb      	str	r3, [r7, #28]
  return result;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008c92:	2320      	movs	r3, #32
 8008c94:	e003      	b.n	8008c9e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	fab3 f383 	clz	r3, r3
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	6879      	ldr	r1, [r7, #4]
 8008ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008cac:	bf00      	nop
 8008cae:	372c      	adds	r7, #44	; 0x2c
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b08b      	sub	sp, #44	; 0x2c
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	0a1b      	lsrs	r3, r3, #8
 8008ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	fa93 f3a3 	rbit	r3, r3
 8008cd4:	613b      	str	r3, [r7, #16]
  return result;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	e003      	b.n	8008cec <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	fab3 f383 	clz	r3, r3
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	210f      	movs	r1, #15
 8008cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	401a      	ands	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	0a1b      	lsrs	r3, r3, #8
 8008cfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	fa93 f3a3 	rbit	r3, r3
 8008d04:	61fb      	str	r3, [r7, #28]
  return result;
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008d10:	2320      	movs	r3, #32
 8008d12:	e003      	b.n	8008d1c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	fab3 f383 	clz	r3, r3
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	fa01 f303 	lsl.w	r3, r1, r3
 8008d24:	431a      	orrs	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008d2a:	bf00      	nop
 8008d2c:	372c      	adds	r7, #44	; 0x2c
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b088      	sub	sp, #32
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	fa93 f3a3 	rbit	r3, r3
 8008d4c:	60fb      	str	r3, [r7, #12]
  return result;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <LL_GPIO_Init+0x26>
    return 32U;
 8008d58:	2320      	movs	r3, #32
 8008d5a:	e003      	b.n	8008d64 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	fab3 f383 	clz	r3, r3
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008d66:	e047      	b.n	8008df8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	fa01 f303 	lsl.w	r3, r1, r3
 8008d74:	4013      	ands	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d039      	beq.n	8008df2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d003      	beq.n	8008d8e <LL_GPIO_Init+0x58>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d10d      	bne.n	8008daa <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	461a      	mov	r2, r3
 8008d94:	69b9      	ldr	r1, [r7, #24]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7ff fed7 	bl	8008b4a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	461a      	mov	r2, r3
 8008da2:	69b9      	ldr	r1, [r7, #24]
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff feb8 	bl	8008b1a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	461a      	mov	r2, r3
 8008db0:	69b9      	ldr	r1, [r7, #24]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f7ff ff06 	bl	8008bc4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d111      	bne.n	8008de4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	2bff      	cmp	r3, #255	; 0xff
 8008dc4:	d807      	bhi.n	8008dd6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	69b9      	ldr	r1, [r7, #24]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff ff35 	bl	8008c3e <LL_GPIO_SetAFPin_0_7>
 8008dd4:	e006      	b.n	8008de4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	69b9      	ldr	r1, [r7, #24]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff ff6a 	bl	8008cb8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	461a      	mov	r2, r3
 8008dea:	69b9      	ldr	r1, [r7, #24]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff fe57 	bl	8008aa0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	3301      	adds	r3, #1
 8008df6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1b0      	bne.n	8008d68 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e18:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008e1c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e24:	b29a      	uxth	r2, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	43db      	mvns	r3, r3
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	4013      	ands	r3, r2
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008e46:	b084      	sub	sp, #16
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	f107 0014 	add.w	r0, r7, #20
 8008e54:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e78:	2300      	movs	r3, #0
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	370c      	adds	r7, #12
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	b004      	add	sp, #16
 8008e86:	4770      	bx	lr

08008e88 <_ZdlPvj>:
 8008e88:	f000 b811 	b.w	8008eae <_ZdlPv>

08008e8c <_Znwj>:
 8008e8c:	2801      	cmp	r0, #1
 8008e8e:	bf38      	it	cc
 8008e90:	2001      	movcc	r0, #1
 8008e92:	b510      	push	{r4, lr}
 8008e94:	4604      	mov	r4, r0
 8008e96:	4620      	mov	r0, r4
 8008e98:	f000 f844 	bl	8008f24 <malloc>
 8008e9c:	b930      	cbnz	r0, 8008eac <_Znwj+0x20>
 8008e9e:	f000 f809 	bl	8008eb4 <_ZSt15get_new_handlerv>
 8008ea2:	b908      	cbnz	r0, 8008ea8 <_Znwj+0x1c>
 8008ea4:	f000 f80c 	bl	8008ec0 <abort>
 8008ea8:	4780      	blx	r0
 8008eaa:	e7f4      	b.n	8008e96 <_Znwj+0xa>
 8008eac:	bd10      	pop	{r4, pc}

08008eae <_ZdlPv>:
 8008eae:	f000 b841 	b.w	8008f34 <free>
	...

08008eb4 <_ZSt15get_new_handlerv>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	; (8008ebc <_ZSt15get_new_handlerv+0x8>)
 8008eb6:	e8d3 0faf 	lda	r0, [r3]
 8008eba:	4770      	bx	lr
 8008ebc:	200017e0 	.word	0x200017e0

08008ec0 <abort>:
 8008ec0:	2006      	movs	r0, #6
 8008ec2:	b508      	push	{r3, lr}
 8008ec4:	f000 f97c 	bl	80091c0 <raise>
 8008ec8:	2001      	movs	r0, #1
 8008eca:	f7f9 fc0d 	bl	80026e8 <_exit>
	...

08008ed0 <__errno>:
 8008ed0:	4b01      	ldr	r3, [pc, #4]	; (8008ed8 <__errno+0x8>)
 8008ed2:	6818      	ldr	r0, [r3, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	20000014 	.word	0x20000014

08008edc <__libc_init_array>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4d0d      	ldr	r5, [pc, #52]	; (8008f14 <__libc_init_array+0x38>)
 8008ee0:	2600      	movs	r6, #0
 8008ee2:	4c0d      	ldr	r4, [pc, #52]	; (8008f18 <__libc_init_array+0x3c>)
 8008ee4:	1b64      	subs	r4, r4, r5
 8008ee6:	10a4      	asrs	r4, r4, #2
 8008ee8:	42a6      	cmp	r6, r4
 8008eea:	d109      	bne.n	8008f00 <__libc_init_array+0x24>
 8008eec:	4d0b      	ldr	r5, [pc, #44]	; (8008f1c <__libc_init_array+0x40>)
 8008eee:	2600      	movs	r6, #0
 8008ef0:	4c0b      	ldr	r4, [pc, #44]	; (8008f20 <__libc_init_array+0x44>)
 8008ef2:	f000 f98f 	bl	8009214 <_init>
 8008ef6:	1b64      	subs	r4, r4, r5
 8008ef8:	10a4      	asrs	r4, r4, #2
 8008efa:	42a6      	cmp	r6, r4
 8008efc:	d105      	bne.n	8008f0a <__libc_init_array+0x2e>
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f04:	3601      	adds	r6, #1
 8008f06:	4798      	blx	r3
 8008f08:	e7ee      	b.n	8008ee8 <__libc_init_array+0xc>
 8008f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0e:	3601      	adds	r6, #1
 8008f10:	4798      	blx	r3
 8008f12:	e7f2      	b.n	8008efa <__libc_init_array+0x1e>
 8008f14:	0800a194 	.word	0x0800a194
 8008f18:	0800a194 	.word	0x0800a194
 8008f1c:	0800a194 	.word	0x0800a194
 8008f20:	0800a19c 	.word	0x0800a19c

08008f24 <malloc>:
 8008f24:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <malloc+0xc>)
 8008f26:	4601      	mov	r1, r0
 8008f28:	6818      	ldr	r0, [r3, #0]
 8008f2a:	f000 b89d 	b.w	8009068 <_malloc_r>
 8008f2e:	bf00      	nop
 8008f30:	20000014 	.word	0x20000014

08008f34 <free>:
 8008f34:	4b02      	ldr	r3, [pc, #8]	; (8008f40 <free+0xc>)
 8008f36:	4601      	mov	r1, r0
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	f000 b829 	b.w	8008f90 <_free_r>
 8008f3e:	bf00      	nop
 8008f40:	20000014 	.word	0x20000014

08008f44 <memcmp>:
 8008f44:	3901      	subs	r1, #1
 8008f46:	4402      	add	r2, r0
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4290      	cmp	r0, r2
 8008f4c:	d101      	bne.n	8008f52 <memcmp+0xe>
 8008f4e:	2000      	movs	r0, #0
 8008f50:	e005      	b.n	8008f5e <memcmp+0x1a>
 8008f52:	7803      	ldrb	r3, [r0, #0]
 8008f54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d001      	beq.n	8008f60 <memcmp+0x1c>
 8008f5c:	1b18      	subs	r0, r3, r4
 8008f5e:	bd10      	pop	{r4, pc}
 8008f60:	3001      	adds	r0, #1
 8008f62:	e7f2      	b.n	8008f4a <memcmp+0x6>

08008f64 <memcpy>:
 8008f64:	440a      	add	r2, r1
 8008f66:	1e43      	subs	r3, r0, #1
 8008f68:	4291      	cmp	r1, r2
 8008f6a:	d100      	bne.n	8008f6e <memcpy+0xa>
 8008f6c:	4770      	bx	lr
 8008f6e:	b510      	push	{r4, lr}
 8008f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f74:	4291      	cmp	r1, r2
 8008f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7a:	d1f9      	bne.n	8008f70 <memcpy+0xc>
 8008f7c:	bd10      	pop	{r4, pc}

08008f7e <memset>:
 8008f7e:	4402      	add	r2, r0
 8008f80:	4603      	mov	r3, r0
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d100      	bne.n	8008f88 <memset+0xa>
 8008f86:	4770      	bx	lr
 8008f88:	f803 1b01 	strb.w	r1, [r3], #1
 8008f8c:	e7f9      	b.n	8008f82 <memset+0x4>
	...

08008f90 <_free_r>:
 8008f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f92:	2900      	cmp	r1, #0
 8008f94:	d043      	beq.n	800901e <_free_r+0x8e>
 8008f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f9a:	1f0c      	subs	r4, r1, #4
 8008f9c:	9001      	str	r0, [sp, #4]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	bfb8      	it	lt
 8008fa2:	18e4      	addlt	r4, r4, r3
 8008fa4:	f000 f928 	bl	80091f8 <__malloc_lock>
 8008fa8:	4a1e      	ldr	r2, [pc, #120]	; (8009024 <_free_r+0x94>)
 8008faa:	9801      	ldr	r0, [sp, #4]
 8008fac:	6813      	ldr	r3, [r2, #0]
 8008fae:	b933      	cbnz	r3, 8008fbe <_free_r+0x2e>
 8008fb0:	6063      	str	r3, [r4, #4]
 8008fb2:	6014      	str	r4, [r2, #0]
 8008fb4:	b003      	add	sp, #12
 8008fb6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fba:	f000 b923 	b.w	8009204 <__malloc_unlock>
 8008fbe:	42a3      	cmp	r3, r4
 8008fc0:	d908      	bls.n	8008fd4 <_free_r+0x44>
 8008fc2:	6825      	ldr	r5, [r4, #0]
 8008fc4:	1961      	adds	r1, r4, r5
 8008fc6:	428b      	cmp	r3, r1
 8008fc8:	bf01      	itttt	eq
 8008fca:	6819      	ldreq	r1, [r3, #0]
 8008fcc:	685b      	ldreq	r3, [r3, #4]
 8008fce:	1949      	addeq	r1, r1, r5
 8008fd0:	6021      	streq	r1, [r4, #0]
 8008fd2:	e7ed      	b.n	8008fb0 <_free_r+0x20>
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	b10b      	cbz	r3, 8008fde <_free_r+0x4e>
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	d9fa      	bls.n	8008fd4 <_free_r+0x44>
 8008fde:	6811      	ldr	r1, [r2, #0]
 8008fe0:	1855      	adds	r5, r2, r1
 8008fe2:	42a5      	cmp	r5, r4
 8008fe4:	d10b      	bne.n	8008ffe <_free_r+0x6e>
 8008fe6:	6824      	ldr	r4, [r4, #0]
 8008fe8:	4421      	add	r1, r4
 8008fea:	1854      	adds	r4, r2, r1
 8008fec:	6011      	str	r1, [r2, #0]
 8008fee:	42a3      	cmp	r3, r4
 8008ff0:	d1e0      	bne.n	8008fb4 <_free_r+0x24>
 8008ff2:	681c      	ldr	r4, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	4421      	add	r1, r4
 8008ff8:	6053      	str	r3, [r2, #4]
 8008ffa:	6011      	str	r1, [r2, #0]
 8008ffc:	e7da      	b.n	8008fb4 <_free_r+0x24>
 8008ffe:	d902      	bls.n	8009006 <_free_r+0x76>
 8009000:	230c      	movs	r3, #12
 8009002:	6003      	str	r3, [r0, #0]
 8009004:	e7d6      	b.n	8008fb4 <_free_r+0x24>
 8009006:	6825      	ldr	r5, [r4, #0]
 8009008:	1961      	adds	r1, r4, r5
 800900a:	428b      	cmp	r3, r1
 800900c:	bf02      	ittt	eq
 800900e:	6819      	ldreq	r1, [r3, #0]
 8009010:	685b      	ldreq	r3, [r3, #4]
 8009012:	1949      	addeq	r1, r1, r5
 8009014:	6063      	str	r3, [r4, #4]
 8009016:	bf08      	it	eq
 8009018:	6021      	streq	r1, [r4, #0]
 800901a:	6054      	str	r4, [r2, #4]
 800901c:	e7ca      	b.n	8008fb4 <_free_r+0x24>
 800901e:	b003      	add	sp, #12
 8009020:	bd30      	pop	{r4, r5, pc}
 8009022:	bf00      	nop
 8009024:	200017e4 	.word	0x200017e4

08009028 <sbrk_aligned>:
 8009028:	b570      	push	{r4, r5, r6, lr}
 800902a:	4e0e      	ldr	r6, [pc, #56]	; (8009064 <sbrk_aligned+0x3c>)
 800902c:	460c      	mov	r4, r1
 800902e:	4605      	mov	r5, r0
 8009030:	6831      	ldr	r1, [r6, #0]
 8009032:	b911      	cbnz	r1, 800903a <sbrk_aligned+0x12>
 8009034:	f000 f88c 	bl	8009150 <_sbrk_r>
 8009038:	6030      	str	r0, [r6, #0]
 800903a:	4621      	mov	r1, r4
 800903c:	4628      	mov	r0, r5
 800903e:	f000 f887 	bl	8009150 <_sbrk_r>
 8009042:	1c43      	adds	r3, r0, #1
 8009044:	d00a      	beq.n	800905c <sbrk_aligned+0x34>
 8009046:	1cc4      	adds	r4, r0, #3
 8009048:	f024 0403 	bic.w	r4, r4, #3
 800904c:	42a0      	cmp	r0, r4
 800904e:	d007      	beq.n	8009060 <sbrk_aligned+0x38>
 8009050:	1a21      	subs	r1, r4, r0
 8009052:	4628      	mov	r0, r5
 8009054:	f000 f87c 	bl	8009150 <_sbrk_r>
 8009058:	3001      	adds	r0, #1
 800905a:	d101      	bne.n	8009060 <sbrk_aligned+0x38>
 800905c:	f04f 34ff 	mov.w	r4, #4294967295
 8009060:	4620      	mov	r0, r4
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	200017e8 	.word	0x200017e8

08009068 <_malloc_r>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	1ccd      	adds	r5, r1, #3
 800906e:	4607      	mov	r7, r0
 8009070:	f025 0503 	bic.w	r5, r5, #3
 8009074:	3508      	adds	r5, #8
 8009076:	2d0c      	cmp	r5, #12
 8009078:	bf38      	it	cc
 800907a:	250c      	movcc	r5, #12
 800907c:	2d00      	cmp	r5, #0
 800907e:	db01      	blt.n	8009084 <_malloc_r+0x1c>
 8009080:	42a9      	cmp	r1, r5
 8009082:	d905      	bls.n	8009090 <_malloc_r+0x28>
 8009084:	230c      	movs	r3, #12
 8009086:	2600      	movs	r6, #0
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	4630      	mov	r0, r6
 800908c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009090:	4e2e      	ldr	r6, [pc, #184]	; (800914c <_malloc_r+0xe4>)
 8009092:	f000 f8b1 	bl	80091f8 <__malloc_lock>
 8009096:	6833      	ldr	r3, [r6, #0]
 8009098:	461c      	mov	r4, r3
 800909a:	bb34      	cbnz	r4, 80090ea <_malloc_r+0x82>
 800909c:	4629      	mov	r1, r5
 800909e:	4638      	mov	r0, r7
 80090a0:	f7ff ffc2 	bl	8009028 <sbrk_aligned>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	4604      	mov	r4, r0
 80090a8:	d14d      	bne.n	8009146 <_malloc_r+0xde>
 80090aa:	6834      	ldr	r4, [r6, #0]
 80090ac:	4626      	mov	r6, r4
 80090ae:	2e00      	cmp	r6, #0
 80090b0:	d140      	bne.n	8009134 <_malloc_r+0xcc>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	4631      	mov	r1, r6
 80090b6:	4638      	mov	r0, r7
 80090b8:	eb04 0803 	add.w	r8, r4, r3
 80090bc:	f000 f848 	bl	8009150 <_sbrk_r>
 80090c0:	4580      	cmp	r8, r0
 80090c2:	d13a      	bne.n	800913a <_malloc_r+0xd2>
 80090c4:	6821      	ldr	r1, [r4, #0]
 80090c6:	3503      	adds	r5, #3
 80090c8:	4638      	mov	r0, r7
 80090ca:	1a6d      	subs	r5, r5, r1
 80090cc:	f025 0503 	bic.w	r5, r5, #3
 80090d0:	3508      	adds	r5, #8
 80090d2:	2d0c      	cmp	r5, #12
 80090d4:	bf38      	it	cc
 80090d6:	250c      	movcc	r5, #12
 80090d8:	4629      	mov	r1, r5
 80090da:	f7ff ffa5 	bl	8009028 <sbrk_aligned>
 80090de:	3001      	adds	r0, #1
 80090e0:	d02b      	beq.n	800913a <_malloc_r+0xd2>
 80090e2:	6823      	ldr	r3, [r4, #0]
 80090e4:	442b      	add	r3, r5
 80090e6:	6023      	str	r3, [r4, #0]
 80090e8:	e00e      	b.n	8009108 <_malloc_r+0xa0>
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	1b52      	subs	r2, r2, r5
 80090ee:	d41e      	bmi.n	800912e <_malloc_r+0xc6>
 80090f0:	2a0b      	cmp	r2, #11
 80090f2:	d916      	bls.n	8009122 <_malloc_r+0xba>
 80090f4:	1961      	adds	r1, r4, r5
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	6025      	str	r5, [r4, #0]
 80090fa:	bf18      	it	ne
 80090fc:	6059      	strne	r1, [r3, #4]
 80090fe:	6863      	ldr	r3, [r4, #4]
 8009100:	bf08      	it	eq
 8009102:	6031      	streq	r1, [r6, #0]
 8009104:	5162      	str	r2, [r4, r5]
 8009106:	604b      	str	r3, [r1, #4]
 8009108:	f104 060b 	add.w	r6, r4, #11
 800910c:	4638      	mov	r0, r7
 800910e:	f000 f879 	bl	8009204 <__malloc_unlock>
 8009112:	1d23      	adds	r3, r4, #4
 8009114:	f026 0607 	bic.w	r6, r6, #7
 8009118:	1af2      	subs	r2, r6, r3
 800911a:	d0b6      	beq.n	800908a <_malloc_r+0x22>
 800911c:	1b9b      	subs	r3, r3, r6
 800911e:	50a3      	str	r3, [r4, r2]
 8009120:	e7b3      	b.n	800908a <_malloc_r+0x22>
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	42a3      	cmp	r3, r4
 8009126:	bf0c      	ite	eq
 8009128:	6032      	streq	r2, [r6, #0]
 800912a:	605a      	strne	r2, [r3, #4]
 800912c:	e7ec      	b.n	8009108 <_malloc_r+0xa0>
 800912e:	4623      	mov	r3, r4
 8009130:	6864      	ldr	r4, [r4, #4]
 8009132:	e7b2      	b.n	800909a <_malloc_r+0x32>
 8009134:	4634      	mov	r4, r6
 8009136:	6876      	ldr	r6, [r6, #4]
 8009138:	e7b9      	b.n	80090ae <_malloc_r+0x46>
 800913a:	230c      	movs	r3, #12
 800913c:	4638      	mov	r0, r7
 800913e:	603b      	str	r3, [r7, #0]
 8009140:	f000 f860 	bl	8009204 <__malloc_unlock>
 8009144:	e7a1      	b.n	800908a <_malloc_r+0x22>
 8009146:	6025      	str	r5, [r4, #0]
 8009148:	e7de      	b.n	8009108 <_malloc_r+0xa0>
 800914a:	bf00      	nop
 800914c:	200017e4 	.word	0x200017e4

08009150 <_sbrk_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	2300      	movs	r3, #0
 8009154:	4d05      	ldr	r5, [pc, #20]	; (800916c <_sbrk_r+0x1c>)
 8009156:	4604      	mov	r4, r0
 8009158:	4608      	mov	r0, r1
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	f7f9 face 	bl	80026fc <_sbrk>
 8009160:	1c43      	adds	r3, r0, #1
 8009162:	d102      	bne.n	800916a <_sbrk_r+0x1a>
 8009164:	682b      	ldr	r3, [r5, #0]
 8009166:	b103      	cbz	r3, 800916a <_sbrk_r+0x1a>
 8009168:	6023      	str	r3, [r4, #0]
 800916a:	bd38      	pop	{r3, r4, r5, pc}
 800916c:	200017ec 	.word	0x200017ec

08009170 <_raise_r>:
 8009170:	291f      	cmp	r1, #31
 8009172:	b538      	push	{r3, r4, r5, lr}
 8009174:	4604      	mov	r4, r0
 8009176:	460d      	mov	r5, r1
 8009178:	d904      	bls.n	8009184 <_raise_r+0x14>
 800917a:	2316      	movs	r3, #22
 800917c:	6003      	str	r3, [r0, #0]
 800917e:	f04f 30ff 	mov.w	r0, #4294967295
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009186:	b112      	cbz	r2, 800918e <_raise_r+0x1e>
 8009188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800918c:	b94b      	cbnz	r3, 80091a2 <_raise_r+0x32>
 800918e:	4620      	mov	r0, r4
 8009190:	f000 f830 	bl	80091f4 <_getpid_r>
 8009194:	462a      	mov	r2, r5
 8009196:	4601      	mov	r1, r0
 8009198:	4620      	mov	r0, r4
 800919a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800919e:	f000 b817 	b.w	80091d0 <_kill_r>
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d00a      	beq.n	80091bc <_raise_r+0x4c>
 80091a6:	1c59      	adds	r1, r3, #1
 80091a8:	d103      	bne.n	80091b2 <_raise_r+0x42>
 80091aa:	2316      	movs	r3, #22
 80091ac:	6003      	str	r3, [r0, #0]
 80091ae:	2001      	movs	r0, #1
 80091b0:	e7e7      	b.n	8009182 <_raise_r+0x12>
 80091b2:	2400      	movs	r4, #0
 80091b4:	4628      	mov	r0, r5
 80091b6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80091ba:	4798      	blx	r3
 80091bc:	2000      	movs	r0, #0
 80091be:	e7e0      	b.n	8009182 <_raise_r+0x12>

080091c0 <raise>:
 80091c0:	4b02      	ldr	r3, [pc, #8]	; (80091cc <raise+0xc>)
 80091c2:	4601      	mov	r1, r0
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	f7ff bfd3 	b.w	8009170 <_raise_r>
 80091ca:	bf00      	nop
 80091cc:	20000014 	.word	0x20000014

080091d0 <_kill_r>:
 80091d0:	b538      	push	{r3, r4, r5, lr}
 80091d2:	2300      	movs	r3, #0
 80091d4:	4d06      	ldr	r5, [pc, #24]	; (80091f0 <_kill_r+0x20>)
 80091d6:	4604      	mov	r4, r0
 80091d8:	4608      	mov	r0, r1
 80091da:	4611      	mov	r1, r2
 80091dc:	602b      	str	r3, [r5, #0]
 80091de:	f7f9 fa73 	bl	80026c8 <_kill>
 80091e2:	1c43      	adds	r3, r0, #1
 80091e4:	d102      	bne.n	80091ec <_kill_r+0x1c>
 80091e6:	682b      	ldr	r3, [r5, #0]
 80091e8:	b103      	cbz	r3, 80091ec <_kill_r+0x1c>
 80091ea:	6023      	str	r3, [r4, #0]
 80091ec:	bd38      	pop	{r3, r4, r5, pc}
 80091ee:	bf00      	nop
 80091f0:	200017ec 	.word	0x200017ec

080091f4 <_getpid_r>:
 80091f4:	f7f9 ba60 	b.w	80026b8 <_getpid>

080091f8 <__malloc_lock>:
 80091f8:	4801      	ldr	r0, [pc, #4]	; (8009200 <__malloc_lock+0x8>)
 80091fa:	f000 b809 	b.w	8009210 <__retarget_lock_acquire_recursive>
 80091fe:	bf00      	nop
 8009200:	200017f0 	.word	0x200017f0

08009204 <__malloc_unlock>:
 8009204:	4801      	ldr	r0, [pc, #4]	; (800920c <__malloc_unlock+0x8>)
 8009206:	f000 b804 	b.w	8009212 <__retarget_lock_release_recursive>
 800920a:	bf00      	nop
 800920c:	200017f0 	.word	0x200017f0

08009210 <__retarget_lock_acquire_recursive>:
 8009210:	4770      	bx	lr

08009212 <__retarget_lock_release_recursive>:
 8009212:	4770      	bx	lr

08009214 <_init>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr

08009220 <_fini>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr
