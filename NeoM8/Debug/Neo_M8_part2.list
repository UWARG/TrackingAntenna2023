
Neo_M8_part2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af4  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006ce8  08006ce8  00016ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d68  08006d68  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d68  08006d68  00016d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d70  08006d70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006d70  08006d70  00016d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08006d78  08006d78  00016d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006d80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a2c  2000000c  08006d8c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  08006d8c  00020a38  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd2a  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a7  00000000  00000000  0003dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  00041618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00042c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000301d9  00000000  00000000  000440c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000195a1  00000000  00000000  00074299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012aa40  00000000  00000000  0008d83a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b827a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dbc  00000000  00000000  001b82cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08006cd0 	.word	0x08006cd0

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08006cd0 	.word	0x08006cd0

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026a:	4604      	mov	r4, r0
 800026c:	460f      	mov	r7, r1
 800026e:	2b00      	cmp	r3, #0
 8000270:	d148      	bne.n	8000304 <__udivmoddi4+0xa0>
 8000272:	428a      	cmp	r2, r1
 8000274:	4694      	mov	ip, r2
 8000276:	d961      	bls.n	800033c <__udivmoddi4+0xd8>
 8000278:	fab2 f382 	clz	r3, r2
 800027c:	b143      	cbz	r3, 8000290 <__udivmoddi4+0x2c>
 800027e:	f1c3 0120 	rsb	r1, r3, #32
 8000282:	409f      	lsls	r7, r3
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	409c      	lsls	r4, r3
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	430f      	orrs	r7, r1
 8000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	0c22      	lsrs	r2, r4, #16
 800029a:	fbb7 f6f1 	udiv	r6, r7, r1
 800029e:	fb01 7716 	mls	r7, r1, r6, r7
 80002a2:	fb06 f00e 	mul.w	r0, r6, lr
 80002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002aa:	4290      	cmp	r0, r2
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x5c>
 80002ae:	eb1c 0202 	adds.w	r2, ip, r2
 80002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x5a>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f200 8137 	bhi.w	800052c <__udivmoddi4+0x2c8>
 80002be:	463e      	mov	r6, r7
 80002c0:	1a12      	subs	r2, r2, r0
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002c8:	fb01 2210 	mls	r2, r1, r0, r2
 80002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x86>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x84>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 811c 	bhi.w	8000520 <__udivmoddi4+0x2bc>
 80002e8:	4610      	mov	r0, r2
 80002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ee:	eba4 040e 	sub.w	r4, r4, lr
 80002f2:	2600      	movs	r6, #0
 80002f4:	b11d      	cbz	r5, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c5 4300 	strd	r4, r3, [r5]
 80002fe:	4631      	mov	r1, r6
 8000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000304:	428b      	cmp	r3, r1
 8000306:	d909      	bls.n	800031c <__udivmoddi4+0xb8>
 8000308:	2d00      	cmp	r5, #0
 800030a:	f000 80fd 	beq.w	8000508 <__udivmoddi4+0x2a4>
 800030e:	2600      	movs	r6, #0
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	4630      	mov	r0, r6
 8000316:	4631      	mov	r1, r6
 8000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031c:	fab3 f683 	clz	r6, r3
 8000320:	2e00      	cmp	r6, #0
 8000322:	d14b      	bne.n	80003bc <__udivmoddi4+0x158>
 8000324:	428b      	cmp	r3, r1
 8000326:	f0c0 80f2 	bcc.w	800050e <__udivmoddi4+0x2aa>
 800032a:	4282      	cmp	r2, r0
 800032c:	f240 80ef 	bls.w	800050e <__udivmoddi4+0x2aa>
 8000330:	4630      	mov	r0, r6
 8000332:	2d00      	cmp	r5, #0
 8000334:	d0e3      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000336:	e9c5 4700 	strd	r4, r7, [r5]
 800033a:	e7e0      	b.n	80002fe <__udivmoddi4+0x9a>
 800033c:	b902      	cbnz	r2, 8000340 <__udivmoddi4+0xdc>
 800033e:	deff      	udf	#255	; 0xff
 8000340:	fab2 f382 	clz	r3, r2
 8000344:	2b00      	cmp	r3, #0
 8000346:	f040 809d 	bne.w	8000484 <__udivmoddi4+0x220>
 800034a:	1a89      	subs	r1, r1, r2
 800034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000350:	b297      	uxth	r7, r2
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f2fe 	udiv	r2, r1, lr
 800035a:	fb0e 1112 	mls	r1, lr, r2, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb07 f002 	mul.w	r0, r7, r2
 8000366:	4288      	cmp	r0, r1
 8000368:	d90f      	bls.n	800038a <__udivmoddi4+0x126>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000372:	bf2c      	ite	cs
 8000374:	f04f 0901 	movcs.w	r9, #1
 8000378:	f04f 0900 	movcc.w	r9, #0
 800037c:	4288      	cmp	r0, r1
 800037e:	d903      	bls.n	8000388 <__udivmoddi4+0x124>
 8000380:	f1b9 0f00 	cmp.w	r9, #0
 8000384:	f000 80cf 	beq.w	8000526 <__udivmoddi4+0x2c2>
 8000388:	4642      	mov	r2, r8
 800038a:	1a09      	subs	r1, r1, r0
 800038c:	b2a4      	uxth	r4, r4
 800038e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000392:	fb0e 1110 	mls	r1, lr, r0, r1
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039e:	42a7      	cmp	r7, r4
 80003a0:	d908      	bls.n	80003b4 <__udivmoddi4+0x150>
 80003a2:	eb1c 0404 	adds.w	r4, ip, r4
 80003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14e>
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	f200 80b4 	bhi.w	800051a <__udivmoddi4+0x2b6>
 80003b2:	4608      	mov	r0, r1
 80003b4:	1be4      	subs	r4, r4, r7
 80003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ba:	e79b      	b.n	80002f4 <__udivmoddi4+0x90>
 80003bc:	f1c6 0720 	rsb	r7, r6, #32
 80003c0:	40b3      	lsls	r3, r6
 80003c2:	fa01 f406 	lsl.w	r4, r1, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	40f9      	lsrs	r1, r7
 80003cc:	40b2      	lsls	r2, r6
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003da:	431c      	orrs	r4, r3
 80003dc:	fa1f fe8c 	uxth.w	lr, ip
 80003e0:	fa00 f306 	lsl.w	r3, r0, r6
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ea:	fb09 1118 	mls	r1, r9, r8, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb08 f00e 	mul.w	r0, r8, lr
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d90f      	bls.n	800041a <__udivmoddi4+0x1b6>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 8000402:	bf2c      	ite	cs
 8000404:	f04f 0b01 	movcs.w	fp, #1
 8000408:	f04f 0b00 	movcc.w	fp, #0
 800040c:	4288      	cmp	r0, r1
 800040e:	d903      	bls.n	8000418 <__udivmoddi4+0x1b4>
 8000410:	f1bb 0f00 	cmp.w	fp, #0
 8000414:	f000 808d 	beq.w	8000532 <__udivmoddi4+0x2ce>
 8000418:	46d0      	mov	r8, sl
 800041a:	1a09      	subs	r1, r1, r0
 800041c:	b2a4      	uxth	r4, r4
 800041e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000422:	fb09 1110 	mls	r1, r9, r0, r1
 8000426:	fb00 fe0e 	mul.w	lr, r0, lr
 800042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800042e:	458e      	cmp	lr, r1
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1de>
 8000432:	eb1c 0101 	adds.w	r1, ip, r1
 8000436:	f100 34ff 	add.w	r4, r0, #4294967295
 800043a:	d201      	bcs.n	8000440 <__udivmoddi4+0x1dc>
 800043c:	458e      	cmp	lr, r1
 800043e:	d87f      	bhi.n	8000540 <__udivmoddi4+0x2dc>
 8000440:	4620      	mov	r0, r4
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	eba1 010e 	sub.w	r1, r1, lr
 800044a:	fba0 9802 	umull	r9, r8, r0, r2
 800044e:	4541      	cmp	r1, r8
 8000450:	464c      	mov	r4, r9
 8000452:	46c6      	mov	lr, r8
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x1f8>
 8000456:	d106      	bne.n	8000466 <__udivmoddi4+0x202>
 8000458:	454b      	cmp	r3, r9
 800045a:	d204      	bcs.n	8000466 <__udivmoddi4+0x202>
 800045c:	3801      	subs	r0, #1
 800045e:	ebb9 0402 	subs.w	r4, r9, r2
 8000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000466:	2d00      	cmp	r5, #0
 8000468:	d070      	beq.n	800054c <__udivmoddi4+0x2e8>
 800046a:	1b1a      	subs	r2, r3, r4
 800046c:	eb61 010e 	sbc.w	r1, r1, lr
 8000470:	fa22 f306 	lsr.w	r3, r2, r6
 8000474:	fa01 f707 	lsl.w	r7, r1, r7
 8000478:	40f1      	lsrs	r1, r6
 800047a:	2600      	movs	r6, #0
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0020 	rsb	r0, r3, #32
 800048c:	fa01 f203 	lsl.w	r2, r1, r3
 8000490:	fa21 f600 	lsr.w	r6, r1, r0
 8000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000498:	fa24 f100 	lsr.w	r1, r4, r0
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	409c      	lsls	r4, r3
 80004a2:	4311      	orrs	r1, r2
 80004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004a8:	0c0a      	lsrs	r2, r1, #16
 80004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b2:	fb00 f607 	mul.w	r6, r0, r7
 80004b6:	4296      	cmp	r6, r2
 80004b8:	d90e      	bls.n	80004d8 <__udivmoddi4+0x274>
 80004ba:	eb1c 0202 	adds.w	r2, ip, r2
 80004be:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c2:	bf2c      	ite	cs
 80004c4:	f04f 0901 	movcs.w	r9, #1
 80004c8:	f04f 0900 	movcc.w	r9, #0
 80004cc:	4296      	cmp	r6, r2
 80004ce:	d902      	bls.n	80004d6 <__udivmoddi4+0x272>
 80004d0:	f1b9 0f00 	cmp.w	r9, #0
 80004d4:	d031      	beq.n	800053a <__udivmoddi4+0x2d6>
 80004d6:	4640      	mov	r0, r8
 80004d8:	1b92      	subs	r2, r2, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004e8:	fb06 f207 	mul.w	r2, r6, r7
 80004ec:	428a      	cmp	r2, r1
 80004ee:	d907      	bls.n	8000500 <__udivmoddi4+0x29c>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d201      	bcs.n	80004fe <__udivmoddi4+0x29a>
 80004fa:	428a      	cmp	r2, r1
 80004fc:	d823      	bhi.n	8000546 <__udivmoddi4+0x2e2>
 80004fe:	4646      	mov	r6, r8
 8000500:	1a89      	subs	r1, r1, r2
 8000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000506:	e725      	b.n	8000354 <__udivmoddi4+0xf0>
 8000508:	462e      	mov	r6, r5
 800050a:	4628      	mov	r0, r5
 800050c:	e6f7      	b.n	80002fe <__udivmoddi4+0x9a>
 800050e:	1a84      	subs	r4, r0, r2
 8000510:	eb61 0303 	sbc.w	r3, r1, r3
 8000514:	2001      	movs	r0, #1
 8000516:	461f      	mov	r7, r3
 8000518:	e70b      	b.n	8000332 <__udivmoddi4+0xce>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e749      	b.n	80003b4 <__udivmoddi4+0x150>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e6e1      	b.n	80002ea <__udivmoddi4+0x86>
 8000526:	3a02      	subs	r2, #2
 8000528:	4461      	add	r1, ip
 800052a:	e72e      	b.n	800038a <__udivmoddi4+0x126>
 800052c:	3e02      	subs	r6, #2
 800052e:	4462      	add	r2, ip
 8000530:	e6c6      	b.n	80002c0 <__udivmoddi4+0x5c>
 8000532:	f1a8 0802 	sub.w	r8, r8, #2
 8000536:	4461      	add	r1, ip
 8000538:	e76f      	b.n	800041a <__udivmoddi4+0x1b6>
 800053a:	3802      	subs	r0, #2
 800053c:	4462      	add	r2, ip
 800053e:	e7cb      	b.n	80004d8 <__udivmoddi4+0x274>
 8000540:	3802      	subs	r0, #2
 8000542:	4461      	add	r1, ip
 8000544:	e77d      	b.n	8000442 <__udivmoddi4+0x1de>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	e7d9      	b.n	8000500 <__udivmoddi4+0x29c>
 800054c:	462e      	mov	r6, r5
 800054e:	e6d6      	b.n	80002fe <__udivmoddi4+0x9a>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <_ZN7NEO_GPSC1EP20__UART_HandleTypeDef>:
#include "GPS.hpp"
#include "string.h"



NEO_GPS::NEO_GPS(UART_HandleTypeDef* dev)
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
{
	UART = dev;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	683a      	ldr	r2, [r7, #0]
 8000562:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	HAL_UART_Receive_DMA(UART, rx_raw, RAW_DATA_LENGTH);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8000572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000576:	4619      	mov	r1, r3
 8000578:	f004 fd8e 	bl	8005098 <HAL_UART_Receive_DMA>
}
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4618      	mov	r0, r3
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <_ZN7NEO_GPSD1Ev>:

//UART_HandleTypeDef* NEO_GPS::get_uart_handler() {
//	return UART;
//}

NEO_GPS::~NEO_GPS()
 8000586:	b480      	push	{r7}
 8000588:	b083      	sub	sp, #12
 800058a:	af00      	add	r7, sp, #0
 800058c:	6078      	str	r0, [r7, #4]
{

}
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005a8:	4907      	ldr	r1, [pc, #28]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80005b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4013      	ands	r3, r2
 80005b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ba:	68fb      	ldr	r3, [r7, #12]
}
 80005bc:	bf00      	nop
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	40021000 	.word	0x40021000

080005cc <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d4:	4b08      	ldr	r3, [pc, #32]	; (80005f8 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005d8:	4907      	ldr	r1, [pc, #28]	; (80005f8 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4313      	orrs	r3, r2
 80005de:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <LL_APB1_GRP2_EnableClock+0x2c>)
 80005e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4013      	ands	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ea:	68fb      	ldr	r3, [r7, #12]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	40021000 	.word	0x40021000

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fead 	bl	800135e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f81e 	bl	8000644 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 fab6 	bl	8000b78 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800060c:	f000 fa8a 	bl	8000b24 <_ZL11MX_DMA_Initv>
  MX_LPUART1_UART_Init();
 8000610:	f000 f90e 	bl	8000830 <_ZL20MX_LPUART1_UART_Initv>
  MX_RTC_Init();
 8000614:	f000 f9ce 	bl	80009b4 <_ZL11MX_RTC_Initv>
  MX_UCPD1_Init();
 8000618:	f000 fa20 	bl	8000a5c <_ZL13MX_UCPD1_Initv>
  MX_USB_PCD_Init();
 800061c:	f000 fa54 	bl	8000ac8 <_ZL15MX_USB_PCD_Initv>
  MX_ADC1_Init();
 8000620:	f000 f880 	bl	8000724 <_ZL12MX_ADC1_Initv>
  MX_USART2_UART_Init();
 8000624:	f000 f966 	bl	80008f4 <_ZL19MX_USART2_UART_Initv>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_DMA(&huart2, NewGPS.rx_raw, 100);
 8000628:	2264      	movs	r2, #100	; 0x64
 800062a:	4904      	ldr	r1, [pc, #16]	; (800063c <main+0x40>)
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <main+0x44>)
 800062e:	f004 fd33 	bl	8005098 <HAL_UART_Receive_DMA>
	  //NewGPS.getGPS(MyGPS);
	  HAL_Delay(1000);
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f000 ff09 	bl	800144c <HAL_Delay>
	  HAL_UART_Receive_DMA(&huart2, NewGPS.rx_raw, 100);
 800063a:	e7f5      	b.n	8000628 <main+0x2c>
 800063c:	2000064c 	.word	0x2000064c
 8000640:	20000124 	.word	0x20000124

08000644 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b098      	sub	sp, #96	; 0x60
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2248      	movs	r2, #72	; 0x48
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fb34 	bl	8006cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000666:	2000      	movs	r0, #0
 8000668:	f002 fe2c 	bl	80032c4 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf14      	ite	ne
 8000672:	2301      	movne	r3, #1
 8000674:	2300      	moveq	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <_Z18SystemClock_Configv+0x3c>
  {
    Error_Handler();
 800067c:	f000 fb0e 	bl	8000c9c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f002 fe02 	bl	8003288 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <_Z18SystemClock_Configv+0xdc>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	4a25      	ldr	r2, [pc, #148]	; (8000720 <_Z18SystemClock_Configv+0xdc>)
 800068c:	f023 0318 	bic.w	r3, r3, #24
 8000690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSE
 8000694:	2334      	movs	r3, #52	; 0x34
 8000696:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000698:	2381      	movs	r3, #129	; 0x81
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006b8:	2337      	movs	r3, #55	; 0x37
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fe89 	bl	80033e4 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	bf14      	ite	ne
 80006d8:	2301      	movne	r3, #1
 80006da:	2300      	moveq	r3, #0
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80006e2:	f000 fadb 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2105      	movs	r1, #5
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fb46 	bl	8003d90 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	bf14      	ite	ne
 800070a:	2301      	movne	r3, #1
 800070c:	2300      	moveq	r3, #0
 800070e:	b2db      	uxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000714:	f000 fac2 	bl	8000c9c <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3760      	adds	r7, #96	; 0x60
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
 8000744:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000748:	4a37      	ldr	r2, [pc, #220]	; (8000828 <_ZL12MX_ADC1_Initv+0x104>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800074c:	4b35      	ldr	r3, [pc, #212]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b34      	ldr	r3, [pc, #208]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b32      	ldr	r3, [pc, #200]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b31      	ldr	r3, [pc, #196]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000766:	2204      	movs	r2, #4
 8000768:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b2e      	ldr	r3, [pc, #184]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000770:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000772:	2200      	movs	r2, #0
 8000774:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b2b      	ldr	r3, [pc, #172]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000778:	2201      	movs	r2, #1
 800077a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800077c:	4b29      	ldr	r3, [pc, #164]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000784:	4b27      	ldr	r3, [pc, #156]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b26      	ldr	r3, [pc, #152]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000790:	4b24      	ldr	r3, [pc, #144]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000792:	2200      	movs	r2, #0
 8000794:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 800079a:	2200      	movs	r2, #0
 800079c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a6:	481f      	ldr	r0, [pc, #124]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 80007a8:	f001 f814 	bl	80017d4 <HAL_ADC_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	bf14      	ite	ne
 80007b2:	2301      	movne	r3, #1
 80007b4:	2300      	moveq	r3, #0
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <_ZL12MX_ADC1_Initv+0x9c>
  {
    Error_Handler();
 80007bc:	f000 fa6e 	bl	8000c9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	4816      	ldr	r0, [pc, #88]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 80007cc:	f001 fd5e 	bl	800228c <HAL_ADCEx_MultiModeConfigChannel>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	bf14      	ite	ne
 80007d6:	2301      	movne	r3, #1
 80007d8:	2300      	moveq	r3, #0
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <_ZL12MX_ADC1_Initv+0xc0>
  {
    Error_Handler();
 80007e0:	f000 fa5c 	bl	8000c9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <_ZL12MX_ADC1_Initv+0x108>)
 80007e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e8:	2306      	movs	r3, #6
 80007ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007f0:	237f      	movs	r3, #127	; 0x7f
 80007f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f4:	2304      	movs	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <_ZL12MX_ADC1_Initv+0x100>)
 8000802:	f001 f933 	bl	8001a6c <HAL_ADC_ConfigChannel>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	bf14      	ite	ne
 800080c:	2301      	movne	r3, #1
 800080e:	2300      	moveq	r3, #0
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <_ZL12MX_ADC1_Initv+0xf6>
  {
    Error_Handler();
 8000816:	f000 fa41 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000028 	.word	0x20000028
 8000828:	42028000 	.word	0x42028000
 800082c:	0c900008 	.word	0x0c900008

08000830 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000836:	4a2d      	ldr	r2, [pc, #180]	; (80008ec <_ZL20MX_LPUART1_UART_Initv+0xbc>)
 8000838:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800083c:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <_ZL20MX_LPUART1_UART_Initv+0xc0>)
 800083e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000854:	220c      	movs	r2, #12
 8000856:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b22      	ldr	r3, [pc, #136]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086a:	4b1f      	ldr	r3, [pc, #124]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000872:	2200      	movs	r2, #0
 8000874:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000876:	481c      	ldr	r0, [pc, #112]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000878:	f004 fbbe 	bl	8004ff8 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <_ZL20MX_LPUART1_UART_Initv+0x60>
  {
    Error_Handler();
 800088c:	f000 fa06 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	4815      	ldr	r0, [pc, #84]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8000894:	f005 ff32 	bl	80066fc <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	bf14      	ite	ne
 800089e:	2301      	movne	r3, #1
 80008a0:	2300      	moveq	r3, #0
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <_ZL20MX_LPUART1_UART_Initv+0x7c>
  {
    Error_Handler();
 80008a8:	f000 f9f8 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008b0:	f005 ff62 	bl	8006778 <HAL_UARTEx_SetRxFifoThreshold>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	bf14      	ite	ne
 80008ba:	2301      	movne	r3, #1
 80008bc:	2300      	moveq	r3, #0
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <_ZL20MX_LPUART1_UART_Initv+0x98>
  {
    Error_Handler();
 80008c4:	f000 f9ea 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008c8:	4807      	ldr	r0, [pc, #28]	; (80008e8 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80008ca:	f005 fede 	bl	800668a <HAL_UARTEx_DisableFifoMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	bf14      	ite	ne
 80008d4:	2301      	movne	r3, #1
 80008d6:	2300      	moveq	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <_ZL20MX_LPUART1_UART_Initv+0xb2>
  {
    Error_Handler();
 80008de:	f000 f9dd 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000090 	.word	0x20000090
 80008ec:	40008000 	.word	0x40008000
 80008f0:	00033324 	.word	0x00033324

080008f4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b2c      	ldr	r3, [pc, #176]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 80008fa:	4a2d      	ldr	r2, [pc, #180]	; (80009b0 <_ZL19MX_USART2_UART_Initv+0xbc>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80008fe:	4b2b      	ldr	r3, [pc, #172]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000900:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b29      	ldr	r3, [pc, #164]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b27      	ldr	r3, [pc, #156]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b26      	ldr	r3, [pc, #152]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b23      	ldr	r3, [pc, #140]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b21      	ldr	r3, [pc, #132]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b20      	ldr	r3, [pc, #128]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000930:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000936:	4b1d      	ldr	r3, [pc, #116]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093c:	481b      	ldr	r0, [pc, #108]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800093e:	f004 fb5b 	bl	8004ff8 <HAL_UART_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8000952:	f000 f9a3 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4814      	ldr	r0, [pc, #80]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 800095a:	f005 fecf 	bl	80066fc <HAL_UARTEx_SetTxFifoThreshold>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	bf14      	ite	ne
 8000964:	2301      	movne	r3, #1
 8000966:	2300      	moveq	r3, #0
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <_ZL19MX_USART2_UART_Initv+0x7e>
  {
    Error_Handler();
 800096e:	f000 f995 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000972:	2100      	movs	r1, #0
 8000974:	480d      	ldr	r0, [pc, #52]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000976:	f005 feff 	bl	8006778 <HAL_UARTEx_SetRxFifoThreshold>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	bf14      	ite	ne
 8000980:	2301      	movne	r3, #1
 8000982:	2300      	moveq	r3, #0
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <_ZL19MX_USART2_UART_Initv+0x9a>
  {
    Error_Handler();
 800098a:	f000 f987 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000990:	f005 fe7b 	bl	800668a <HAL_UARTEx_DisableFifoMode>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	bf14      	ite	ne
 800099a:	2301      	movne	r3, #1
 800099c:	2300      	moveq	r3, #0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <_ZL19MX_USART2_UART_Initv+0xb4>
  {
    Error_Handler();
 80009a4:	f000 f97a 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000124 	.word	0x20000124
 80009b0:	40004400 	.word	0x40004400

080009b4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009ca:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009cc:	4a22      	ldr	r2, [pc, #136]	; (8000a58 <_ZL11MX_RTC_Initv+0xa4>)
 80009ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009d0:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009d6:	4b1f      	ldr	r3, [pc, #124]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009d8:	227f      	movs	r2, #127	; 0x7f
 80009da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009dc:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009de:	22ff      	movs	r2, #255	; 0xff
 80009e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009ee:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009f4:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a02:	4814      	ldr	r0, [pc, #80]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 8000a04:	f004 f9be 	bl	8004d84 <HAL_RTC_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL11MX_RTC_Initv+0x68>
  {
    Error_Handler();
 8000a18:	f000 f940 	bl	8000c9c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4808      	ldr	r0, [pc, #32]	; (8000a54 <_ZL11MX_RTC_Initv+0xa0>)
 8000a32:	f004 fab5 	bl	8004fa0 <HAL_RTCEx_PrivilegeModeSet>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	bf14      	ite	ne
 8000a3c:	2301      	movne	r3, #1
 8000a3e:	2300      	moveq	r3, #0
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <_ZL11MX_RTC_Initv+0x96>
  {
    Error_Handler();
 8000a46:	f000 f929 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3718      	adds	r7, #24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000220 	.word	0x20000220
 8000a58:	40002800 	.word	0x40002800

08000a5c <_ZL13MX_UCPD1_Initv>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a72:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a76:	f7ff fda9 	bl	80005cc <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fd8e 	bl	800059c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fd8b 	bl	800059c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA15 (JTDI)   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <_ZL13MX_UCPD1_Initv+0x64>)
 8000a9a:	f006 f844 	bl	8006b26 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000aa2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <_ZL13MX_UCPD1_Initv+0x68>)
 8000ab2:	f006 f838 	bl	8006b26 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3718      	adds	r7, #24
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	42020400 	.word	0x42020400
 8000ac4:	42020000 	.word	0x42020000

08000ac8 <_ZL15MX_USB_PCD_Initv>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ace:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <_ZL15MX_USB_PCD_Initv+0x58>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ad8:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ade:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <_ZL15MX_USB_PCD_Initv+0x54>)
 8000afe:	f002 fabf 	bl	8003080 <HAL_PCD_Init>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <_ZL15MX_USB_PCD_Initv+0x4e>
  {
    Error_Handler();
 8000b12:	f000 f8c3 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000248 	.word	0x20000248
 8000b20:	4000d400 	.word	0x4000d400

08000b24 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b2a:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <_ZL11MX_DMA_Initv+0x50>)
 8000b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2e:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <_ZL11MX_DMA_Initv+0x50>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	6493      	str	r3, [r2, #72]	; 0x48
 8000b36:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <_ZL11MX_DMA_Initv+0x50>)
 8000b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <_ZL11MX_DMA_Initv+0x50>)
 8000b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <_ZL11MX_DMA_Initv+0x50>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6493      	str	r3, [r2, #72]	; 0x48
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <_ZL11MX_DMA_Initv+0x50>)
 8000b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	201d      	movs	r0, #29
 8000b60:	f001 fd13 	bl	800258a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b64:	201d      	movs	r0, #29
 8000b66:	f001 fd2a 	bl	80025be <HAL_NVIC_EnableIRQ>

}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40021000 	.word	0x40021000

08000b78 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b92:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b39      	ldr	r3, [pc, #228]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000baa:	4a38      	ldr	r2, [pc, #224]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b33      	ldr	r3, [pc, #204]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a32      	ldr	r2, [pc, #200]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bda:	4a2c      	ldr	r2, [pc, #176]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <_ZL12MX_GPIO_Initv+0x114>)
 8000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000bee:	f002 fbc5 	bl	800337c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2180      	movs	r1, #128	; 0x80
 8000bf6:	4826      	ldr	r0, [pc, #152]	; (8000c90 <_ZL12MX_GPIO_Initv+0x118>)
 8000bf8:	f002 fa2a 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c02:	4824      	ldr	r0, [pc, #144]	; (8000c94 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c04:	f002 fa24 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	21a0      	movs	r1, #160	; 0xa0
 8000c0c:	4822      	ldr	r0, [pc, #136]	; (8000c98 <_ZL12MX_GPIO_Initv+0x120>)
 8000c0e:	f002 fa1f 	bl	8003050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	481b      	ldr	r0, [pc, #108]	; (8000c98 <_ZL12MX_GPIO_Initv+0x120>)
 8000c2a:	f002 f891 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c2e:	2380      	movs	r3, #128	; 0x80
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4812      	ldr	r0, [pc, #72]	; (8000c90 <_ZL12MX_GPIO_Initv+0x118>)
 8000c46:	f002 f883 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8000c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <_ZL12MX_GPIO_Initv+0x11c>)
 8000c64:	f002 f874 	bl	8002d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = UCPD_DBN_Pin|LED_BLUE_Pin;
 8000c68:	23a0      	movs	r3, #160	; 0xa0
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <_ZL12MX_GPIO_Initv+0x120>)
 8000c80:	f002 f866 	bl	8002d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	42020800 	.word	0x42020800
 8000c94:	42020000 	.word	0x42020000
 8000c98:	42020400 	.word	0x42020400

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>
	...

08000ca8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d108      	bne.n	8000cca <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d103      	bne.n	8000cca <_Z41__static_initialization_and_destruction_0ii+0x22>
NEO_GPS NewGPS(&huart2);
 8000cc2:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000cc4:	4809      	ldr	r0, [pc, #36]	; (8000cec <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000cc6:	f7ff fc45 	bl	8000554 <_ZN7NEO_GPSC1EP20__UART_HandleTypeDef>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d107      	bne.n	8000ce0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d102      	bne.n	8000ce0 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8000cdc:	f7ff fc53 	bl	8000586 <_ZN7NEO_GPSD1Ev>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000124 	.word	0x20000124
 8000cec:	2000053c 	.word	0x2000053c

08000cf0 <_GLOBAL__sub_I_hadc1>:
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ffd5 	bl	8000ca8 <_Z41__static_initialization_and_destruction_0ii>
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_GLOBAL__sub_D_hadc1>:
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff ffcd 	bl	8000ca8 <_Z41__static_initialization_and_destruction_0ii>
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	; 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0ae      	sub	sp, #184	; 0xb8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2294      	movs	r2, #148	; 0x94
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f005 ffa1 	bl	8006cc0 <memset>
  if(hadc->Instance==ADC1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1f      	ldr	r2, [pc, #124]	; (8000e00 <HAL_ADC_MspInit+0xa8>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d137      	bne.n	8000df8 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d8c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000d8e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000d92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d96:	f107 0310 	add.w	r3, r7, #16
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f003 fadc 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000da6:	f7ff ff79 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000daa:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_ADC_MspInit+0xac>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <HAL_ADC_MspInit+0xac>)
 8000db0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <HAL_ADC_MspInit+0xac>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc2:	4b10      	ldr	r3, [pc, #64]	; (8000e04 <HAL_ADC_MspInit+0xac>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <HAL_ADC_MspInit+0xac>)
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <HAL_ADC_MspInit+0xac>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <HAL_ADC_MspInit+0xb0>)
 8000df4:	f001 ffac 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	37b8      	adds	r7, #184	; 0xb8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	42028000 	.word	0x42028000
 8000e04:	40021000 	.word	0x40021000
 8000e08:	42020800 	.word	0x42020800

08000e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b0b0      	sub	sp, #192	; 0xc0
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e24:	f107 0318 	add.w	r3, r7, #24
 8000e28:	2294      	movs	r2, #148	; 0x94
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 ff47 	bl	8006cc0 <memset>
  if(huart->Instance==LPUART1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a60      	ldr	r2, [pc, #384]	; (8000fb8 <HAL_UART_MspInit+0x1ac>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d13e      	bne.n	8000eba <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fa85 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e54:	f7ff ff22 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e58:	4b58      	ldr	r3, [pc, #352]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e5c:	4a57      	ldr	r2, [pc, #348]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e64:	4b55      	ldr	r3, [pc, #340]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e70:	4b52      	ldr	r3, [pc, #328]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e74:	4a51      	ldr	r2, [pc, #324]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000e76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7c:	4b4f      	ldr	r3, [pc, #316]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000e88:	f002 fa78 	bl	800337c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000e8c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ea6:	2308      	movs	r3, #8
 8000ea8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000eac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4843      	ldr	r0, [pc, #268]	; (8000fc0 <HAL_UART_MspInit+0x1b4>)
 8000eb4:	f001 ff4c 	bl	8002d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb8:	e07a      	b.n	8000fb0 <HAL_UART_MspInit+0x1a4>
  else if(huart->Instance==USART2)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a41      	ldr	r2, [pc, #260]	; (8000fc4 <HAL_UART_MspInit+0x1b8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d175      	bne.n	8000fb0 <HAL_UART_MspInit+0x1a4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ecc:	f107 0318 	add.w	r3, r7, #24
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fa41 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8000edc:	f7ff fede 	bl	8000c9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee0:	4b36      	ldr	r3, [pc, #216]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee4:	4a35      	ldr	r2, [pc, #212]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eea:	6593      	str	r3, [r2, #88]	; 0x58
 8000eec:	4b33      	ldr	r3, [pc, #204]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef8:	4b30      	ldr	r3, [pc, #192]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efc:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000efe:	f043 0301 	orr.w	r3, r3, #1
 8000f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <HAL_UART_MspInit+0x1b0>)
 8000f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f10:	230c      	movs	r3, #12
 8000f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	2302      	movs	r3, #2
 8000f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f32:	4619      	mov	r1, r3
 8000f34:	4824      	ldr	r0, [pc, #144]	; (8000fc8 <HAL_UART_MspInit+0x1bc>)
 8000f36:	f001 ff0b 	bl	8002d50 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8000f3a:	4b24      	ldr	r3, [pc, #144]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f3c:	4a24      	ldr	r2, [pc, #144]	; (8000fd0 <HAL_UART_MspInit+0x1c4>)
 8000f3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8000f40:	4b22      	ldr	r3, [pc, #136]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f42:	221b      	movs	r2, #27
 8000f44:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4c:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f52:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f58:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f66:	2220      	movs	r2, #32
 8000f68:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6a:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f70:	4816      	ldr	r0, [pc, #88]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f72:	f001 fb3f 	bl	80025f4 <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_UART_MspInit+0x174>
      Error_Handler();
 8000f7c:	f7ff fe8e 	bl	8000c9c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000f80:	2110      	movs	r1, #16
 8000f82:	4812      	ldr	r0, [pc, #72]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f84:	f001 fe14 	bl	8002bb0 <HAL_DMA_ConfigChannelAttributes>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <HAL_UART_MspInit+0x186>
      Error_Handler();
 8000f8e:	f7ff fe85 	bl	8000c9c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f9a:	4a0c      	ldr	r2, [pc, #48]	; (8000fcc <HAL_UART_MspInit+0x1c0>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	203e      	movs	r0, #62	; 0x3e
 8000fa6:	f001 faf0 	bl	800258a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000faa:	203e      	movs	r0, #62	; 0x3e
 8000fac:	f001 fb07 	bl	80025be <HAL_NVIC_EnableIRQ>
}
 8000fb0:	bf00      	nop
 8000fb2:	37c0      	adds	r7, #192	; 0xc0
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40008000 	.word	0x40008000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42021800 	.word	0x42021800
 8000fc4:	40004400 	.word	0x40004400
 8000fc8:	42020000 	.word	0x42020000
 8000fcc:	200001b8 	.word	0x200001b8
 8000fd0:	40020008 	.word	0x40020008

08000fd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b0a8      	sub	sp, #160	; 0xa0
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	2294      	movs	r2, #148	; 0x94
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f005 fe6b 	bl	8006cc0 <memset>
  if(hrtc->Instance==RTC)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a16      	ldr	r2, [pc, #88]	; (8001048 <HAL_RTC_MspInit+0x74>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d124      	bne.n	800103e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ff8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4618      	mov	r0, r3
 8001008:	f003 f9a6 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001012:	f7ff fe43 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <HAL_RTC_MspInit+0x78>)
 8001018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <HAL_RTC_MspInit+0x78>)
 800101e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_RTC_MspInit+0x78>)
 8001028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_RTC_MspInit+0x78>)
 800102c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001030:	6593      	str	r3, [r2, #88]	; 0x58
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_RTC_MspInit+0x78>)
 8001034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800103e:	bf00      	nop
 8001040:	37a0      	adds	r7, #160	; 0xa0
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40002800 	.word	0x40002800
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0ae      	sub	sp, #184	; 0xb8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	2294      	movs	r2, #148	; 0x94
 800106e:	2100      	movs	r1, #0
 8001070:	4618      	mov	r0, r3
 8001072:	f005 fe25 	bl	8006cc0 <memset>
  if(hpcd->Instance==USB)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_PCD_MspInit+0xb4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d13d      	bne.n	80010fc <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001080:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001084:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	4618      	mov	r0, r3
 8001092:	f003 f961 	bl	8004358 <HAL_RCCEx_PeriphCLKConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800109c:	f7ff fdfe 	bl	8000c9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_PCD_MspInit+0xb8>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_PCD_MspInit+0xb8>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ac:	4b16      	ldr	r3, [pc, #88]	; (8001108 <HAL_PCD_MspInit+0xb8>)
 80010ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80010d2:	230a      	movs	r3, #10
 80010d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010dc:	4619      	mov	r1, r3
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <HAL_PCD_MspInit+0xbc>)
 80010e0:	f001 fe36 	bl	8002d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_PCD_MspInit+0xb8>)
 80010e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_PCD_MspInit+0xb8>)
 80010ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_PCD_MspInit+0xb8>)
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f8:	60bb      	str	r3, [r7, #8]
 80010fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80010fc:	bf00      	nop
 80010fe:	37b8      	adds	r7, #184	; 0xb8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	4000d400 	.word	0x4000d400
 8001108:	40021000 	.word	0x40021000
 800110c:	42020000 	.word	0x42020000

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f956 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DMA1_Channel1_IRQHandler+0x10>)
 800116a:	f001 fc21 	bl	80029b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001b8 	.word	0x200001b8

08001178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <USART2_IRQHandler+0x10>)
 800117e:	f003 ffd7 	bl	8005130 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000124 	.word	0x20000124

0800118c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <SystemInit+0x20>)
 8001192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <SystemInit+0x20>)
 8001198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800119c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 80011b6:	4b4f      	ldr	r3, [pc, #316]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 80011c2:	4b4c      	ldr	r3, [pc, #304]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 80011c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e005      	b.n	80011de <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 80011d2:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	091b      	lsrs	r3, r3, #4
 80011d8:	f003 030f 	and.w	r3, r3, #15
 80011dc:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 80011de:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <SystemCoreClockUpdate+0x148>)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b0c      	cmp	r3, #12
 80011f2:	d866      	bhi.n	80012c2 <SystemCoreClockUpdate+0x112>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <SystemCoreClockUpdate+0x4c>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	08001231 	.word	0x08001231
 8001200:	080012c3 	.word	0x080012c3
 8001204:	080012c3 	.word	0x080012c3
 8001208:	080012c3 	.word	0x080012c3
 800120c:	08001239 	.word	0x08001239
 8001210:	080012c3 	.word	0x080012c3
 8001214:	080012c3 	.word	0x080012c3
 8001218:	080012c3 	.word	0x080012c3
 800121c:	08001241 	.word	0x08001241
 8001220:	080012c3 	.word	0x080012c3
 8001224:	080012c3 	.word	0x080012c3
 8001228:	080012c3 	.word	0x080012c3
 800122c:	08001249 	.word	0x08001249
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001230:	4a32      	ldr	r2, [pc, #200]	; (80012fc <SystemCoreClockUpdate+0x14c>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	6013      	str	r3, [r2, #0]
      break;
 8001236:	e048      	b.n	80012ca <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001238:	4b30      	ldr	r3, [pc, #192]	; (80012fc <SystemCoreClockUpdate+0x14c>)
 800123a:	4a31      	ldr	r2, [pc, #196]	; (8001300 <SystemCoreClockUpdate+0x150>)
 800123c:	601a      	str	r2, [r3, #0]
      break;
 800123e:	e044      	b.n	80012ca <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <SystemCoreClockUpdate+0x14c>)
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <SystemCoreClockUpdate+0x154>)
 8001244:	601a      	str	r2, [r3, #0]
      break;
 8001246:	e040      	b.n	80012ca <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001248:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	3301      	adds	r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d003      	beq.n	800126e <SystemCoreClockUpdate+0xbe>
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d006      	beq.n	800127a <SystemCoreClockUpdate+0xca>
 800126c:	e00b      	b.n	8001286 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800126e:	4a24      	ldr	r2, [pc, #144]	; (8001300 <SystemCoreClockUpdate+0x150>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	613b      	str	r3, [r7, #16]
          break;
 8001278:	e00b      	b.n	8001292 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800127a:	4a22      	ldr	r2, [pc, #136]	; (8001304 <SystemCoreClockUpdate+0x154>)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	613b      	str	r3, [r7, #16]
          break;
 8001284:	e005      	b.n	8001292 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	613b      	str	r3, [r7, #16]
          break;
 8001290:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	0e5b      	lsrs	r3, r3, #25
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	3301      	adds	r3, #1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80012bc:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <SystemCoreClockUpdate+0x14c>)
 80012be:	6013      	str	r3, [r2, #0]
      break;
 80012c0:	e003      	b.n	80012ca <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <SystemCoreClockUpdate+0x14c>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	6013      	str	r3, [r2, #0]
      break;
 80012c8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <SystemCoreClockUpdate+0x144>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	f003 030f 	and.w	r3, r3, #15
 80012d4:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <SystemCoreClockUpdate+0x158>)
 80012d6:	5cd3      	ldrb	r3, [r2, r3]
 80012d8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <SystemCoreClockUpdate+0x14c>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	fa22 f303 	lsr.w	r3, r2, r3
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemCoreClockUpdate+0x14c>)
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	371c      	adds	r7, #28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	40021000 	.word	0x40021000
 80012f8:	08006d00 	.word	0x08006d00
 80012fc:	20000000 	.word	0x20000000
 8001300:	00f42400 	.word	0x00f42400
 8001304:	007a1200 	.word	0x007a1200
 8001308:	08006ce8 	.word	0x08006ce8

0800130c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001310:	f7ff ff3c 	bl	800118c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001314:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001316:	e003      	b.n	8001320 <LoopCopyDataInit>

08001318 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800131a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800131c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800131e:	3104      	adds	r1, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001324:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001326:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001328:	d3f6      	bcc.n	8001318 <CopyDataInit>
	ldr	r2, =_sbss
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <LoopForever+0x12>)
	b	LoopFillZerobss
 800132c:	e002      	b.n	8001334 <LoopFillZerobss>

0800132e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800132e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001330:	f842 3b04 	str.w	r3, [r2], #4

08001334 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <LoopForever+0x16>)
	cmp	r2, r3
 8001336:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001338:	d3f9      	bcc.n	800132e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800133a:	f005 fc9d 	bl	8006c78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800133e:	f7ff f95d 	bl	80005fc <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001344:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001348:	08006d80 	.word	0x08006d80
	ldr	r0, =_sdata
 800134c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001350:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001354:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001358:	20000a38 	.word	0x20000a38

0800135c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_2_IRQHandler>

0800135e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001368:	2004      	movs	r0, #4
 800136a:	f001 f903 	bl	8002574 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800136e:	f7ff ff1f 	bl	80011b0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001372:	2000      	movs	r0, #0
 8001374:	f000 f80e 	bl	8001394 <HAL_InitTick>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	e001      	b.n	8001388 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001384:	f7ff fcc4 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001388:	79fb      	ldrb	r3, [r7, #7]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_InitTick+0x6c>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d023      	beq.n	80013f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <HAL_InitTick+0x70>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_InitTick+0x6c>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f001 f90b 	bl	80025da <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10f      	bne.n	80013ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	d809      	bhi.n	80013e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d0:	2200      	movs	r2, #0
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f001 f8d7 	bl	800258a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_InitTick+0x74>)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e007      	b.n	80013f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e004      	b.n	80013f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e001      	b.n	80013f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	20000000 	.word	0x20000000
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008
 8001430:	20000a34 	.word	0x20000a34

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000a34 	.word	0x20000a34

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffee 	bl	8001434 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffde 	bl	8001434 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008

08001494 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	609a      	str	r2, [r3, #8]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	431a      	orrs	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	609a      	str	r2, [r3, #8]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
 8001508:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3360      	adds	r3, #96	; 0x60
 800150e:	461a      	mov	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <LL_ADC_SetOffset+0x44>)
 800151e:	4013      	ands	r3, r2
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	4313      	orrs	r3, r2
 800152c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001534:	bf00      	nop
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	03fff000 	.word	0x03fff000

08001544 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3360      	adds	r3, #96	; 0x60
 8001552:	461a      	mov	r2, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001564:	4618      	mov	r0, r3
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	3360      	adds	r3, #96	; 0x60
 8001580:	461a      	mov	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800159a:	bf00      	nop
 800159c:	371c      	adds	r7, #28
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	431a      	orrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	615a      	str	r2, [r3, #20]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3330      	adds	r3, #48	; 0x30
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	4413      	add	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	211f      	movs	r1, #31
 80015f8:	fa01 f303 	lsl.w	r3, r1, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0e9b      	lsrs	r3, r3, #26
 8001604:	f003 011f 	and.w	r1, r3, #31
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3314      	adds	r3, #20
 8001634:	461a      	mov	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	0e5b      	lsrs	r3, r3, #25
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	0d1b      	lsrs	r3, r3, #20
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	2107      	movs	r1, #7
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	401a      	ands	r2, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	0d1b      	lsrs	r3, r3, #20
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800166e:	bf00      	nop
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0318 	and.w	r3, r3, #24
 800169e:	4908      	ldr	r1, [pc, #32]	; (80016c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016a0:	40d9      	lsrs	r1, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	400b      	ands	r3, r1
 80016a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016aa:	431a      	orrs	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	0007ffff 	.word	0x0007ffff

080016c4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80016d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6093      	str	r3, [r2, #8]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016fc:	d101      	bne.n	8001702 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001720:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001724:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800174c:	d101      	bne.n	8001752 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b01      	cmp	r3, #1
 8001772:	d101      	bne.n	8001778 <LL_ADC_IsEnabled+0x18>
 8001774:	2301      	movs	r3, #1
 8001776:	e000      	b.n	800177a <LL_ADC_IsEnabled+0x1a>
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b04      	cmp	r3, #4
 8001798:	d101      	bne.n	800179e <LL_ADC_REG_IsConversionOngoing+0x18>
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d101      	bne.n	80017c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b590      	push	{r4, r7, lr}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e12e      	b.n	8001a4c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d109      	bne.n	8001810 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff faab 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2200      	movs	r2, #0
 8001806:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff67 	bl	80016e8 <LL_ADC_IsDeepPowerDownEnabled>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d004      	beq.n	800182a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff ff4d 	bl	80016c4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff82 	bl	8001738 <LL_ADC_IsInternalRegulatorEnabled>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d115      	bne.n	8001866 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff66 	bl	8001710 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001844:	4b83      	ldr	r3, [pc, #524]	; (8001a54 <HAL_ADC_Init+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	099b      	lsrs	r3, r3, #6
 800184a:	4a83      	ldr	r2, [pc, #524]	; (8001a58 <HAL_ADC_Init+0x284>)
 800184c:	fba2 2303 	umull	r2, r3, r2, r3
 8001850:	099b      	lsrs	r3, r3, #6
 8001852:	3301      	adds	r3, #1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001858:	e002      	b.n	8001860 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	3b01      	subs	r3, #1
 800185e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f9      	bne.n	800185a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff64 	bl	8001738 <LL_ADC_IsInternalRegulatorEnabled>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10d      	bne.n	8001892 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187a:	f043 0210 	orr.w	r2, r3, #16
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001886:	f043 0201 	orr.w	r2, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff75 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 800189c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f003 0310 	and.w	r3, r3, #16
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f040 80c7 	bne.w	8001a3a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f040 80c3 	bne.w	8001a3a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80018bc:	f043 0202 	orr.w	r2, r3, #2
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff49 	bl	8001760 <LL_ADC_IsEnabled>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d110      	bne.n	80018f6 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018d4:	4861      	ldr	r0, [pc, #388]	; (8001a5c <HAL_ADC_Init+0x288>)
 80018d6:	f7ff ff43 	bl	8001760 <LL_ADC_IsEnabled>
 80018da:	4604      	mov	r4, r0
 80018dc:	4860      	ldr	r0, [pc, #384]	; (8001a60 <HAL_ADC_Init+0x28c>)
 80018de:	f7ff ff3f 	bl	8001760 <LL_ADC_IsEnabled>
 80018e2:	4603      	mov	r3, r0
 80018e4:	4323      	orrs	r3, r4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d105      	bne.n	80018f6 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	4619      	mov	r1, r3
 80018f0:	485c      	ldr	r0, [pc, #368]	; (8001a64 <HAL_ADC_Init+0x290>)
 80018f2:	f7ff fdcf 	bl	8001494 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7e5b      	ldrb	r3, [r3, #25]
 80018fa:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001900:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001906:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800190c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001914:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d106      	bne.n	8001932 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	3b01      	subs	r3, #1
 800192a:	045b      	lsls	r3, r3, #17
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_ADC_Init+0x294>)
 8001956:	4013      	ands	r3, r2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	69b9      	ldr	r1, [r7, #24]
 800195e:	430b      	orrs	r3, r1
 8001960:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff20 	bl	80017ac <LL_ADC_INJ_IsConversionOngoing>
 800196c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d140      	bne.n	80019f6 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d13d      	bne.n	80019f6 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	7e1b      	ldrb	r3, [r3, #24]
 8001982:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001984:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800198c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800199c:	f023 0306 	bic.w	r3, r3, #6
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	69b9      	ldr	r1, [r7, #24]
 80019a6:	430b      	orrs	r3, r1
 80019a8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d118      	bne.n	80019e6 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019be:	f023 0304 	bic.w	r3, r3, #4
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019d6:	430a      	orrs	r2, r1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	e007      	b.n	80019f6 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d10c      	bne.n	8001a18 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f023 010f 	bic.w	r1, r3, #15
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	1e5a      	subs	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
 8001a16:	e007      	b.n	8001a28 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 020f 	bic.w	r2, r2, #15
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f023 0303 	bic.w	r3, r3, #3
 8001a30:	f043 0201 	orr.w	r2, r3, #1
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	659a      	str	r2, [r3, #88]	; 0x58
 8001a38:	e007      	b.n	8001a4a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3724      	adds	r7, #36	; 0x24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	053e2d63 	.word	0x053e2d63
 8001a5c:	42028000 	.word	0x42028000
 8001a60:	42028100 	.word	0x42028100
 8001a64:	42028300 	.word	0x42028300
 8001a68:	fff0c007 	.word	0xfff0c007

08001a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b0b7      	sub	sp, #220	; 0xdc
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x22>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e3c1      	b.n	8002212 <HAL_ADC_ConfigChannel+0x7a6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fe73 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 83a6 	bne.w	80021f4 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6818      	ldr	r0, [r3, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	f7ff fd89 	bl	80015cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe61 	bl	8001786 <LL_ADC_REG_IsConversionOngoing>
 8001ac4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fe6d 	bl	80017ac <LL_ADC_INJ_IsConversionOngoing>
 8001ad2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ad6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f040 81c1 	bne.w	8001e62 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	f040 81bc 	bne.w	8001e62 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001af2:	d10f      	bne.n	8001b14 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fd90 	bl	8001624 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fd4a 	bl	80015a6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b12:	e00e      	b.n	8001b32 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6819      	ldr	r1, [r3, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	461a      	mov	r2, r3
 8001b22:	f7ff fd7f 	bl	8001624 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fd3a 	bl	80015a6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	08db      	lsrs	r3, r3, #3
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d00a      	beq.n	8001b6a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6919      	ldr	r1, [r3, #16]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b64:	f7ff fcca 	bl	80014fc <LL_ADC_SetOffset>
 8001b68:	e17b      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fce7 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <HAL_ADC_ConfigChannel+0x12a>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fcdc 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	0e9b      	lsrs	r3, r3, #26
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	e01e      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x168>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fcd1 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001bbc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	e004      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001bc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bcc:	fab3 f383 	clz	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x180>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	0e9b      	lsrs	r3, r3, #26
 8001be6:	f003 031f 	and.w	r3, r3, #31
 8001bea:	e018      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x1b2>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001c10:	2320      	movs	r3, #32
 8001c12:	e004      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001c14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d106      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fca0 	bl	8001570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2101      	movs	r1, #1
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fc84 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10a      	bne.n	8001c5c <HAL_ADC_ConfigChannel+0x1f0>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fc79 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	0e9b      	lsrs	r3, r3, #26
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	e01e      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x22e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2101      	movs	r1, #1
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fc6e 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001c7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001c8a:	2320      	movs	r3, #32
 8001c8c:	e004      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d105      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x246>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	e018      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x278>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001cc6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e004      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cde:	fab3 f383 	clz	r3, r3
 8001ce2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2200      	movs	r2, #0
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fc3d 	bl	8001570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2102      	movs	r1, #2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fc21 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d10a      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x2b6>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2102      	movs	r1, #2
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff fc16 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	0e9b      	lsrs	r3, r3, #26
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	e01e      	b.n	8001d60 <HAL_ADC_ConfigChannel+0x2f4>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2102      	movs	r1, #2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fc0b 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001d50:	2320      	movs	r3, #32
 8001d52:	e004      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001d54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d105      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x30c>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	f003 031f 	and.w	r3, r3, #31
 8001d76:	e016      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x33a>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d84:	fa93 f3a3 	rbit	r3, r3
 8001d88:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001d8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	e004      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d106      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	2102      	movs	r1, #2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fbdc 	bl	8001570 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fbc0 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d10a      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x378>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2103      	movs	r1, #3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fbb5 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	f003 021f 	and.w	r2, r3, #31
 8001de2:	e017      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x3a8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2103      	movs	r1, #3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff fbaa 	bl	8001544 <LL_ADC_GetOffsetChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001df6:	fa93 f3a3 	rbit	r3, r3
 8001dfa:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dfe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001e06:	2320      	movs	r3, #32
 8001e08:	e003      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x3c0>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	0e9b      	lsrs	r3, r3, #26
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	e011      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x3e4>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001e44:	2320      	movs	r3, #32
 8001e46:	e003      	b.n	8001e50 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d106      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2103      	movs	r1, #3
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fb87 	bl	8001570 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fc7a 	bl	8001760 <LL_ADC_IsEnabled>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 81c9 	bne.w	8002206 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6819      	ldr	r1, [r3, #0]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f7ff fbfb 	bl	800167c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	4a8f      	ldr	r2, [pc, #572]	; (80020c8 <HAL_ADC_ConfigChannel+0x65c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	f040 8131 	bne.w	80020f4 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10b      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x44e>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	2b09      	cmp	r3, #9
 8001eb0:	bf94      	ite	ls
 8001eb2:	2301      	movls	r3, #1
 8001eb4:	2300      	movhi	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	e019      	b.n	8001eee <HAL_ADC_ConfigChannel+0x482>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001ec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001eca:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2b09      	cmp	r3, #9
 8001ee6:	bf94      	ite	ls
 8001ee8:	2301      	movls	r3, #1
 8001eea:	2300      	movhi	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d079      	beq.n	8001fe6 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d107      	bne.n	8001f0e <HAL_ADC_ConfigChannel+0x4a2>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	0e9b      	lsrs	r3, r3, #26
 8001f04:	3301      	adds	r3, #1
 8001f06:	069b      	lsls	r3, r3, #26
 8001f08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f0c:	e015      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x4ce>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f16:	fa93 f3a3 	rbit	r3, r3
 8001f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f1e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001f26:	2320      	movs	r3, #32
 8001f28:	e003      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001f2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	3301      	adds	r3, #1
 8001f34:	069b      	lsls	r3, r3, #26
 8001f36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d109      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x4ee>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	e017      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x51e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001f72:	2320      	movs	r3, #32
 8001f74:	e003      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f78:	fab3 f383 	clz	r3, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3301      	adds	r3, #1
 8001f80:	f003 031f 	and.w	r3, r3, #31
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8a:	ea42 0103 	orr.w	r1, r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10a      	bne.n	8001fb0 <HAL_ADC_ConfigChannel+0x544>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0e9b      	lsrs	r3, r3, #26
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	f003 021f 	and.w	r2, r3, #31
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	051b      	lsls	r3, r3, #20
 8001fae:	e018      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0x576>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fb8:	fa93 f3a3 	rbit	r3, r3
 8001fbc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d101      	bne.n	8001fcc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001fc8:	2320      	movs	r3, #32
 8001fca:	e003      	b.n	8001fd4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fce:	fab3 f383 	clz	r3, r3
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f003 021f 	and.w	r2, r3, #31
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fe2:	430b      	orrs	r3, r1
 8001fe4:	e081      	b.n	80020ea <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d107      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x596>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	069b      	lsls	r3, r3, #26
 8001ffc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002000:	e015      	b.n	800202e <HAL_ADC_ConfigChannel+0x5c2>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800201a:	2320      	movs	r3, #32
 800201c:	e003      	b.n	8002026 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	fab3 f383 	clz	r3, r3
 8002024:	b2db      	uxtb	r3, r3
 8002026:	3301      	adds	r3, #1
 8002028:	069b      	lsls	r3, r3, #26
 800202a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_ADC_ConfigChannel+0x5e2>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	3301      	adds	r3, #1
 8002042:	f003 031f 	and.w	r3, r3, #31
 8002046:	2101      	movs	r1, #1
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	e017      	b.n	800207e <HAL_ADC_ConfigChannel+0x612>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	61fb      	str	r3, [r7, #28]
  return result;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8002066:	2320      	movs	r3, #32
 8002068:	e003      	b.n	8002072 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	fab3 f383 	clz	r3, r3
 8002070:	b2db      	uxtb	r3, r3
 8002072:	3301      	adds	r3, #1
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2101      	movs	r1, #1
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	ea42 0103 	orr.w	r1, r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10d      	bne.n	80020aa <HAL_ADC_ConfigChannel+0x63e>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	0e9b      	lsrs	r3, r3, #26
 8002094:	3301      	adds	r3, #1
 8002096:	f003 021f 	and.w	r2, r3, #31
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	3b1e      	subs	r3, #30
 80020a2:	051b      	lsls	r3, r3, #20
 80020a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020a8:	e01e      	b.n	80020e8 <HAL_ADC_ConfigChannel+0x67c>
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	613b      	str	r3, [r7, #16]
  return result;
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 80020c2:	2320      	movs	r3, #32
 80020c4:	e006      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x668>
 80020c6:	bf00      	nop
 80020c8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	3301      	adds	r3, #1
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	4613      	mov	r3, r2
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	4413      	add	r3, r2
 80020e0:	3b1e      	subs	r3, #30
 80020e2:	051b      	lsls	r3, r3, #20
 80020e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e8:	430b      	orrs	r3, r1
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	6892      	ldr	r2, [r2, #8]
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7ff fa98 	bl	8001624 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8082 	beq.w	8002206 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002102:	4847      	ldr	r0, [pc, #284]	; (8002220 <HAL_ADC_ConfigChannel+0x7b4>)
 8002104:	f7ff f9ec 	bl	80014e0 <LL_ADC_GetCommonPathInternalCh>
 8002108:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800210c:	4845      	ldr	r0, [pc, #276]	; (8002224 <HAL_ADC_ConfigChannel+0x7b8>)
 800210e:	f7ff fb27 	bl	8001760 <LL_ADC_IsEnabled>
 8002112:	4604      	mov	r4, r0
 8002114:	4844      	ldr	r0, [pc, #272]	; (8002228 <HAL_ADC_ConfigChannel+0x7bc>)
 8002116:	f7ff fb23 	bl	8001760 <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	4323      	orrs	r3, r4
 800211e:	2b00      	cmp	r3, #0
 8002120:	d15e      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a41      	ldr	r2, [pc, #260]	; (800222c <HAL_ADC_ConfigChannel+0x7c0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d127      	bne.n	800217c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800212c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d121      	bne.n	800217c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a39      	ldr	r2, [pc, #228]	; (8002224 <HAL_ADC_ConfigChannel+0x7b8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d161      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002142:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002146:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800214a:	4619      	mov	r1, r3
 800214c:	4834      	ldr	r0, [pc, #208]	; (8002220 <HAL_ADC_ConfigChannel+0x7b4>)
 800214e:	f7ff f9b4 	bl	80014ba <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002152:	4b37      	ldr	r3, [pc, #220]	; (8002230 <HAL_ADC_ConfigChannel+0x7c4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	4a36      	ldr	r2, [pc, #216]	; (8002234 <HAL_ADC_ConfigChannel+0x7c8>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800216a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 800216c:	e002      	b.n	8002174 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3b01      	subs	r3, #1
 8002172:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800217a:	e044      	b.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a2d      	ldr	r2, [pc, #180]	; (8002238 <HAL_ADC_ConfigChannel+0x7cc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d113      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002186:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800218a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10d      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a23      	ldr	r2, [pc, #140]	; (8002224 <HAL_ADC_ConfigChannel+0x7b8>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d134      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800219c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a4:	4619      	mov	r1, r3
 80021a6:	481e      	ldr	r0, [pc, #120]	; (8002220 <HAL_ADC_ConfigChannel+0x7b4>)
 80021a8:	f7ff f987 	bl	80014ba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021ac:	e02b      	b.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a22      	ldr	r2, [pc, #136]	; (800223c <HAL_ADC_ConfigChannel+0x7d0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d126      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d120      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a16      	ldr	r2, [pc, #88]	; (8002224 <HAL_ADC_ConfigChannel+0x7b8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d11b      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021d6:	4619      	mov	r1, r3
 80021d8:	4811      	ldr	r0, [pc, #68]	; (8002220 <HAL_ADC_ConfigChannel+0x7b4>)
 80021da:	f7ff f96e 	bl	80014ba <LL_ADC_SetCommonPathInternalCh>
 80021de:	e012      	b.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	f043 0220 	orr.w	r2, r3, #32
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80021f2:	e008      	b.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f043 0220 	orr.w	r2, r3, #32
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800220e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002212:	4618      	mov	r0, r3
 8002214:	37dc      	adds	r7, #220	; 0xdc
 8002216:	46bd      	mov	sp, r7
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	bf00      	nop
 800221c:	80080000 	.word	0x80080000
 8002220:	42028300 	.word	0x42028300
 8002224:	42028000 	.word	0x42028000
 8002228:	42028100 	.word	0x42028100
 800222c:	c7520000 	.word	0xc7520000
 8002230:	20000000 	.word	0x20000000
 8002234:	053e2d63 	.word	0x053e2d63
 8002238:	cb840000 	.word	0xcb840000
 800223c:	80000001 	.word	0x80000001

08002240 <LL_ADC_IsEnabled>:
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b01      	cmp	r3, #1
 8002252:	d101      	bne.n	8002258 <LL_ADC_IsEnabled+0x18>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <LL_ADC_IsEnabled+0x1a>
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr

08002266 <LL_ADC_REG_IsConversionOngoing>:
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b04      	cmp	r3, #4
 8002278:	d101      	bne.n	800227e <LL_ADC_REG_IsConversionOngoing+0x18>
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b0a1      	sub	sp, #132	; 0x84
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e089      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80022b2:	2300      	movs	r3, #0
 80022b4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80022b6:	2300      	movs	r3, #0
 80022b8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d102      	bne.n	80022ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	e001      	b.n	80022ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e068      	b.n	80023be <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff ffb9 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 80022f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ffb3 	bl	8002266 <LL_ADC_REG_IsConversionOngoing>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d14a      	bne.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002308:	2b00      	cmp	r3, #0
 800230a:	d147      	bne.n	800239c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800230c:	4b30      	ldr	r3, [pc, #192]	; (80023d0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800230e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d027      	beq.n	8002368 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232a:	035b      	lsls	r3, r3, #13
 800232c:	430b      	orrs	r3, r1
 800232e:	431a      	orrs	r2, r3
 8002330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002332:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002334:	4824      	ldr	r0, [pc, #144]	; (80023c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002336:	f7ff ff83 	bl	8002240 <LL_ADC_IsEnabled>
 800233a:	4604      	mov	r4, r0
 800233c:	4823      	ldr	r0, [pc, #140]	; (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800233e:	f7ff ff7f 	bl	8002240 <LL_ADC_IsEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	4323      	orrs	r3, r4
 8002346:	2b00      	cmp	r3, #0
 8002348:	d132      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800234a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002352:	f023 030f 	bic.w	r3, r3, #15
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6811      	ldr	r1, [r2, #0]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6892      	ldr	r2, [r2, #8]
 800235e:	430a      	orrs	r2, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002364:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002366:	e023      	b.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002372:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002374:	4814      	ldr	r0, [pc, #80]	; (80023c8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002376:	f7ff ff63 	bl	8002240 <LL_ADC_IsEnabled>
 800237a:	4604      	mov	r4, r0
 800237c:	4813      	ldr	r0, [pc, #76]	; (80023cc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800237e:	f7ff ff5f 	bl	8002240 <LL_ADC_IsEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	4323      	orrs	r3, r4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d112      	bne.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800238a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002392:	f023 030f 	bic.w	r3, r3, #15
 8002396:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002398:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800239a:	e009      	b.n	80023b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023ae:	e000      	b.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80023ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3784      	adds	r7, #132	; 0x84
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	42028000 	.word	0x42028000
 80023cc:	42028100 	.word	0x42028100
 80023d0:	42028300 	.word	0x42028300

080023d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b085      	sub	sp, #20
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f003 0307 	and.w	r3, r3, #7
 80023e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f0:	4013      	ands	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002406:	4a04      	ldr	r2, [pc, #16]	; (8002418 <__NVIC_SetPriorityGrouping+0x44>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	60d3      	str	r3, [r2, #12]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <__NVIC_GetPriorityGrouping+0x18>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	f003 0307 	and.w	r3, r3, #7
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0b      	blt.n	8002462 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800244a:	79fb      	ldrb	r3, [r7, #7]
 800244c:	f003 021f 	and.w	r2, r3, #31
 8002450:	4907      	ldr	r1, [pc, #28]	; (8002470 <__NVIC_EnableIRQ+0x38>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2001      	movs	r0, #1
 800245a:	fa00 f202 	lsl.w	r2, r0, r2
 800245e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	e000e100 	.word	0xe000e100

08002474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002474:	b480      	push	{r7}
 8002476:	b083      	sub	sp, #12
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	6039      	str	r1, [r7, #0]
 800247e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db0a      	blt.n	800249e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	b2da      	uxtb	r2, r3
 800248c:	490c      	ldr	r1, [pc, #48]	; (80024c0 <__NVIC_SetPriority+0x4c>)
 800248e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002492:	0152      	lsls	r2, r2, #5
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	440b      	add	r3, r1
 8002498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800249c:	e00a      	b.n	80024b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4908      	ldr	r1, [pc, #32]	; (80024c4 <__NVIC_SetPriority+0x50>)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	3b04      	subs	r3, #4
 80024ac:	0152      	lsls	r2, r2, #5
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	440b      	add	r3, r1
 80024b2:	761a      	strb	r2, [r3, #24]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000e100 	.word	0xe000e100
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1c3 0307 	rsb	r3, r3, #7
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	bf28      	it	cs
 80024e6:	2303      	movcs	r3, #3
 80024e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3303      	adds	r3, #3
 80024ee:	2b06      	cmp	r3, #6
 80024f0:	d902      	bls.n	80024f8 <NVIC_EncodePriority+0x30>
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3b04      	subs	r3, #4
 80024f6:	e000      	b.n	80024fa <NVIC_EncodePriority+0x32>
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43da      	mvns	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	401a      	ands	r2, r3
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	fa01 f303 	lsl.w	r3, r1, r3
 800251a:	43d9      	mvns	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	4313      	orrs	r3, r2
         );
}
 8002522:	4618      	mov	r0, r3
 8002524:	3724      	adds	r7, #36	; 0x24
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
	...

08002530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002540:	d301      	bcc.n	8002546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002542:	2301      	movs	r3, #1
 8002544:	e00f      	b.n	8002566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <SysTick_Config+0x40>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800254e:	2107      	movs	r1, #7
 8002550:	f04f 30ff 	mov.w	r0, #4294967295
 8002554:	f7ff ff8e 	bl	8002474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <SysTick_Config+0x40>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800255e:	4b04      	ldr	r3, [pc, #16]	; (8002570 <SysTick_Config+0x40>)
 8002560:	2207      	movs	r2, #7
 8002562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	e000e010 	.word	0xe000e010

08002574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff ff29 	bl	80023d4 <__NVIC_SetPriorityGrouping>
}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b086      	sub	sp, #24
 800258e:	af00      	add	r7, sp, #0
 8002590:	4603      	mov	r3, r0
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	607a      	str	r2, [r7, #4]
 8002596:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002598:	f7ff ff40 	bl	800241c <__NVIC_GetPriorityGrouping>
 800259c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68b9      	ldr	r1, [r7, #8]
 80025a2:	6978      	ldr	r0, [r7, #20]
 80025a4:	f7ff ff90 	bl	80024c8 <NVIC_EncodePriority>
 80025a8:	4602      	mov	r2, r0
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff5f 	bl	8002474 <__NVIC_SetPriority>
}
 80025b6:	bf00      	nop
 80025b8:	3718      	adds	r7, #24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff33 	bl	8002438 <__NVIC_EnableIRQ>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
 80025e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7ff ffa4 	bl	8002530 <SysTick_Config>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e08d      	b.n	8002722 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_DMA_Init+0x138>)
 800260e:	429a      	cmp	r2, r3
 8002610:	d80f      	bhi.n	8002632 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	461a      	mov	r2, r3
 8002618:	4b45      	ldr	r3, [pc, #276]	; (8002730 <HAL_DMA_Init+0x13c>)
 800261a:	4413      	add	r3, r2
 800261c:	4a45      	ldr	r2, [pc, #276]	; (8002734 <HAL_DMA_Init+0x140>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	009a      	lsls	r2, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a42      	ldr	r2, [pc, #264]	; (8002738 <HAL_DMA_Init+0x144>)
 800262e:	649a      	str	r2, [r3, #72]	; 0x48
 8002630:	e00e      	b.n	8002650 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b40      	ldr	r3, [pc, #256]	; (800273c <HAL_DMA_Init+0x148>)
 800263a:	4413      	add	r3, r2
 800263c:	4a3d      	ldr	r2, [pc, #244]	; (8002734 <HAL_DMA_Init+0x140>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	009a      	lsls	r2, r3, #2
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a3c      	ldr	r2, [pc, #240]	; (8002740 <HAL_DMA_Init+0x14c>)
 800264e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2202      	movs	r2, #2
 8002654:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002666:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 800266a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800268c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 faf2 	bl	8002c8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026b0:	d102      	bne.n	80026b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80026cc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d010      	beq.n	80026f8 <HAL_DMA_Init+0x104>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d80c      	bhi.n	80026f8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fb12 	bl	8002d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	e008      	b.n	800270a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40020407 	.word	0x40020407
 8002730:	bffdfff8 	.word	0xbffdfff8
 8002734:	cccccccd 	.word	0xcccccccd
 8002738:	40020000 	.word	0x40020000
 800273c:	bffdfbf8 	.word	0xbffdfbf8
 8002740:	40020400 	.word	0x40020400

08002744 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002752:	2300      	movs	r3, #0
 8002754:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_DMA_Start_IT+0x20>
 8002760:	2302      	movs	r3, #2
 8002762:	e066      	b.n	8002832 <HAL_DMA_Start_IT+0xee>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d155      	bne.n	8002824 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2202      	movs	r2, #2
 800277c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68b9      	ldr	r1, [r7, #8]
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fa37 	bl	8002c10 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d008      	beq.n	80027bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 020e 	orr.w	r2, r2, #14
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e00f      	b.n	80027dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 020a 	orr.w	r2, r2, #10
 80027da:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002810:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f042 0201 	orr.w	r2, r2, #1
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	e005      	b.n	8002830 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002830:	7dfb      	ldrb	r3, [r7, #23]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d008      	beq.n	8002864 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2204      	movs	r2, #4
 8002856:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e040      	b.n	80028e6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 020e 	bic.w	r2, r2, #14
 8002872:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002882:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002898:	f003 021c 	and.w	r2, r3, #28
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a0:	2101      	movs	r1, #1
 80028a2:	fa01 f202 	lsl.w	r2, r1, r2
 80028a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80028b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00c      	beq.n	80028d4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80028d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d005      	beq.n	8002916 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2204      	movs	r2, #4
 800290e:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	73fb      	strb	r3, [r7, #15]
 8002914:	e047      	b.n	80029a6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 020e 	bic.w	r2, r2, #14
 8002924:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	f003 021c 	and.w	r2, r3, #28
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002952:	2101      	movs	r1, #1
 8002954:	fa01 f202 	lsl.w	r2, r1, r2
 8002958:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002962:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00c      	beq.n	8002986 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800297a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002984:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	4798      	blx	r3
    }
  }
  return status;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	f003 031c 	and.w	r3, r3, #28
 80029d0:	2204      	movs	r2, #4
 80029d2:	409a      	lsls	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4013      	ands	r3, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d053      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xd4>
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d04e      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d024      	beq.n	8002a3e <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f8:	f003 021c 	and.w	r2, r3, #28
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a00:	2104      	movs	r1, #4
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 80c0 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002a28:	e0ba      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80b6 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002a3c:	e0b0      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0320 	and.w	r3, r3, #32
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d107      	bne.n	8002a5c <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0204 	bic.w	r2, r2, #4
 8002a5a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	f003 021c 	and.w	r2, r3, #28
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a68:	2104      	movs	r1, #4
 8002a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a6e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8093 	beq.w	8002ba0 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002a82:	e08d      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a88:	f003 031c 	and.w	r3, r3, #28
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	409a      	lsls	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d04e      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x186>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d049      	beq.n	8002b36 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d018      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06e      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ace:	e069      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d065      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ae0:	e060      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10b      	bne.n	8002b08 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 020a 	bic.w	r2, r2, #10
 8002afe:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0c:	f003 021c 	and.w	r2, r3, #28
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b14:	2102      	movs	r1, #2
 8002b16:	fa01 f202 	lsl.w	r2, r1, r2
 8002b1a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d03b      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002b34:	e036      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3a:	f003 031c 	and.w	r3, r3, #28
 8002b3e:	2208      	movs	r2, #8
 8002b40:	409a      	lsls	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02e      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x1f8>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d029      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 020e 	bic.w	r2, r2, #14
 8002b62:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	f003 021c 	and.w	r2, r3, #28
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	2101      	movs	r1, #1
 8002b72:	fa01 f202 	lsl.w	r2, r1, r2
 8002b76:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002b9e:	e002      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002ba4:	bf00      	nop
  return;
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
}
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d103      	bne.n	8002bcc <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	72fb      	strb	r3, [r7, #11]
    return status;
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
 8002bca:	e01b      	b.n	8002c04 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00d      	beq.n	8002bfa <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e003      	b.n	8002bfa <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	601a      	str	r2, [r3, #0]

  return status;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c26:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d004      	beq.n	8002c3a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002c38:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	f003 021c 	and.w	r2, r3, #28
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	2101      	movs	r1, #1
 8002c48:	fa01 f202 	lsl.w	r2, r1, r2
 8002c4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d108      	bne.n	8002c70 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8002c6e:	e007      	b.n	8002c80 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
}
 8002c80:	bf00      	nop
 8002c82:	3714      	adds	r7, #20
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d80a      	bhi.n	8002cb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cac:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6513      	str	r3, [r2, #80]	; 0x50
 8002cb4:	e007      	b.n	8002cc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002cc0:	4413      	add	r3, r2
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3b08      	subs	r3, #8
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0a      	ldr	r2, [pc, #40]	; (8002d04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	40020407 	.word	0x40020407
 8002cfc:	40020820 	.word	0x40020820
 8002d00:	cccccccd 	.word	0xcccccccd
 8002d04:	40020880 	.word	0x40020880

08002d08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002d2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2201      	movs	r2, #1
 8002d36:	409a      	lsls	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	1000823f 	.word	0x1000823f
 8002d4c:	40020940 	.word	0x40020940

08002d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d5e:	e158      	b.n	8003012 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 814a 	beq.w	800300c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f003 0303 	and.w	r3, r3, #3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d005      	beq.n	8002d90 <HAL_GPIO_Init+0x40>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d130      	bne.n	8002df2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	4013      	ands	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	693a      	ldr	r2, [r7, #16]
 8002dbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0201 	and.w	r2, r3, #1
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 0303 	and.w	r3, r3, #3
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d017      	beq.n	8002e2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	2203      	movs	r2, #3
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d123      	bne.n	8002e82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	220f      	movs	r2, #15
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	691a      	ldr	r2, [r3, #16]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	08da      	lsrs	r2, r3, #3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3208      	adds	r2, #8
 8002e7c:	6939      	ldr	r1, [r7, #16]
 8002e7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4013      	ands	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f003 0203 	and.w	r2, r3, #3
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 80a4 	beq.w	800300c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002ec4:	4a5a      	ldr	r2, [pc, #360]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	089b      	lsrs	r3, r3, #2
 8002eca:	3318      	adds	r3, #24
 8002ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	220f      	movs	r2, #15
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a52      	ldr	r2, [pc, #328]	; (8003034 <HAL_GPIO_Init+0x2e4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d025      	beq.n	8002f3c <HAL_GPIO_Init+0x1ec>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a51      	ldr	r2, [pc, #324]	; (8003038 <HAL_GPIO_Init+0x2e8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d01f      	beq.n	8002f38 <HAL_GPIO_Init+0x1e8>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a50      	ldr	r2, [pc, #320]	; (800303c <HAL_GPIO_Init+0x2ec>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d019      	beq.n	8002f34 <HAL_GPIO_Init+0x1e4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_GPIO_Init+0x2f0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d013      	beq.n	8002f30 <HAL_GPIO_Init+0x1e0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_GPIO_Init+0x2f4>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00d      	beq.n	8002f2c <HAL_GPIO_Init+0x1dc>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_GPIO_Init+0x2f8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d007      	beq.n	8002f28 <HAL_GPIO_Init+0x1d8>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a4c      	ldr	r2, [pc, #304]	; (800304c <HAL_GPIO_Init+0x2fc>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_GPIO_Init+0x1d4>
 8002f20:	2306      	movs	r3, #6
 8002f22:	e00c      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f24:	2307      	movs	r3, #7
 8002f26:	e00a      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f28:	2305      	movs	r3, #5
 8002f2a:	e008      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f2c:	2304      	movs	r3, #4
 8002f2e:	e006      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f30:	2303      	movs	r3, #3
 8002f32:	e004      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e002      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_GPIO_Init+0x1ee>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	f002 0203 	and.w	r2, r2, #3
 8002f44:	00d2      	lsls	r2, r2, #3
 8002f46:	4093      	lsls	r3, r2
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002f4e:	4938      	ldr	r1, [pc, #224]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	089b      	lsrs	r3, r3, #2
 8002f54:	3318      	adds	r3, #24
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f5c:	4b34      	ldr	r3, [pc, #208]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f80:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f86:	4b2a      	ldr	r3, [pc, #168]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002faa:	4a21      	ldr	r2, [pc, #132]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fd6:	4a16      	ldr	r2, [pc, #88]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8002fe0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4013      	ands	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_GPIO_Init+0x2e0>)
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	3301      	adds	r3, #1
 8003010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa22 f303 	lsr.w	r3, r2, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	f47f ae9f 	bne.w	8002d60 <HAL_GPIO_Init+0x10>
  }
}
 8003022:	bf00      	nop
 8003024:	bf00      	nop
 8003026:	371c      	adds	r7, #28
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	4002f400 	.word	0x4002f400
 8003034:	42020000 	.word	0x42020000
 8003038:	42020400 	.word	0x42020400
 800303c:	42020800 	.word	0x42020800
 8003040:	42020c00 	.word	0x42020c00
 8003044:	42021000 	.word	0x42021000
 8003048:	42021400 	.word	0x42021400
 800304c:	42021800 	.word	0x42021800

08003050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	807b      	strh	r3, [r7, #2]
 800305c:	4613      	mov	r3, r2
 800305e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003060:	787b      	ldrb	r3, [r7, #1]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800306c:	e002      	b.n	8003074 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800306e:	887a      	ldrh	r2, [r7, #2]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003082:	b08b      	sub	sp, #44	; 0x2c
 8003084:	af06      	add	r7, sp, #24
 8003086:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0cb      	b.n	800322a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd ffd2 	bl	8001050 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2203      	movs	r2, #3
 80030b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fda1 	bl	8006c00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e040      	b.n	8003146 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	440b      	add	r3, r1
 80030d4:	3301      	adds	r3, #1
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	4613      	mov	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	440b      	add	r3, r1
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	440b      	add	r3, r1
 80030fe:	3303      	adds	r3, #3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	440b      	add	r3, r1
 8003112:	3338      	adds	r3, #56	; 0x38
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	440b      	add	r3, r1
 8003126:	333c      	adds	r3, #60	; 0x3c
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	440b      	add	r3, r1
 800313a:	3340      	adds	r3, #64	; 0x40
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	3301      	adds	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3b9      	bcc.n	80030c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
 8003154:	e044      	b.n	80031e0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003156:	7bfa      	ldrb	r2, [r7, #15]
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	440b      	add	r3, r1
 8003164:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800316c:	7bfa      	ldrb	r2, [r7, #15]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800317e:	7bfa      	ldrb	r2, [r7, #15]
 8003180:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	440b      	add	r3, r1
 8003190:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003194:	2200      	movs	r2, #0
 8003196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003198:	7bfa      	ldrb	r2, [r7, #15]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	440b      	add	r3, r1
 80031a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	440b      	add	r3, r1
 80031bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031c4:	7bfa      	ldrb	r2, [r7, #15]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	440b      	add	r3, r1
 80031d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	3301      	adds	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d3b5      	bcc.n	8003156 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	687e      	ldr	r6, [r7, #4]
 80031f2:	466d      	mov	r5, sp
 80031f4:	f106 0410 	add.w	r4, r6, #16
 80031f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	602b      	str	r3, [r5, #0]
 8003200:	1d33      	adds	r3, r6, #4
 8003202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003204:	6838      	ldr	r0, [r7, #0]
 8003206:	f003 fd16 	bl	8006c36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d102      	bne.n	8003228 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f805 	bl	8003232 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003232 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003232:	b480      	push	{r7}
 8003234:	b085      	sub	sp, #20
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003256:	b29b      	uxth	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800326a:	b29b      	uxth	r3, r3
 800326c:	f043 0302 	orr.w	r3, r3, #2
 8003270:	b29a      	uxth	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a04      	ldr	r2, [pc, #16]	; (80032a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40007000 	.word	0x40007000

080032a8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40007000 	.word	0x40007000

080032c4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80032cc:	4b27      	ldr	r3, [pc, #156]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032d4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80032d6:	f000 f861 	bl	800339c <HAL_PWREx_SMPS_GetEffectiveMode>
 80032da:	4603      	mov	r3, r0
 80032dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e0:	d101      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e03e      	b.n	8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80032e6:	4b21      	ldr	r3, [pc, #132]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f2:	d101      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e035      	b.n	8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d101      	bne.n	8003304 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e02f      	b.n	8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800330c:	4917      	ldr	r1, [pc, #92]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4313      	orrs	r3, r2
 8003312:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	09db      	lsrs	r3, r3, #7
 8003322:	2232      	movs	r2, #50	; 0x32
 8003324:	fb02 f303 	mul.w	r3, r2, r3
 8003328:	4a13      	ldr	r2, [pc, #76]	; (8003378 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	08db      	lsrs	r3, r3, #3
 8003330:	3301      	adds	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003334:	e002      	b.n	800333c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3b01      	subs	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003348:	d102      	bne.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f2      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003350:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335c:	d101      	bne.n	8003362 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e000      	b.n	8003364 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40007000 	.word	0x40007000
 8003370:	20000000 	.word	0x20000000
 8003374:	0a7c5ac5 	.word	0x0a7c5ac5
 8003378:	cccccccd 	.word	0xcccccccd

0800337c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003380:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338a:	6053      	str	r3, [r2, #4]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40007000 	.word	0x40007000

0800339c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80033b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	e00a      	b.n	80033d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d103      	bne.n	80033cc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80033c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	e001      	b.n	80033d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80033cc:	2300      	movs	r3, #0
 80033ce:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80033d0:	687b      	ldr	r3, [r7, #4]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40007000 	.word	0x40007000

080033e4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d102      	bne.n	80033f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f000 bcc2 	b.w	8003d7c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033f8:	4b99      	ldr	r3, [pc, #612]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003402:	4b97      	ldr	r3, [pc, #604]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80e9 	beq.w	80035ec <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d006      	beq.n	800342e <HAL_RCC_OscConfig+0x4a>
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	f040 8083 	bne.w	800352e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d17f      	bne.n	800352e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342e:	4b8c      	ldr	r3, [pc, #560]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d006      	beq.n	8003448 <HAL_RCC_OscConfig+0x64>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d102      	bne.n	8003448 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	f000 bc9a 	b.w	8003d7c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800344c:	4b84      	ldr	r3, [pc, #528]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d004      	beq.n	8003462 <HAL_RCC_OscConfig+0x7e>
 8003458:	4b81      	ldr	r3, [pc, #516]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003460:	e005      	b.n	800346e <HAL_RCC_OscConfig+0x8a>
 8003462:	4b7f      	ldr	r3, [pc, #508]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003464:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003468:	091b      	lsrs	r3, r3, #4
 800346a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800346e:	4293      	cmp	r3, r2
 8003470:	d224      	bcs.n	80034bc <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	4618      	mov	r0, r3
 8003478:	f000 fe9c 	bl	80041b4 <RCC_SetFlashLatencyFromMSIRange>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d002      	beq.n	8003488 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f000 bc7a 	b.w	8003d7c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003488:	4b75      	ldr	r3, [pc, #468]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a74      	ldr	r2, [pc, #464]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b72      	ldr	r3, [pc, #456]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	496f      	ldr	r1, [pc, #444]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034a6:	4b6e      	ldr	r3, [pc, #440]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	496a      	ldr	r1, [pc, #424]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
 80034ba:	e026      	b.n	800350a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a67      	ldr	r2, [pc, #412]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034c2:	f043 0308 	orr.w	r3, r3, #8
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b65      	ldr	r3, [pc, #404]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	4962      	ldr	r1, [pc, #392]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034da:	4b61      	ldr	r3, [pc, #388]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	021b      	lsls	r3, r3, #8
 80034e8:	495d      	ldr	r1, [pc, #372]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 fe5b 	bl	80041b4 <RCC_SetFlashLatencyFromMSIRange>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f000 bc39 	b.w	8003d7c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800350a:	f000 fe17 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800350e:	4603      	mov	r3, r0
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <HAL_RCC_OscConfig+0x280>)
 8003512:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003514:	4b54      	ldr	r3, [pc, #336]	; (8003668 <HAL_RCC_OscConfig+0x284>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd ff3b 	bl	8001394 <HAL_InitTick>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d060      	beq.n	80035ea <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003528:	7bfb      	ldrb	r3, [r7, #15]
 800352a:	f000 bc27 	b.w	8003d7c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d039      	beq.n	80035aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a49      	ldr	r2, [pc, #292]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003542:	f7fd ff77 	bl	8001434 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003548:	e00f      	b.n	800356a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800354a:	f7fd ff73 	bl	8001434 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d908      	bls.n	800356a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003558:	4b41      	ldr	r3, [pc, #260]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	f000 bc09 	b.w	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356a:	4b3d      	ldr	r3, [pc, #244]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0e9      	beq.n	800354a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003576:	4b3a      	ldr	r3, [pc, #232]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a39      	ldr	r2, [pc, #228]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800357c:	f043 0308 	orr.w	r3, r3, #8
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	4934      	ldr	r1, [pc, #208]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003590:	4313      	orrs	r3, r2
 8003592:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	492f      	ldr	r1, [pc, #188]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
 80035a8:	e020      	b.n	80035ec <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035aa:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a2c      	ldr	r2, [pc, #176]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035b6:	f7fd ff3d 	bl	8001434 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035bc:	e00e      	b.n	80035dc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035be:	f7fd ff39 	bl	8001434 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d907      	bls.n	80035dc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e3cf      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035dc:	4b20      	ldr	r3, [pc, #128]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ea      	bne.n	80035be <HAL_RCC_OscConfig+0x1da>
 80035e8:	e000      	b.n	80035ec <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d07e      	beq.n	80036f6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x226>
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d10e      	bne.n	8003622 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b03      	cmp	r3, #3
 8003608:	d10b      	bne.n	8003622 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d06e      	beq.n	80036f4 <HAL_RCC_OscConfig+0x310>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d16a      	bne.n	80036f4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e3ac      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362a:	d106      	bne.n	800363a <HAL_RCC_OscConfig+0x256>
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	e024      	b.n	8003684 <HAL_RCC_OscConfig+0x2a0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003642:	d113      	bne.n	800366c <HAL_RCC_OscConfig+0x288>
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a05      	ldr	r2, [pc, #20]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 800364a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a02      	ldr	r2, [pc, #8]	; (8003660 <HAL_RCC_OscConfig+0x27c>)
 8003656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e012      	b.n	8003684 <HAL_RCC_OscConfig+0x2a0>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	20000000 	.word	0x20000000
 8003668:	20000004 	.word	0x20000004
 800366c:	4b8b      	ldr	r3, [pc, #556]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a8a      	ldr	r2, [pc, #552]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b88      	ldr	r3, [pc, #544]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a87      	ldr	r2, [pc, #540]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d019      	beq.n	80036c0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fd fed2 	bl	8001434 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003692:	e00e      	b.n	80036b2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fd fece 	bl	8001434 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d907      	bls.n	80036b2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a2:	4b7e      	ldr	r3, [pc, #504]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e364      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b2:	4b7a      	ldr	r3, [pc, #488]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0ea      	beq.n	8003694 <HAL_RCC_OscConfig+0x2b0>
 80036be:	e01a      	b.n	80036f6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fd feb8 	bl	8001434 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036c6:	e00e      	b.n	80036e6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fd feb4 	bl	8001434 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d907      	bls.n	80036e6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036d6:	4b71      	ldr	r3, [pc, #452]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e34a      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e6:	4b6d      	ldr	r3, [pc, #436]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1ea      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2e4>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d06c      	beq.n	80037dc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d005      	beq.n	8003714 <HAL_RCC_OscConfig+0x330>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d119      	bne.n	8003742 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d116      	bne.n	8003742 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003714:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_OscConfig+0x348>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e327      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800372c:	4b5b      	ldr	r3, [pc, #364]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	4958      	ldr	r1, [pc, #352]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800373c:	4313      	orrs	r3, r2
 800373e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003740:	e04c      	b.n	80037dc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d029      	beq.n	800379e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800374a:	4b54      	ldr	r3, [pc, #336]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a53      	ldr	r2, [pc, #332]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fd fe6d 	bl	8001434 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800375c:	e00e      	b.n	800377c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800375e:	f7fd fe69 	bl	8001434 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d907      	bls.n	800377c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800376c:	4b4b      	ldr	r3, [pc, #300]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e2ff      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377c:	4b47      	ldr	r3, [pc, #284]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ea      	beq.n	800375e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003788:	4b44      	ldr	r3, [pc, #272]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	4941      	ldr	r1, [pc, #260]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
 800379c:	e01e      	b.n	80037dc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379e:	4b3f      	ldr	r3, [pc, #252]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a3e      	ldr	r2, [pc, #248]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037aa:	f7fd fe43 	bl	8001434 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037b0:	e00e      	b.n	80037d0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b2:	f7fd fe3f 	bl	8001434 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d907      	bls.n	80037d0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e2d5      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037d0:	4b32      	ldr	r3, [pc, #200]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ea      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d062      	beq.n	80038ae <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	695b      	ldr	r3, [r3, #20]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d038      	beq.n	8003862 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d108      	bne.n	800380a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80037f8:	4b28      	ldr	r3, [pc, #160]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037fe:	4a27      	ldr	r2, [pc, #156]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003800:	f023 0310 	bic.w	r3, r3, #16
 8003804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003808:	e007      	b.n	800381a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003810:	4a22      	ldr	r2, [pc, #136]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f043 0310 	orr.w	r3, r3, #16
 8003816:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800381c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003820:	4a1e      	ldr	r2, [pc, #120]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fd fe03 	bl	8001434 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003830:	e00f      	b.n	8003852 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fd fdff 	bl	8001434 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b07      	cmp	r3, #7
 800383e:	d908      	bls.n	8003852 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003840:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e294      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0e8      	beq.n	8003832 <HAL_RCC_OscConfig+0x44e>
 8003860:	e025      	b.n	80038ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003862:	4b0e      	ldr	r3, [pc, #56]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003868:	4a0c      	ldr	r2, [pc, #48]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fd fddf 	bl	8001434 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003878:	e012      	b.n	80038a0 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387a:	f7fd fddb 	bl	8001434 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b07      	cmp	r3, #7
 8003886:	d90b      	bls.n	80038a0 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_RCC_OscConfig+0x4b8>)
 800388a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d004      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e270      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
 800389a:	bf00      	nop
 800389c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038a0:	4ba8      	ldr	r3, [pc, #672]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80038a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e5      	bne.n	800387a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 812d 	beq.w	8003b16 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038bc:	2300      	movs	r3, #0
 80038be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038c0:	4ba0      	ldr	r3, [pc, #640]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80038c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10d      	bne.n	80038e8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b9d      	ldr	r3, [pc, #628]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a9c      	ldr	r2, [pc, #624]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
 80038d8:	4b9a      	ldr	r3, [pc, #616]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	60bb      	str	r3, [r7, #8]
 80038e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e4:	2301      	movs	r3, #1
 80038e6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038e8:	4b97      	ldr	r3, [pc, #604]	; (8003b48 <HAL_RCC_OscConfig+0x764>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11e      	bne.n	8003932 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f4:	4b94      	ldr	r3, [pc, #592]	; (8003b48 <HAL_RCC_OscConfig+0x764>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a93      	ldr	r2, [pc, #588]	; (8003b48 <HAL_RCC_OscConfig+0x764>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003900:	f7fd fd98 	bl	8001434 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003906:	e00e      	b.n	8003926 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003908:	f7fd fd94 	bl	8001434 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d907      	bls.n	8003926 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003916:	4b8c      	ldr	r3, [pc, #560]	; (8003b48 <HAL_RCC_OscConfig+0x764>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e22a      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003926:	4b88      	ldr	r3, [pc, #544]	; (8003b48 <HAL_RCC_OscConfig+0x764>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0ea      	beq.n	8003908 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01f      	beq.n	800397e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	d010      	beq.n	800396c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800394a:	4b7e      	ldr	r3, [pc, #504]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 800394c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003950:	4a7c      	ldr	r2, [pc, #496]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003952:	f043 0304 	orr.w	r3, r3, #4
 8003956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800395a:	4b7a      	ldr	r3, [pc, #488]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	4a78      	ldr	r2, [pc, #480]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003962:	f043 0301 	orr.w	r3, r3, #1
 8003966:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800396a:	e018      	b.n	800399e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800396c:	4b75      	ldr	r3, [pc, #468]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003972:	4a74      	ldr	r2, [pc, #464]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800397c:	e00f      	b.n	800399e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800397e:	4b71      	ldr	r3, [pc, #452]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003984:	4a6f      	ldr	r2, [pc, #444]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800398e:	4b6d      	ldr	r3, [pc, #436]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	4a6b      	ldr	r2, [pc, #428]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003996:	f023 0304 	bic.w	r3, r3, #4
 800399a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d068      	beq.n	8003a78 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a6:	f7fd fd45 	bl	8001434 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039ac:	e011      	b.n	80039d2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7fd fd41 	bl	8001434 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039bc:	4293      	cmp	r3, r2
 80039be:	d908      	bls.n	80039d2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c0:	4b60      	ldr	r3, [pc, #384]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e1d4      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039d2:	4b5c      	ldr	r3, [pc, #368]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d0e6      	beq.n	80039ae <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d022      	beq.n	8003a32 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80039ec:	4b55      	ldr	r3, [pc, #340]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	4a54      	ldr	r2, [pc, #336]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 80039f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80039fc:	e011      	b.n	8003a22 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fe:	f7fd fd19 	bl	8001434 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d908      	bls.n	8003a22 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a10:	4b4c      	ldr	r3, [pc, #304]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1ac      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a22:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0e6      	beq.n	80039fe <HAL_RCC_OscConfig+0x61a>
 8003a30:	e068      	b.n	8003b04 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a32:	4b44      	ldr	r3, [pc, #272]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a38:	4a42      	ldr	r2, [pc, #264]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a42:	e011      	b.n	8003a68 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a44:	f7fd fcf6 	bl	8001434 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d908      	bls.n	8003a68 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a56:	4b3b      	ldr	r3, [pc, #236]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e189      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a68:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e6      	bne.n	8003a44 <HAL_RCC_OscConfig+0x660>
 8003a76:	e045      	b.n	8003b04 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a78:	f7fd fcdc 	bl	8001434 <HAL_GetTick>
 8003a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a7e:	e011      	b.n	8003aa4 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a80:	f7fd fcd8 	bl	8001434 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d908      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a92:	4b2c      	ldr	r3, [pc, #176]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e16b      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003ab2:	4b24      	ldr	r3, [pc, #144]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d021      	beq.n	8003b04 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003ac0:	4b20      	ldr	r3, [pc, #128]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a1f      	ldr	r2, [pc, #124]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ad0:	e011      	b.n	8003af6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd fcaf 	bl	8001434 <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d908      	bls.n	8003af6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ae4:	4b17      	ldr	r3, [pc, #92]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e142      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1e6      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b04:	7ffb      	ldrb	r3, [r7, #31]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d105      	bne.n	8003b16 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0e:	4a0d      	ldr	r2, [pc, #52]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003b10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d04f      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d028      	beq.n	8003b7c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b2a:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003b2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b30:	4a04      	ldr	r2, [pc, #16]	; (8003b44 <HAL_RCC_OscConfig+0x760>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3a:	f7fd fc7b 	bl	8001434 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b40:	e014      	b.n	8003b6c <HAL_RCC_OscConfig+0x788>
 8003b42:	bf00      	nop
 8003b44:	40021000 	.word	0x40021000
 8003b48:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b4c:	f7fd fc72 	bl	8001434 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d908      	bls.n	8003b6c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b5a:	4b8a      	ldr	r3, [pc, #552]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003b5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e107      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b6c:	4b85      	ldr	r3, [pc, #532]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003b6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0e8      	beq.n	8003b4c <HAL_RCC_OscConfig+0x768>
 8003b7a:	e022      	b.n	8003bc2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b7c:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b82:	4a80      	ldr	r2, [pc, #512]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003b84:	f023 0301 	bic.w	r3, r3, #1
 8003b88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b8c:	f7fd fc52 	bl	8001434 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b92:	e00f      	b.n	8003bb4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b94:	f7fd fc4e 	bl	8001434 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d908      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ba2:	4b78      	ldr	r3, [pc, #480]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e0e3      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bb4:	4b73      	ldr	r3, [pc, #460]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e8      	bne.n	8003b94 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80d7 	beq.w	8003d7a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bcc:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b0c      	cmp	r3, #12
 8003bd6:	f000 8091 	beq.w	8003cfc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d166      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b68      	ldr	r3, [pc, #416]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a67      	ldr	r2, [pc, #412]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fd fc21 	bl	8001434 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bf4:	e00e      	b.n	8003c14 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7fd fc1d 	bl	8001434 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d907      	bls.n	8003c14 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c04:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e0b3      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c14:	4b5b      	ldr	r3, [pc, #364]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ea      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c20:	4b58      	ldr	r3, [pc, #352]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b58      	ldr	r3, [pc, #352]	; (8003d88 <HAL_RCC_OscConfig+0x9a4>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c30:	3a01      	subs	r2, #1
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	4311      	orrs	r1, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c3a:	0212      	lsls	r2, r2, #8
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c42:	0852      	lsrs	r2, r2, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	0552      	lsls	r2, r2, #21
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003c4e:	0852      	lsrs	r2, r2, #1
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0652      	lsls	r2, r2, #25
 8003c54:	4311      	orrs	r1, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c5a:	06d2      	lsls	r2, r2, #27
 8003c5c:	430a      	orrs	r2, r1
 8003c5e:	4949      	ldr	r1, [pc, #292]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c64:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a46      	ldr	r2, [pc, #280]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c70:	4b44      	ldr	r3, [pc, #272]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a43      	ldr	r2, [pc, #268]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fd fbda 	bl	8001434 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c82:	e00e      	b.n	8003ca2 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fd fbd6 	bl	8001434 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d907      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c92:	4b3c      	ldr	r3, [pc, #240]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e06c      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ca2:	4b38      	ldr	r3, [pc, #224]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0ea      	beq.n	8003c84 <HAL_RCC_OscConfig+0x8a0>
 8003cae:	e064      	b.n	8003d7a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb0:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a33      	ldr	r2, [pc, #204]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003cb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbc:	f7fd fbba 	bl	8001434 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc2:	e00e      	b.n	8003ce2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fd fbb6 	bl	8001434 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d907      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e04c      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1ea      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	4924      	ldr	r1, [pc, #144]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003cf4:	4b25      	ldr	r3, [pc, #148]	; (8003d8c <HAL_RCC_OscConfig+0x9a8>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	60cb      	str	r3, [r1, #12]
 8003cfa:	e03e      	b.n	8003d7a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e039      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003d08:	4b1e      	ldr	r3, [pc, #120]	; (8003d84 <HAL_RCC_OscConfig+0x9a0>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f003 0203 	and.w	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d12c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d26:	3b01      	subs	r3, #1
 8003d28:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d123      	bne.n	8003d76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d11b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d113      	bne.n	8003d76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	085b      	lsrs	r3, r3, #1
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3720      	adds	r7, #32
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	019f800c 	.word	0x019f800c
 8003d8c:	feeefffc 	.word	0xfeeefffc

08003d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e11c      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b90      	ldr	r3, [pc, #576]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d910      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b8d      	ldr	r3, [pc, #564]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f023 020f 	bic.w	r2, r3, #15
 8003dbe:	498b      	ldr	r1, [pc, #556]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b89      	ldr	r3, [pc, #548]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e104      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d010      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d908      	bls.n	8003e06 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df4:	4b7e      	ldr	r3, [pc, #504]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	497b      	ldr	r1, [pc, #492]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f000 8085 	beq.w	8003f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d11f      	bne.n	8003e5c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e1c:	4b74      	ldr	r3, [pc, #464]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0da      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e2c:	f000 fa26 	bl	800427c <RCC_GetSysClockFreqFromPLLSource>
 8003e30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4a6f      	ldr	r2, [pc, #444]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d947      	bls.n	8003eca <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e3a:	4b6d      	ldr	r3, [pc, #436]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d141      	bne.n	8003eca <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e46:	4b6a      	ldr	r3, [pc, #424]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e4e:	4a68      	ldr	r2, [pc, #416]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	e036      	b.n	8003eca <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e64:	4b62      	ldr	r3, [pc, #392]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d115      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e0b6      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e7c:	4b5c      	ldr	r3, [pc, #368]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d109      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0aa      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e8c:	4b58      	ldr	r3, [pc, #352]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0a2      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003e9c:	f000 f8b0 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4a53      	ldr	r2, [pc, #332]	; (8003ff4 <HAL_RCC_ClockConfig+0x264>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d90f      	bls.n	8003eca <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003eaa:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eb6:	4b4e      	ldr	r3, [pc, #312]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ebe:	4a4c      	ldr	r2, [pc, #304]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4946      	ldr	r1, [pc, #280]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fd faaa 	bl	8001434 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e013      	b.n	8003f0c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fd faa6 	bl	8001434 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d90a      	bls.n	8003f0c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef6:	4b3e      	ldr	r3, [pc, #248]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 020c 	and.w	r2, r3, #12
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e06a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0c:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 020c 	and.w	r2, r3, #12
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d1e2      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b80      	cmp	r3, #128	; 0x80
 8003f22:	d105      	bne.n	8003f30 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f24:	4b32      	ldr	r3, [pc, #200]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a31      	ldr	r2, [pc, #196]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d010      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	4b2b      	ldr	r3, [pc, #172]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d208      	bcs.n	8003f5e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b28      	ldr	r3, [pc, #160]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4925      	ldr	r1, [pc, #148]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f5e:	4b23      	ldr	r3, [pc, #140]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d210      	bcs.n	8003f8e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6c:	4b1f      	ldr	r3, [pc, #124]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f023 020f 	bic.w	r2, r3, #15
 8003f74:	491d      	ldr	r1, [pc, #116]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <HAL_RCC_ClockConfig+0x25c>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e029      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4912      	ldr	r1, [pc, #72]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0308 	and.w	r3, r3, #8
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	490a      	ldr	r1, [pc, #40]	; (8003ff0 <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003fcc:	f000 f8b6 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <HAL_RCC_ClockConfig+0x268>)
 8003fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003fd6:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <HAL_RCC_ClockConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fd f9da 	bl	8001394 <HAL_InitTick>
 8003fe0:	4603      	mov	r3, r0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40022000 	.word	0x40022000
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	04c4b400 	.word	0x04c4b400
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	20000004 	.word	0x20000004

08004000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004000:	b480      	push	{r7}
 8004002:	b089      	sub	sp, #36	; 0x24
 8004004:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
 800400a:	2300      	movs	r3, #0
 800400c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004018:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_RCC_GetSysClockFreq+0x34>
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b0c      	cmp	r3, #12
 800402c:	d121      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d11e      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004034:	4b3d      	ldr	r3, [pc, #244]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d107      	bne.n	8004050 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004040:	4b3a      	ldr	r3, [pc, #232]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004046:	0a1b      	lsrs	r3, r3, #8
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	e005      	b.n	800405c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004050:	4b36      	ldr	r3, [pc, #216]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800405c:	4a34      	ldr	r2, [pc, #208]	; (8004130 <HAL_RCC_GetSysClockFreq+0x130>)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004064:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004070:	e00a      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b04      	cmp	r3, #4
 8004076:	d102      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_RCC_GetSysClockFreq+0x134>)
 800407a:	61bb      	str	r3, [r7, #24]
 800407c:	e004      	b.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b08      	cmp	r3, #8
 8004082:	d101      	bne.n	8004088 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <HAL_RCC_GetSysClockFreq+0x138>)
 8004086:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d146      	bne.n	800411c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004098:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	3301      	adds	r3, #1
 80040a4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d003      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0xb4>
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b03      	cmp	r3, #3
 80040b0:	d00d      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0xce>
 80040b2:	e019      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b4:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <HAL_RCC_GetSysClockFreq+0x134>)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 80040be:	68d2      	ldr	r2, [r2, #12]
 80040c0:	0a12      	lsrs	r2, r2, #8
 80040c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c6:	fb02 f303 	mul.w	r3, r2, r3
 80040ca:	617b      	str	r3, [r7, #20]
        break;
 80040cc:	e019      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ce:	4a1a      	ldr	r2, [pc, #104]	; (8004138 <HAL_RCC_GetSysClockFreq+0x138>)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 80040d8:	68d2      	ldr	r2, [r2, #12]
 80040da:	0a12      	lsrs	r2, r2, #8
 80040dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040e0:	fb02 f303 	mul.w	r3, r2, r3
 80040e4:	617b      	str	r3, [r7, #20]
        break;
 80040e6:	e00c      	b.n	8004102 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f0:	4a0e      	ldr	r2, [pc, #56]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 80040f2:	68d2      	ldr	r2, [r2, #12]
 80040f4:	0a12      	lsrs	r2, r2, #8
 80040f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040fa:	fb02 f303 	mul.w	r3, r2, r3
 80040fe:	617b      	str	r3, [r7, #20]
        break;
 8004100:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCC_GetSysClockFreq+0x12c>)
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	0e5b      	lsrs	r3, r3, #25
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	3301      	adds	r3, #1
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	fbb2 f3f3 	udiv	r3, r2, r3
 800411a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800411c:	69bb      	ldr	r3, [r7, #24]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	08006d00 	.word	0x08006d00
 8004134:	00f42400 	.word	0x00f42400
 8004138:	007a1200 	.word	0x007a1200

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004140:	f7ff ff5e 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_RCC_GetHCLKFreq+0x20>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	f003 030f 	and.w	r3, r3, #15
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <HAL_RCC_GetHCLKFreq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40021000 	.word	0x40021000
 8004160:	08006ce8 	.word	0x08006ce8

08004164 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004168:	f7ff ffe8 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800416c:	4602      	mov	r2, r0
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	0a1b      	lsrs	r3, r3, #8
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	4903      	ldr	r1, [pc, #12]	; (8004188 <HAL_RCC_GetPCLK1Freq+0x24>)
 800417a:	5ccb      	ldrb	r3, [r1, r3]
 800417c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004180:	4618      	mov	r0, r3
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40021000 	.word	0x40021000
 8004188:	08006cf8 	.word	0x08006cf8

0800418c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004190:	f7ff ffd4 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8004194:	4602      	mov	r2, r0
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	0adb      	lsrs	r3, r3, #11
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	4903      	ldr	r1, [pc, #12]	; (80041b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041a2:	5ccb      	ldrb	r3, [r1, r3]
 80041a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	08006cf8 	.word	0x08006cf8

080041b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041c0:	4b2c      	ldr	r3, [pc, #176]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041cc:	f7ff f86c 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 80041d0:	6138      	str	r0, [r7, #16]
 80041d2:	e014      	b.n	80041fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d4:	4b27      	ldr	r3, [pc, #156]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041de:	6593      	str	r3, [r2, #88]	; 0x58
 80041e0:	4b24      	ldr	r3, [pc, #144]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041ec:	f7ff f85c 	bl	80032a8 <HAL_PWREx_GetVoltageRange>
 80041f0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041f2:	4b20      	ldr	r3, [pc, #128]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	4a1f      	ldr	r2, [pc, #124]	; (8004274 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80041f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d003      	beq.n	800420c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800420a:	d10b      	bne.n	8004224 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d919      	bls.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2ba0      	cmp	r3, #160	; 0xa0
 8004216:	d902      	bls.n	800421e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004218:	2302      	movs	r3, #2
 800421a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800421c:	e013      	b.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800421e:	2301      	movs	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004222:	e010      	b.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d902      	bls.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800422a:	2303      	movs	r3, #3
 800422c:	617b      	str	r3, [r7, #20]
 800422e:	e00a      	b.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b80      	cmp	r3, #128	; 0x80
 8004234:	d102      	bne.n	800423c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004236:	2302      	movs	r3, #2
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e004      	b.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b70      	cmp	r3, #112	; 0x70
 8004240:	d101      	bne.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004242:	2301      	movs	r3, #1
 8004244:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 020f 	bic.w	r2, r3, #15
 800424e:	490a      	ldr	r1, [pc, #40]	; (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	40022000 	.word	0x40022000

0800427c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004282:	4b31      	ldr	r3, [pc, #196]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800428c:	4b2e      	ldr	r3, [pc, #184]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	091b      	lsrs	r3, r3, #4
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	3301      	adds	r3, #1
 8004298:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b03      	cmp	r3, #3
 800429e:	d015      	beq.n	80042cc <RCC_GetSysClockFreqFromPLLSource+0x50>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b03      	cmp	r3, #3
 80042a4:	d839      	bhi.n	800431a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d01c      	beq.n	80042e6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d133      	bne.n	800431a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042b2:	4a26      	ldr	r2, [pc, #152]	; (800434c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	4a23      	ldr	r2, [pc, #140]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042bc:	68d2      	ldr	r2, [r2, #12]
 80042be:	0a12      	lsrs	r2, r2, #8
 80042c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	613b      	str	r3, [r7, #16]
      break;
 80042ca:	e029      	b.n	8004320 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042cc:	4a20      	ldr	r2, [pc, #128]	; (8004350 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042d6:	68d2      	ldr	r2, [r2, #12]
 80042d8:	0a12      	lsrs	r2, r2, #8
 80042da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042de:	fb02 f303 	mul.w	r3, r2, r3
 80042e2:	613b      	str	r3, [r7, #16]
      break;
 80042e4:	e01c      	b.n	8004320 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80042e6:	4b18      	ldr	r3, [pc, #96]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f8:	0a1b      	lsrs	r3, r3, #8
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	e005      	b.n	800430e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004302:	4b11      	ldr	r3, [pc, #68]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800430e:	4a11      	ldr	r2, [pc, #68]	; (8004354 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004316:	613b      	str	r3, [r7, #16]
        break;
 8004318:	e002      	b.n	8004320 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800431a:	2300      	movs	r3, #0
 800431c:	613b      	str	r3, [r7, #16]
      break;
 800431e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004320:	4b09      	ldr	r3, [pc, #36]	; (8004348 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	0e5b      	lsrs	r3, r3, #25
 8004326:	f003 0303 	and.w	r3, r3, #3
 800432a:	3301      	adds	r3, #1
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	fbb2 f3f3 	udiv	r3, r2, r3
 8004338:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800433a:	683b      	ldr	r3, [r7, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40021000 	.word	0x40021000
 800434c:	00f42400 	.word	0x00f42400
 8004350:	007a1200 	.word	0x007a1200
 8004354:	08006d00 	.word	0x08006d00

08004358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b088      	sub	sp, #32
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004360:	2300      	movs	r3, #0
 8004362:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004364:	2300      	movs	r3, #0
 8004366:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004370:	2b00      	cmp	r3, #0
 8004372:	d040      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004378:	2b80      	cmp	r3, #128	; 0x80
 800437a:	d02a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d825      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004380:	2b60      	cmp	r3, #96	; 0x60
 8004382:	d026      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004384:	2b60      	cmp	r3, #96	; 0x60
 8004386:	d821      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d006      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800438c:	2b40      	cmp	r3, #64	; 0x40
 800438e:	d81d      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d009      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d010      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004398:	e018      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800439a:	4b8f      	ldr	r3, [pc, #572]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4a8e      	ldr	r2, [pc, #568]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043a6:	e015      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fb56 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3320      	adds	r3, #32
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fc33 	bl	8004c2c <RCCEx_PLLSAI2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	77fb      	strb	r3, [r7, #31]
        break;
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80043d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043d4:	7ffb      	ldrb	r3, [r7, #31]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043da:	4b7f      	ldr	r3, [pc, #508]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043e0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043e8:	497b      	ldr	r1, [pc, #492]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80043f0:	e001      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d047      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004406:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800440a:	d030      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x116>
 800440c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004410:	d82a      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004416:	d02a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441c:	d824      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800441e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004422:	d008      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004428:	d81e      	bhi.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800442e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004432:	d010      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004434:	e018      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004436:	4b68      	ldr	r3, [pc, #416]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4a67      	ldr	r2, [pc, #412]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004440:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004442:	e015      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3304      	adds	r3, #4
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fb08 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004454:	e00c      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3320      	adds	r3, #32
 800445a:	2100      	movs	r1, #0
 800445c:	4618      	mov	r0, r3
 800445e:	f000 fbe5 	bl	8004c2c <RCCEx_PLLSAI2_Config>
 8004462:	4603      	mov	r3, r0
 8004464:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004466:	e003      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	77fb      	strb	r3, [r7, #31]
        break;
 800446c:	e000      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800446e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004470:	7ffb      	ldrb	r3, [r7, #31]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10b      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004476:	4b58      	ldr	r3, [pc, #352]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004478:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800447c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4954      	ldr	r1, [pc, #336]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800448c:	e001      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800448e:	7ffb      	ldrb	r3, [r7, #31]
 8004490:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	f000 80ab 	beq.w	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a4:	4b4c      	ldr	r3, [pc, #304]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b49      	ldr	r3, [pc, #292]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	4a48      	ldr	r2, [pc, #288]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ba:	6593      	str	r3, [r2, #88]	; 0x58
 80044bc:	4b46      	ldr	r3, [pc, #280]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044cc:	4b43      	ldr	r3, [pc, #268]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a42      	ldr	r2, [pc, #264]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044d8:	f7fc ffac 	bl	8001434 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044de:	e00f      	b.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044e0:	f7fc ffa8 	bl	8001434 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d908      	bls.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ee:	4b3b      	ldr	r3, [pc, #236]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80044fe:	e006      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004500:	4b36      	ldr	r3, [pc, #216]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0e9      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800450c:	e000      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800450e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004510:	7ffb      	ldrb	r3, [r7, #31]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d164      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004520:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01f      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	429a      	cmp	r2, r3
 8004532:	d019      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004534:	4b28      	ldr	r3, [pc, #160]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004540:	4b25      	ldr	r3, [pc, #148]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	4a24      	ldr	r2, [pc, #144]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004550:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	4a20      	ldr	r2, [pc, #128]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004560:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01f      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fc ff5f 	bl	8001434 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004578:	e012      	b.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fc ff5b 	bl	8001434 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d909      	bls.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800458c:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800459e:	e007      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0e5      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x222>
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80045b0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80045b2:	7ffb      	ldrb	r3, [r7, #31]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	4903      	ldr	r1, [pc, #12]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045d2:	7ffb      	ldrb	r3, [r7, #31]
 80045d4:	77bb      	strb	r3, [r7, #30]
 80045d6:	e005      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e0:	7ffb      	ldrb	r3, [r7, #31]
 80045e2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045e4:	7dfb      	ldrb	r3, [r7, #23]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d105      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ea:	4b9c      	ldr	r3, [pc, #624]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ee:	4a9b      	ldr	r2, [pc, #620]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80045f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004602:	4b96      	ldr	r3, [pc, #600]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004608:	f023 0203 	bic.w	r2, r3, #3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004610:	4992      	ldr	r1, [pc, #584]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004612:	4313      	orrs	r3, r2
 8004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004624:	4b8d      	ldr	r3, [pc, #564]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462a:	f023 020c 	bic.w	r2, r3, #12
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004632:	498a      	ldr	r1, [pc, #552]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004634:	4313      	orrs	r3, r2
 8004636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004654:	4981      	ldr	r1, [pc, #516]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004656:	4313      	orrs	r3, r2
 8004658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004668:	4b7c      	ldr	r3, [pc, #496]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800466a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4979      	ldr	r1, [pc, #484]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0310 	and.w	r3, r3, #16
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800468a:	4b74      	ldr	r3, [pc, #464]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800468c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004698:	4970      	ldr	r1, [pc, #448]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0320 	and.w	r3, r3, #32
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046ac:	4b6b      	ldr	r3, [pc, #428]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ba:	4968      	ldr	r1, [pc, #416]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046ce:	4b63      	ldr	r3, [pc, #396]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046dc:	495f      	ldr	r1, [pc, #380]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00a      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046f0:	4b5a      	ldr	r3, [pc, #360]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fe:	4957      	ldr	r1, [pc, #348]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00a      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004712:	4b52      	ldr	r3, [pc, #328]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004720:	494e      	ldr	r1, [pc, #312]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d031      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800473c:	d00e      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800473e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004742:	d814      	bhi.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004744:	2b00      	cmp	r3, #0
 8004746:	d015      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800474c:	d10f      	bne.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800474e:	4b43      	ldr	r3, [pc, #268]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	4a42      	ldr	r2, [pc, #264]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004758:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800475a:	e00c      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	2100      	movs	r1, #0
 8004762:	4618      	mov	r0, r3
 8004764:	f000 f97c 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800476c:	e003      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	77fb      	strb	r3, [r7, #31]
        break;
 8004772:	e000      	b.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004776:	7ffb      	ldrb	r3, [r7, #31]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10b      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800477c:	4b37      	ldr	r3, [pc, #220]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800478a:	4934      	ldr	r1, [pc, #208]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004792:	e001      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004794:	7ffb      	ldrb	r3, [r7, #31]
 8004796:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047a4:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b2:	492a      	ldr	r1, [pc, #168]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047c6:	4b25      	ldr	r3, [pc, #148]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d4:	4921      	ldr	r1, [pc, #132]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047e8:	4b1c      	ldr	r3, [pc, #112]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f6:	4919      	ldr	r1, [pc, #100]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800480a:	4b14      	ldr	r3, [pc, #80]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800480c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004810:	f023 0203 	bic.w	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	4910      	ldr	r1, [pc, #64]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d02b      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483a:	4908      	ldr	r1, [pc, #32]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800484a:	d109      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a02      	ldr	r2, [pc, #8]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004852:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004856:	60d3      	str	r3, [r2, #12]
 8004858:	e014      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004864:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004868:	d10c      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	2101      	movs	r1, #1
 8004870:	4618      	mov	r0, r3
 8004872:	f000 f8f5 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 800487a:	7ffb      	ldrb	r3, [r7, #31]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004880:	7ffb      	ldrb	r3, [r7, #31]
 8004882:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d04a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004898:	d108      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x554>
 800489a:	4b70      	ldr	r3, [pc, #448]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800489c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048a0:	4a6e      	ldr	r2, [pc, #440]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80048aa:	e012      	b.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80048ac:	4b6b      	ldr	r3, [pc, #428]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ba:	4968      	ldr	r1, [pc, #416]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048c8:	4a64      	ldr	r2, [pc, #400]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80048ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048da:	d10d      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2101      	movs	r1, #1
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 f8bc 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80048ec:	7ffb      	ldrb	r3, [r7, #31]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d019      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80048f2:	7ffb      	ldrb	r3, [r7, #31]
 80048f4:	77bb      	strb	r3, [r7, #30]
 80048f6:	e016      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004900:	d106      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004902:	4b56      	ldr	r3, [pc, #344]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	4a55      	ldr	r2, [pc, #340]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490c:	60d3      	str	r3, [r2, #12]
 800490e:	e00a      	b.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004918:	d105      	bne.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800491a:	4b50      	ldr	r3, [pc, #320]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	4a4f      	ldr	r2, [pc, #316]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d028      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004932:	4b4a      	ldr	r3, [pc, #296]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004940:	4946      	ldr	r1, [pc, #280]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800494c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004950:	d106      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004952:	4b42      	ldr	r3, [pc, #264]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	4a41      	ldr	r2, [pc, #260]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800495c:	60d3      	str	r3, [r2, #12]
 800495e:	e011      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004964:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004968:	d10c      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3304      	adds	r3, #4
 800496e:	2101      	movs	r1, #1
 8004970:	4618      	mov	r0, r3
 8004972:	f000 f875 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800497a:	7ffb      	ldrb	r3, [r7, #31]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d001      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004980:	7ffb      	ldrb	r3, [r7, #31]
 8004982:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01e      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004990:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049a0:	492e      	ldr	r1, [pc, #184]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049b2:	d10c      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3304      	adds	r3, #4
 80049b8:	2102      	movs	r1, #2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f000 f850 	bl	8004a60 <RCCEx_PLLSAI1_Config>
 80049c0:	4603      	mov	r3, r0
 80049c2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80049c4:	7ffb      	ldrb	r3, [r7, #31]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80049ca:	7ffb      	ldrb	r3, [r7, #31]
 80049cc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049da:	4b20      	ldr	r3, [pc, #128]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049e0:	f023 0204 	bic.w	r2, r3, #4
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ea:	491c      	ldr	r1, [pc, #112]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00b      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80049fe:	4b17      	ldr	r3, [pc, #92]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a04:	f023 0218 	bic.w	r2, r3, #24
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	4913      	ldr	r1, [pc, #76]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a22:	4b0e      	ldr	r3, [pc, #56]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a32:	490a      	ldr	r1, [pc, #40]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a44:	d105      	bne.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4a04      	ldr	r2, [pc, #16]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a50:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004a52:	7fbb      	ldrb	r3, [r7, #30]
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000

08004a60 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d018      	beq.n	8004aa8 <RCCEx_PLLSAI1_Config+0x48>
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d81f      	bhi.n	8004aba <RCCEx_PLLSAI1_Config+0x5a>
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d002      	beq.n	8004a84 <RCCEx_PLLSAI1_Config+0x24>
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d009      	beq.n	8004a96 <RCCEx_PLLSAI1_Config+0x36>
 8004a82:	e01a      	b.n	8004aba <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a84:	4b65      	ldr	r3, [pc, #404]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d117      	bne.n	8004ac0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a94:	e014      	b.n	8004ac0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a96:	4b61      	ldr	r3, [pc, #388]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d110      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa6:	e00d      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004aa8:	4b5c      	ldr	r3, [pc, #368]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d109      	bne.n	8004ac8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab8:	e006      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
      break;
 8004abe:	e004      	b.n	8004aca <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ac0:	bf00      	nop
 8004ac2:	e002      	b.n	8004aca <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ac4:	bf00      	nop
 8004ac6:	e000      	b.n	8004aca <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004ac8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f040 809f 	bne.w	8004c10 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ad2:	4b52      	ldr	r3, [pc, #328]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a51      	ldr	r2, [pc, #324]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ad8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004adc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ade:	f7fc fca9 	bl	8001434 <HAL_GetTick>
 8004ae2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ae4:	e00f      	b.n	8004b06 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ae6:	f7fc fca5 	bl	8001434 <HAL_GetTick>
 8004aea:	4602      	mov	r2, r0
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d908      	bls.n	8004b06 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004af4:	4b49      	ldr	r3, [pc, #292]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d009      	beq.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004b04:	e006      	b.n	8004b14 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b06:	4b45      	ldr	r3, [pc, #276]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1e9      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x86>
 8004b12:	e000      	b.n	8004b16 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004b14:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004b16:	7bfb      	ldrb	r3, [r7, #15]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d179      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b22:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	4b3e      	ldr	r3, [pc, #248]	; (8004c20 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004b28:	4013      	ands	r3, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6892      	ldr	r2, [r2, #8]
 8004b2e:	0211      	lsls	r1, r2, #8
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	68d2      	ldr	r2, [r2, #12]
 8004b34:	06d2      	lsls	r2, r2, #27
 8004b36:	4311      	orrs	r1, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	0112      	lsls	r2, r2, #4
 8004b40:	4311      	orrs	r1, r2
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	4934      	ldr	r1, [pc, #208]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	610b      	str	r3, [r1, #16]
 8004b4e:	e033      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d118      	bne.n	8004b88 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b56:	4b31      	ldr	r3, [pc, #196]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	4b32      	ldr	r3, [pc, #200]	; (8004c24 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6892      	ldr	r2, [r2, #8]
 8004b62:	0211      	lsls	r1, r2, #8
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6912      	ldr	r2, [r2, #16]
 8004b68:	0852      	lsrs	r2, r2, #1
 8004b6a:	3a01      	subs	r2, #1
 8004b6c:	0552      	lsls	r2, r2, #21
 8004b6e:	4311      	orrs	r1, r2
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6852      	ldr	r2, [r2, #4]
 8004b74:	3a01      	subs	r2, #1
 8004b76:	0112      	lsls	r2, r2, #4
 8004b78:	4311      	orrs	r1, r2
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	4926      	ldr	r1, [pc, #152]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	610b      	str	r3, [r1, #16]
 8004b86:	e017      	b.n	8004bb8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b88:	4b24      	ldr	r3, [pc, #144]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	4b26      	ldr	r3, [pc, #152]	; (8004c28 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004b8e:	4013      	ands	r3, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6892      	ldr	r2, [r2, #8]
 8004b94:	0211      	lsls	r1, r2, #8
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6952      	ldr	r2, [r2, #20]
 8004b9a:	0852      	lsrs	r2, r2, #1
 8004b9c:	3a01      	subs	r2, #1
 8004b9e:	0652      	lsls	r2, r2, #25
 8004ba0:	4311      	orrs	r1, r2
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6852      	ldr	r2, [r2, #4]
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	4311      	orrs	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	491a      	ldr	r1, [pc, #104]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bb8:	4b18      	ldr	r3, [pc, #96]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a17      	ldr	r2, [pc, #92]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc4:	f7fc fc36 	bl	8001434 <HAL_GetTick>
 8004bc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bca:	e00f      	b.n	8004bec <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bcc:	f7fc fc32 	bl	8001434 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d908      	bls.n	8004bec <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bda:	4b10      	ldr	r3, [pc, #64]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004bea:	e006      	b.n	8004bfa <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0e9      	beq.n	8004bcc <RCCEx_PLLSAI1_Config+0x16c>
 8004bf8:	e000      	b.n	8004bfc <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004bfa:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d106      	bne.n	8004c10 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004c02:	4b06      	ldr	r3, [pc, #24]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	4904      	ldr	r1, [pc, #16]	; (8004c1c <RCCEx_PLLSAI1_Config+0x1bc>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	07ff800c 	.word	0x07ff800c
 8004c24:	ff9f800c 	.word	0xff9f800c
 8004c28:	f9ff800c 	.word	0xf9ff800c

08004c2c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d018      	beq.n	8004c74 <RCCEx_PLLSAI2_Config+0x48>
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d81f      	bhi.n	8004c86 <RCCEx_PLLSAI2_Config+0x5a>
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d002      	beq.n	8004c50 <RCCEx_PLLSAI2_Config+0x24>
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d009      	beq.n	8004c62 <RCCEx_PLLSAI2_Config+0x36>
 8004c4e:	e01a      	b.n	8004c86 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c50:	4b4a      	ldr	r3, [pc, #296]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d117      	bne.n	8004c8c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e014      	b.n	8004c8c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c62:	4b46      	ldr	r3, [pc, #280]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d110      	bne.n	8004c90 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c72:	e00d      	b.n	8004c90 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004c74:	4b41      	ldr	r3, [pc, #260]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d109      	bne.n	8004c94 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c84:	e006      	b.n	8004c94 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	73fb      	strb	r3, [r7, #15]
      break;
 8004c8a:	e004      	b.n	8004c96 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c8c:	bf00      	nop
 8004c8e:	e002      	b.n	8004c96 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c90:	bf00      	nop
 8004c92:	e000      	b.n	8004c96 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004c94:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d169      	bne.n	8004d70 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c9c:	4b37      	ldr	r3, [pc, #220]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a36      	ldr	r2, [pc, #216]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca8:	f7fc fbc4 	bl	8001434 <HAL_GetTick>
 8004cac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cae:	e00f      	b.n	8004cd0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cb0:	f7fc fbc0 	bl	8001434 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d908      	bls.n	8004cd0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cbe:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004cce:	e006      	b.n	8004cde <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004cd0:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e9      	bne.n	8004cb0 <RCCEx_PLLSAI2_Config+0x84>
 8004cdc:	e000      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8004cde:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d144      	bne.n	8004d70 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d115      	bne.n	8004d18 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cec:	4b23      	ldr	r3, [pc, #140]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004cee:	695a      	ldr	r2, [r3, #20]
 8004cf0:	4b23      	ldr	r3, [pc, #140]	; (8004d80 <RCCEx_PLLSAI2_Config+0x154>)
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	6892      	ldr	r2, [r2, #8]
 8004cf8:	0211      	lsls	r1, r2, #8
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	68d2      	ldr	r2, [r2, #12]
 8004cfe:	06d2      	lsls	r2, r2, #27
 8004d00:	4311      	orrs	r1, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6852      	ldr	r2, [r2, #4]
 8004d06:	3a01      	subs	r2, #1
 8004d08:	0112      	lsls	r2, r2, #4
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	491a      	ldr	r1, [pc, #104]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d18:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d24:	f7fc fb86 	bl	8001434 <HAL_GetTick>
 8004d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d2a:	e00f      	b.n	8004d4c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d2c:	f7fc fb82 	bl	8001434 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d908      	bls.n	8004d4c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004d46:	2303      	movs	r3, #3
 8004d48:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004d4a:	e006      	b.n	8004d5a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d4c:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0e9      	beq.n	8004d2c <RCCEx_PLLSAI2_Config+0x100>
 8004d58:	e000      	b.n	8004d5c <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004d5a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	4904      	ldr	r1, [pc, #16]	; (8004d7c <RCCEx_PLLSAI2_Config+0x150>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40021000 	.word	0x40021000
 8004d80:	07ff800c 	.word	0x07ff800c

08004d84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d066      	beq.n	8004e64 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fc f912 	bl	8000fd4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b10      	cmp	r3, #16
 8004dc4:	d045      	beq.n	8004e52 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004dc6:	4b2a      	ldr	r3, [pc, #168]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004dc8:	22ca      	movs	r2, #202	; 0xca
 8004dca:	625a      	str	r2, [r3, #36]	; 0x24
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004dce:	2253      	movs	r2, #83	; 0x53
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f872 	bl	8004ebc <RTC_EnterInitMode>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d121      	bne.n	8004e26 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004de2:	4b23      	ldr	r3, [pc, #140]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	4a22      	ldr	r2, [pc, #136]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004de8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004dec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004df0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6859      	ldr	r1, [r3, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	4319      	orrs	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	491a      	ldr	r1, [pc, #104]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	041b      	lsls	r3, r3, #16
 8004e16:	4916      	ldr	r1, [pc, #88]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f881 	bl	8004f24 <RTC_ExitInitMode>
 8004e22:	4603      	mov	r3, r0
 8004e24:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10e      	bne.n	8004e4a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004e2c:	4b10      	ldr	r3, [pc, #64]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a19      	ldr	r1, [r3, #32]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	4319      	orrs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	430b      	orrs	r3, r1
 8004e44:	490a      	ldr	r1, [pc, #40]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e4a:	4b09      	ldr	r3, [pc, #36]	; (8004e70 <HAL_RTC_Init+0xec>)
 8004e4c:	22ff      	movs	r2, #255	; 0xff
 8004e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8004e50:	e001      	b.n	8004e56 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d103      	bne.n	8004e64 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	40002800 	.word	0x40002800

08004e74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	; (8004eb4 <HAL_RTC_WaitForSynchro+0x40>)
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	; (8004eb8 <HAL_RTC_WaitForSynchro+0x44>)
 8004e80:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004e82:	f7fc fad7 	bl	8001434 <HAL_GetTick>
 8004e86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004e88:	e009      	b.n	8004e9e <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e8a:	f7fc fad3 	bl	8001434 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e98:	d901      	bls.n	8004e9e <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e006      	b.n	8004eac <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004e9e:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <HAL_RTC_WaitForSynchro+0x40>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0ef      	beq.n	8004e8a <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40002800 	.word	0x40002800
 8004eb8:	0001005c 	.word	0x0001005c

08004ebc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004ec8:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <RTC_EnterInitMode+0x64>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d120      	bne.n	8004f16 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004ed4:	4b12      	ldr	r3, [pc, #72]	; (8004f20 <RTC_EnterInitMode+0x64>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <RTC_EnterInitMode+0x64>)
 8004eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ede:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004ee0:	f7fc faa8 	bl	8001434 <HAL_GetTick>
 8004ee4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004ee6:	e00d      	b.n	8004f04 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004ee8:	f7fc faa4 	bl	8001434 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef6:	d905      	bls.n	8004f04 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2203      	movs	r2, #3
 8004f00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004f04:	4b06      	ldr	r3, [pc, #24]	; (8004f20 <RTC_EnterInitMode+0x64>)
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d102      	bne.n	8004f16 <RTC_EnterInitMode+0x5a>
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b03      	cmp	r3, #3
 8004f14:	d1e8      	bne.n	8004ee8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40002800 	.word	0x40002800

08004f24 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <RTC_ExitInitMode+0x78>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <RTC_ExitInitMode+0x78>)
 8004f36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f3a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004f3c:	4b17      	ldr	r3, [pc, #92]	; (8004f9c <RTC_ExitInitMode+0x78>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10c      	bne.n	8004f62 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff93 	bl	8004e74 <HAL_RTC_WaitForSynchro>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01e      	beq.n	8004f92 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2203      	movs	r2, #3
 8004f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	73fb      	strb	r3, [r7, #15]
 8004f60:	e017      	b.n	8004f92 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <RTC_ExitInitMode+0x78>)
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <RTC_ExitInitMode+0x78>)
 8004f68:	f023 0320 	bic.w	r3, r3, #32
 8004f6c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff ff80 	bl	8004e74 <HAL_RTC_WaitForSynchro>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2203      	movs	r2, #3
 8004f7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <RTC_ExitInitMode+0x78>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <RTC_ExitInitMode+0x78>)
 8004f8c:	f043 0320 	orr.w	r3, r3, #32
 8004f90:	6193      	str	r3, [r2, #24]
  }

  return status;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40002800 	.word	0x40002800

08004fa0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	490f      	ldr	r1, [pc, #60]	; (8004ff0 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	490c      	ldr	r1, [pc, #48]	; (8004ff4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6919      	ldr	r1, [r3, #16]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	4906      	ldr	r1, [pc, #24]	; (8004ff4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40002800 	.word	0x40002800
 8004ff4:	40003400 	.word	0x40003400

08004ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e042      	b.n	8005090 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fb fef5 	bl	8000e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2224      	movs	r2, #36	; 0x24
 8005026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0201 	bic.w	r2, r2, #1
 8005038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fbd0 	bl	80057e0 <UART_SetConfig>
 8005040:	4603      	mov	r3, r0
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e022      	b.n	8005090 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fec4 	bl	8005de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f042 0201 	orr.w	r2, r2, #1
 8005086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 ff4b 	bl	8005f24 <UART_CheckIdleState>
 800508e:	4603      	mov	r3, r0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	; 0x28
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050ac:	2b20      	cmp	r3, #32
 80050ae:	d137      	bne.n	8005120 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_UART_Receive_DMA+0x24>
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e030      	b.n	8005122 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a18      	ldr	r2, [pc, #96]	; (800512c <HAL_UART_Receive_DMA+0x94>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d01f      	beq.n	8005110 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d018      	beq.n	8005110 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	613b      	str	r3, [r7, #16]
   return(result);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	69f9      	ldr	r1, [r7, #28]
 8005102:	6a3a      	ldr	r2, [r7, #32]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	61bb      	str	r3, [r7, #24]
   return(result);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e6      	bne.n	80050de <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	461a      	mov	r2, r3
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f001 f816 	bl	8006148 <UART_Start_Receive_DMA>
 800511c:	4603      	mov	r3, r0
 800511e:	e000      	b.n	8005122 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3728      	adds	r7, #40	; 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40008000 	.word	0x40008000

08005130 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b0ba      	sub	sp, #232	; 0xe8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005156:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800515a:	f640 030f 	movw	r3, #2063	; 0x80f
 800515e:	4013      	ands	r3, r2
 8005160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005164:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d11b      	bne.n	80051a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800516c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d015      	beq.n	80051a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800517c:	f003 0320 	and.w	r3, r3, #32
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 82e3 	beq.w	8005760 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
      }
      return;
 80051a2:	e2dd      	b.n	8005760 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8123 	beq.w	80053f4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80051b2:	4b8d      	ldr	r3, [pc, #564]	; (80053e8 <HAL_UART_IRQHandler+0x2b8>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051be:	4b8b      	ldr	r3, [pc, #556]	; (80053ec <HAL_UART_IRQHandler+0x2bc>)
 80051c0:	4013      	ands	r3, r2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 8116 	beq.w	80053f4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d011      	beq.n	80051f8 <HAL_UART_IRQHandler+0xc8>
 80051d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2201      	movs	r2, #1
 80051e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f043 0201 	orr.w	r2, r3, #1
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d011      	beq.n	8005228 <HAL_UART_IRQHandler+0xf8>
 8005204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2202      	movs	r2, #2
 8005216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f043 0204 	orr.w	r2, r3, #4
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522c:	f003 0304 	and.w	r3, r3, #4
 8005230:	2b00      	cmp	r3, #0
 8005232:	d011      	beq.n	8005258 <HAL_UART_IRQHandler+0x128>
 8005234:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2204      	movs	r2, #4
 8005246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524e:	f043 0202 	orr.w	r2, r3, #2
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b00      	cmp	r3, #0
 8005262:	d017      	beq.n	8005294 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d105      	bne.n	800527c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005270:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005274:	4b5c      	ldr	r3, [pc, #368]	; (80053e8 <HAL_UART_IRQHandler+0x2b8>)
 8005276:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528a:	f043 0208 	orr.w	r2, r3, #8
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800529c:	2b00      	cmp	r3, #0
 800529e:	d012      	beq.n	80052c6 <HAL_UART_IRQHandler+0x196>
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00c      	beq.n	80052c6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 8249 	beq.w	8005764 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d013      	beq.n	8005306 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80052ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531a:	2b40      	cmp	r3, #64	; 0x40
 800531c:	d005      	beq.n	800532a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800531e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005322:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005326:	2b00      	cmp	r3, #0
 8005328:	d054      	beq.n	80053d4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fff3 	bl	8006316 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533a:	2b40      	cmp	r3, #64	; 0x40
 800533c:	d146      	bne.n	80053cc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3308      	adds	r3, #8
 8005344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005348:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800536a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800536e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005376:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1d9      	bne.n	800533e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005390:	2b00      	cmp	r3, #0
 8005392:	d017      	beq.n	80053c4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539a:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <HAL_UART_IRQHandler+0x2c0>)
 800539c:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fd faa4 	bl	80028f2 <HAL_DMA_Abort_IT>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d019      	beq.n	80053e4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80053be:	4610      	mov	r0, r2
 80053c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053c2:	e00f      	b.n	80053e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f9f5 	bl	80057b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ca:	e00b      	b.n	80053e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f9f1 	bl	80057b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053d2:	e007      	b.n	80053e4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 f9ed 	bl	80057b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80053e2:	e1bf      	b.n	8005764 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e4:	bf00      	nop
    return;
 80053e6:	e1bd      	b.n	8005764 <HAL_UART_IRQHandler+0x634>
 80053e8:	10000001 	.word	0x10000001
 80053ec:	04000120 	.word	0x04000120
 80053f0:	080065cd 	.word	0x080065cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	f040 8153 	bne.w	80056a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	f003 0310 	and.w	r3, r3, #16
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 814c 	beq.w	80056a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800540c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8145 	beq.w	80056a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2210      	movs	r2, #16
 8005420:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	f040 80bb 	bne.w	80055a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 818f 	beq.w	8005768 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005450:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005454:	429a      	cmp	r2, r3
 8005456:	f080 8187 	bcs.w	8005768 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005460:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 8087 	bne.w	8005586 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800548c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054a6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054b2:	e841 2300 	strex	r3, r2, [r1]
 80054b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1da      	bne.n	8005478 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3308      	adds	r3, #8
 80054c8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80054e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80054ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054f2:	e841 2300 	strex	r3, r2, [r1]
 80054f6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d1e1      	bne.n	80054c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3308      	adds	r3, #8
 8005504:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800550e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005510:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3308      	adds	r3, #8
 800551e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005522:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005524:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005528:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800552a:	e841 2300 	strex	r3, r2, [r1]
 800552e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005530:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e3      	bne.n	80054fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005554:	f023 0310 	bic.w	r3, r3, #16
 8005558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005566:	65bb      	str	r3, [r7, #88]	; 0x58
 8005568:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800556c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e4      	bne.n	8005544 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005580:	4618      	mov	r0, r3
 8005582:	f7fd f95a 	bl	800283a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005598:	b29b      	uxth	r3, r3
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	b29b      	uxth	r3, r3
 800559e:	4619      	mov	r1, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f911 	bl	80057c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055a6:	e0df      	b.n	8005768 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80d1 	beq.w	800576c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80055ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 80cc 	beq.w	800576c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80055e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80055f6:	647b      	str	r3, [r7, #68]	; 0x44
 80055f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e4      	bne.n	80055d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	e853 3f00 	ldrex	r3, [r3]
 8005618:	623b      	str	r3, [r7, #32]
   return(result);
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005632:	633a      	str	r2, [r7, #48]	; 0x30
 8005634:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800563a:	e841 2300 	strex	r3, r2, [r1]
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	2b00      	cmp	r3, #0
 8005644:	d1e1      	bne.n	800560a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2220      	movs	r2, #32
 800564a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	e853 3f00 	ldrex	r3, [r3]
 8005666:	60fb      	str	r3, [r7, #12]
   return(result);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0310 	bic.w	r3, r3, #16
 800566e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	461a      	mov	r2, r3
 8005678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005680:	69b9      	ldr	r1, [r7, #24]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	e841 2300 	strex	r3, r2, [r1]
 8005688:	617b      	str	r3, [r7, #20]
   return(result);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e4      	bne.n	800565a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005696:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f893 	bl	80057c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056a2:	e063      	b.n	800576c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80056a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00e      	beq.n	80056ce <HAL_UART_IRQHandler+0x59e>
 80056b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80056c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 ffc1 	bl	800664e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056cc:	e051      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80056ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d014      	beq.n	8005704 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80056da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d105      	bne.n	80056f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d008      	beq.n	8005704 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d03a      	beq.n	8005770 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	4798      	blx	r3
    }
    return;
 8005702:	e035      	b.n	8005770 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570c:	2b00      	cmp	r3, #0
 800570e:	d009      	beq.n	8005724 <HAL_UART_IRQHandler+0x5f4>
 8005710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 ff6b 	bl	80065f8 <UART_EndTransmit_IT>
    return;
 8005722:	e026      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_UART_IRQHandler+0x614>
 8005730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f000 ff9a 	bl	8006676 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005742:	e016      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d010      	beq.n	8005772 <HAL_UART_IRQHandler+0x642>
 8005750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005754:	2b00      	cmp	r3, #0
 8005756:	da0c      	bge.n	8005772 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 ff82 	bl	8006662 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800575e:	e008      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
      return;
 8005760:	bf00      	nop
 8005762:	e006      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
    return;
 8005764:	bf00      	nop
 8005766:	e004      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
      return;
 8005768:	bf00      	nop
 800576a:	e002      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
      return;
 800576c:	bf00      	nop
 800576e:	e000      	b.n	8005772 <HAL_UART_IRQHandler+0x642>
    return;
 8005770:	bf00      	nop
  }
}
 8005772:	37e8      	adds	r7, #232	; 0xe8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	460b      	mov	r3, r1
 80057d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057e4:	b08c      	sub	sp, #48	; 0x30
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	689a      	ldr	r2, [r3, #8]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	431a      	orrs	r2, r3
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	69db      	ldr	r3, [r3, #28]
 8005804:	4313      	orrs	r3, r2
 8005806:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	4baa      	ldr	r3, [pc, #680]	; (8005ab8 <UART_SetConfig+0x2d8>)
 8005810:	4013      	ands	r3, r2
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005818:	430b      	orrs	r3, r1
 800581a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a9f      	ldr	r2, [pc, #636]	; (8005abc <UART_SetConfig+0x2dc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005848:	4313      	orrs	r3, r2
 800584a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005856:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005860:	430b      	orrs	r3, r1
 8005862:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586a:	f023 010f 	bic.w	r1, r3, #15
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a90      	ldr	r2, [pc, #576]	; (8005ac0 <UART_SetConfig+0x2e0>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d125      	bne.n	80058d0 <UART_SetConfig+0xf0>
 8005884:	4b8f      	ldr	r3, [pc, #572]	; (8005ac4 <UART_SetConfig+0x2e4>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	2b03      	cmp	r3, #3
 8005890:	d81a      	bhi.n	80058c8 <UART_SetConfig+0xe8>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <UART_SetConfig+0xb8>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058b9 	.word	0x080058b9
 80058a0:	080058b1 	.word	0x080058b1
 80058a4:	080058c1 	.word	0x080058c1
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ae:	e116      	b.n	8005ade <UART_SetConfig+0x2fe>
 80058b0:	2302      	movs	r3, #2
 80058b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b6:	e112      	b.n	8005ade <UART_SetConfig+0x2fe>
 80058b8:	2304      	movs	r3, #4
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058be:	e10e      	b.n	8005ade <UART_SetConfig+0x2fe>
 80058c0:	2308      	movs	r3, #8
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c6:	e10a      	b.n	8005ade <UART_SetConfig+0x2fe>
 80058c8:	2310      	movs	r3, #16
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ce:	e106      	b.n	8005ade <UART_SetConfig+0x2fe>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a7c      	ldr	r2, [pc, #496]	; (8005ac8 <UART_SetConfig+0x2e8>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d138      	bne.n	800594c <UART_SetConfig+0x16c>
 80058da:	4b7a      	ldr	r3, [pc, #488]	; (8005ac4 <UART_SetConfig+0x2e4>)
 80058dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e0:	f003 030c 	and.w	r3, r3, #12
 80058e4:	2b0c      	cmp	r3, #12
 80058e6:	d82d      	bhi.n	8005944 <UART_SetConfig+0x164>
 80058e8:	a201      	add	r2, pc, #4	; (adr r2, 80058f0 <UART_SetConfig+0x110>)
 80058ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ee:	bf00      	nop
 80058f0:	08005925 	.word	0x08005925
 80058f4:	08005945 	.word	0x08005945
 80058f8:	08005945 	.word	0x08005945
 80058fc:	08005945 	.word	0x08005945
 8005900:	08005935 	.word	0x08005935
 8005904:	08005945 	.word	0x08005945
 8005908:	08005945 	.word	0x08005945
 800590c:	08005945 	.word	0x08005945
 8005910:	0800592d 	.word	0x0800592d
 8005914:	08005945 	.word	0x08005945
 8005918:	08005945 	.word	0x08005945
 800591c:	08005945 	.word	0x08005945
 8005920:	0800593d 	.word	0x0800593d
 8005924:	2300      	movs	r3, #0
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800592a:	e0d8      	b.n	8005ade <UART_SetConfig+0x2fe>
 800592c:	2302      	movs	r3, #2
 800592e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005932:	e0d4      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005934:	2304      	movs	r3, #4
 8005936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800593a:	e0d0      	b.n	8005ade <UART_SetConfig+0x2fe>
 800593c:	2308      	movs	r3, #8
 800593e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005942:	e0cc      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005944:	2310      	movs	r3, #16
 8005946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800594a:	e0c8      	b.n	8005ade <UART_SetConfig+0x2fe>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a5e      	ldr	r2, [pc, #376]	; (8005acc <UART_SetConfig+0x2ec>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d125      	bne.n	80059a2 <UART_SetConfig+0x1c2>
 8005956:	4b5b      	ldr	r3, [pc, #364]	; (8005ac4 <UART_SetConfig+0x2e4>)
 8005958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005960:	2b30      	cmp	r3, #48	; 0x30
 8005962:	d016      	beq.n	8005992 <UART_SetConfig+0x1b2>
 8005964:	2b30      	cmp	r3, #48	; 0x30
 8005966:	d818      	bhi.n	800599a <UART_SetConfig+0x1ba>
 8005968:	2b20      	cmp	r3, #32
 800596a:	d00a      	beq.n	8005982 <UART_SetConfig+0x1a2>
 800596c:	2b20      	cmp	r3, #32
 800596e:	d814      	bhi.n	800599a <UART_SetConfig+0x1ba>
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <UART_SetConfig+0x19a>
 8005974:	2b10      	cmp	r3, #16
 8005976:	d008      	beq.n	800598a <UART_SetConfig+0x1aa>
 8005978:	e00f      	b.n	800599a <UART_SetConfig+0x1ba>
 800597a:	2300      	movs	r3, #0
 800597c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005980:	e0ad      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005982:	2302      	movs	r3, #2
 8005984:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005988:	e0a9      	b.n	8005ade <UART_SetConfig+0x2fe>
 800598a:	2304      	movs	r3, #4
 800598c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005990:	e0a5      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005992:	2308      	movs	r3, #8
 8005994:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005998:	e0a1      	b.n	8005ade <UART_SetConfig+0x2fe>
 800599a:	2310      	movs	r3, #16
 800599c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059a0:	e09d      	b.n	8005ade <UART_SetConfig+0x2fe>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a4a      	ldr	r2, [pc, #296]	; (8005ad0 <UART_SetConfig+0x2f0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d125      	bne.n	80059f8 <UART_SetConfig+0x218>
 80059ac:	4b45      	ldr	r3, [pc, #276]	; (8005ac4 <UART_SetConfig+0x2e4>)
 80059ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059b6:	2bc0      	cmp	r3, #192	; 0xc0
 80059b8:	d016      	beq.n	80059e8 <UART_SetConfig+0x208>
 80059ba:	2bc0      	cmp	r3, #192	; 0xc0
 80059bc:	d818      	bhi.n	80059f0 <UART_SetConfig+0x210>
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d00a      	beq.n	80059d8 <UART_SetConfig+0x1f8>
 80059c2:	2b80      	cmp	r3, #128	; 0x80
 80059c4:	d814      	bhi.n	80059f0 <UART_SetConfig+0x210>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <UART_SetConfig+0x1f0>
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d008      	beq.n	80059e0 <UART_SetConfig+0x200>
 80059ce:	e00f      	b.n	80059f0 <UART_SetConfig+0x210>
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d6:	e082      	b.n	8005ade <UART_SetConfig+0x2fe>
 80059d8:	2302      	movs	r3, #2
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059de:	e07e      	b.n	8005ade <UART_SetConfig+0x2fe>
 80059e0:	2304      	movs	r3, #4
 80059e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e6:	e07a      	b.n	8005ade <UART_SetConfig+0x2fe>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ee:	e076      	b.n	8005ade <UART_SetConfig+0x2fe>
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059f6:	e072      	b.n	8005ade <UART_SetConfig+0x2fe>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a35      	ldr	r2, [pc, #212]	; (8005ad4 <UART_SetConfig+0x2f4>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d12a      	bne.n	8005a58 <UART_SetConfig+0x278>
 8005a02:	4b30      	ldr	r3, [pc, #192]	; (8005ac4 <UART_SetConfig+0x2e4>)
 8005a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a10:	d01a      	beq.n	8005a48 <UART_SetConfig+0x268>
 8005a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a16:	d81b      	bhi.n	8005a50 <UART_SetConfig+0x270>
 8005a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a1c:	d00c      	beq.n	8005a38 <UART_SetConfig+0x258>
 8005a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a22:	d815      	bhi.n	8005a50 <UART_SetConfig+0x270>
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <UART_SetConfig+0x250>
 8005a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2c:	d008      	beq.n	8005a40 <UART_SetConfig+0x260>
 8005a2e:	e00f      	b.n	8005a50 <UART_SetConfig+0x270>
 8005a30:	2300      	movs	r3, #0
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a36:	e052      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3e:	e04e      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005a40:	2304      	movs	r3, #4
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e04a      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e046      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005a50:	2310      	movs	r3, #16
 8005a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a56:	e042      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a17      	ldr	r2, [pc, #92]	; (8005abc <UART_SetConfig+0x2dc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d13a      	bne.n	8005ad8 <UART_SetConfig+0x2f8>
 8005a62:	4b18      	ldr	r3, [pc, #96]	; (8005ac4 <UART_SetConfig+0x2e4>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a70:	d01a      	beq.n	8005aa8 <UART_SetConfig+0x2c8>
 8005a72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a76:	d81b      	bhi.n	8005ab0 <UART_SetConfig+0x2d0>
 8005a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7c:	d00c      	beq.n	8005a98 <UART_SetConfig+0x2b8>
 8005a7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a82:	d815      	bhi.n	8005ab0 <UART_SetConfig+0x2d0>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <UART_SetConfig+0x2b0>
 8005a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8c:	d008      	beq.n	8005aa0 <UART_SetConfig+0x2c0>
 8005a8e:	e00f      	b.n	8005ab0 <UART_SetConfig+0x2d0>
 8005a90:	2300      	movs	r3, #0
 8005a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a96:	e022      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005a98:	2302      	movs	r3, #2
 8005a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a9e:	e01e      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aa6:	e01a      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aae:	e016      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab6:	e012      	b.n	8005ade <UART_SetConfig+0x2fe>
 8005ab8:	cfff69f3 	.word	0xcfff69f3
 8005abc:	40008000 	.word	0x40008000
 8005ac0:	40013800 	.word	0x40013800
 8005ac4:	40021000 	.word	0x40021000
 8005ac8:	40004400 	.word	0x40004400
 8005acc:	40004800 	.word	0x40004800
 8005ad0:	40004c00 	.word	0x40004c00
 8005ad4:	40005000 	.word	0x40005000
 8005ad8:	2310      	movs	r3, #16
 8005ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4ab0      	ldr	r2, [pc, #704]	; (8005da4 <UART_SetConfig+0x5c4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	f040 809b 	bne.w	8005c20 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d827      	bhi.n	8005b42 <UART_SetConfig+0x362>
 8005af2:	a201      	add	r2, pc, #4	; (adr r2, 8005af8 <UART_SetConfig+0x318>)
 8005af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b25 	.word	0x08005b25
 8005b00:	08005b2d 	.word	0x08005b2d
 8005b04:	08005b43 	.word	0x08005b43
 8005b08:	08005b33 	.word	0x08005b33
 8005b0c:	08005b43 	.word	0x08005b43
 8005b10:	08005b43 	.word	0x08005b43
 8005b14:	08005b43 	.word	0x08005b43
 8005b18:	08005b3b 	.word	0x08005b3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b1c:	f7fe fb22 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8005b20:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b22:	e014      	b.n	8005b4e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b24:	f7fe fb32 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8005b28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b2a:	e010      	b.n	8005b4e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b2c:	4b9e      	ldr	r3, [pc, #632]	; (8005da8 <UART_SetConfig+0x5c8>)
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b30:	e00d      	b.n	8005b4e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b32:	f7fe fa65 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8005b36:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b38:	e009      	b.n	8005b4e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b40:	e005      	b.n	8005b4e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b4c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8130 	beq.w	8005db6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	4a94      	ldr	r2, [pc, #592]	; (8005dac <UART_SetConfig+0x5cc>)
 8005b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b60:	461a      	mov	r2, r3
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b68:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	4413      	add	r3, r2
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d305      	bcc.n	8005b86 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d903      	bls.n	8005b8e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b8c:	e113      	b.n	8005db6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2200      	movs	r2, #0
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	60fa      	str	r2, [r7, #12]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9a:	4a84      	ldr	r2, [pc, #528]	; (8005dac <UART_SetConfig+0x5cc>)
 8005b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	603b      	str	r3, [r7, #0]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bb0:	f7fa fb40 	bl	8000234 <__aeabi_uldivmod>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	4610      	mov	r0, r2
 8005bba:	4619      	mov	r1, r3
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	020b      	lsls	r3, r1, #8
 8005bc6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bca:	0202      	lsls	r2, r0, #8
 8005bcc:	6979      	ldr	r1, [r7, #20]
 8005bce:	6849      	ldr	r1, [r1, #4]
 8005bd0:	0849      	lsrs	r1, r1, #1
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	eb12 0804 	adds.w	r8, r2, r4
 8005bdc:	eb43 0905 	adc.w	r9, r3, r5
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	469a      	mov	sl, r3
 8005be8:	4693      	mov	fp, r2
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fb1f 	bl	8000234 <__aeabi_uldivmod>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c04:	d308      	bcc.n	8005c18 <UART_SetConfig+0x438>
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0c:	d204      	bcs.n	8005c18 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a3a      	ldr	r2, [r7, #32]
 8005c14:	60da      	str	r2, [r3, #12]
 8005c16:	e0ce      	b.n	8005db6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c1e:	e0ca      	b.n	8005db6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c28:	d166      	bne.n	8005cf8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8005c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c2e:	2b08      	cmp	r3, #8
 8005c30:	d827      	bhi.n	8005c82 <UART_SetConfig+0x4a2>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <UART_SetConfig+0x458>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c65 	.word	0x08005c65
 8005c40:	08005c6d 	.word	0x08005c6d
 8005c44:	08005c83 	.word	0x08005c83
 8005c48:	08005c73 	.word	0x08005c73
 8005c4c:	08005c83 	.word	0x08005c83
 8005c50:	08005c83 	.word	0x08005c83
 8005c54:	08005c83 	.word	0x08005c83
 8005c58:	08005c7b 	.word	0x08005c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c5c:	f7fe fa82 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8005c60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c62:	e014      	b.n	8005c8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c64:	f7fe fa92 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8005c68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c6a:	e010      	b.n	8005c8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c6c:	4b4e      	ldr	r3, [pc, #312]	; (8005da8 <UART_SetConfig+0x5c8>)
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c70:	e00d      	b.n	8005c8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c72:	f7fe f9c5 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8005c76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c78:	e009      	b.n	8005c8e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c80:	e005      	b.n	8005c8e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 8090 	beq.w	8005db6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	4a44      	ldr	r2, [pc, #272]	; (8005dac <UART_SetConfig+0x5cc>)
 8005c9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ca8:	005a      	lsls	r2, r3, #1
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	441a      	add	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	2b0f      	cmp	r3, #15
 8005cc0:	d916      	bls.n	8005cf0 <UART_SetConfig+0x510>
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cc8:	d212      	bcs.n	8005cf0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	f023 030f 	bic.w	r3, r3, #15
 8005cd2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	085b      	lsrs	r3, r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	8bfb      	ldrh	r3, [r7, #30]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	8bfa      	ldrh	r2, [r7, #30]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	e062      	b.n	8005db6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cf6:	e05e      	b.n	8005db6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d828      	bhi.n	8005d52 <UART_SetConfig+0x572>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <UART_SetConfig+0x528>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d2d 	.word	0x08005d2d
 8005d0c:	08005d35 	.word	0x08005d35
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005d53 	.word	0x08005d53
 8005d18:	08005d43 	.word	0x08005d43
 8005d1c:	08005d53 	.word	0x08005d53
 8005d20:	08005d53 	.word	0x08005d53
 8005d24:	08005d53 	.word	0x08005d53
 8005d28:	08005d4b 	.word	0x08005d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d2c:	f7fe fa1a 	bl	8004164 <HAL_RCC_GetPCLK1Freq>
 8005d30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d32:	e014      	b.n	8005d5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d34:	f7fe fa2a 	bl	800418c <HAL_RCC_GetPCLK2Freq>
 8005d38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d3a:	e010      	b.n	8005d5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <UART_SetConfig+0x5c8>)
 8005d3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d40:	e00d      	b.n	8005d5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d42:	f7fe f95d 	bl	8004000 <HAL_RCC_GetSysClockFreq>
 8005d46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d48:	e009      	b.n	8005d5e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d50:	e005      	b.n	8005d5e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005d52:	2300      	movs	r3, #0
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d5c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d028      	beq.n	8005db6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d68:	4a10      	ldr	r2, [pc, #64]	; (8005dac <UART_SetConfig+0x5cc>)
 8005d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	085b      	lsrs	r3, r3, #1
 8005d7c:	441a      	add	r2, r3
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b0f      	cmp	r3, #15
 8005d8c:	d910      	bls.n	8005db0 <UART_SetConfig+0x5d0>
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d20c      	bcs.n	8005db0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60da      	str	r2, [r3, #12]
 8005da0:	e009      	b.n	8005db6 <UART_SetConfig+0x5d6>
 8005da2:	bf00      	nop
 8005da4:	40008000 	.word	0x40008000
 8005da8:	00f42400 	.word	0x00f42400
 8005dac:	08006d40 	.word	0x08006d40
      }
      else
      {
        ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005dd2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3730      	adds	r7, #48	; 0x30
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	f003 0304 	and.w	r3, r3, #4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e52:	f003 0308 	and.w	r3, r3, #8
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00a      	beq.n	8005e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00a      	beq.n	8005eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d01a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ede:	d10a      	bne.n	8005ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	605a      	str	r2, [r3, #4]
  }
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b098      	sub	sp, #96	; 0x60
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f34:	f7fb fa7e 	bl	8001434 <HAL_GetTick>
 8005f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d12f      	bne.n	8005fa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f50:	2200      	movs	r2, #0
 8005f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f88e 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d022      	beq.n	8005fa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f76:	653b      	str	r3, [r7, #80]	; 0x50
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f80:	647b      	str	r3, [r7, #68]	; 0x44
 8005f82:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e063      	b.n	8006070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b04      	cmp	r3, #4
 8005fb4:	d149      	bne.n	800604a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f857 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d03c      	beq.n	800604a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd8:	e853 3f00 	ldrex	r3, [r3]
 8005fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fee:	633b      	str	r3, [r7, #48]	; 0x30
 8005ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ff6:	e841 2300 	strex	r3, r2, [r1]
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1e6      	bne.n	8005fd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	e853 3f00 	ldrex	r3, [r3]
 8006010:	60fb      	str	r3, [r7, #12]
   return(result);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	64bb      	str	r3, [r7, #72]	; 0x48
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3308      	adds	r3, #8
 8006020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006022:	61fa      	str	r2, [r7, #28]
 8006024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006026:	69b9      	ldr	r1, [r7, #24]
 8006028:	69fa      	ldr	r2, [r7, #28]
 800602a:	e841 2300 	strex	r3, r2, [r1]
 800602e:	617b      	str	r3, [r7, #20]
   return(result);
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e5      	bne.n	8006002 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e012      	b.n	8006070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2220      	movs	r2, #32
 800604e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3758      	adds	r7, #88	; 0x58
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006088:	e049      	b.n	800611e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d045      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006092:	f7fb f9cf 	bl	8001434 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d302      	bcc.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e048      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d031      	beq.n	800611e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f003 0308 	and.w	r3, r3, #8
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d110      	bne.n	80060ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2208      	movs	r2, #8
 80060ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f920 	bl	8006316 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2208      	movs	r2, #8
 80060da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e029      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f8:	d111      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f906 	bl	8006316 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e00f      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4013      	ands	r3, r2
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	bf0c      	ite	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	2300      	movne	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	429a      	cmp	r2, r3
 800613a:	d0a6      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b096      	sub	sp, #88	; 0x58
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4613      	mov	r3, r2
 8006154:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	88fa      	ldrh	r2, [r7, #6]
 8006160:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2222      	movs	r2, #34	; 0x22
 8006170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800617a:	2b00      	cmp	r3, #0
 800617c:	d02d      	beq.n	80061da <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006184:	4a40      	ldr	r2, [pc, #256]	; (8006288 <UART_Start_Receive_DMA+0x140>)
 8006186:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800618e:	4a3f      	ldr	r2, [pc, #252]	; (800628c <UART_Start_Receive_DMA+0x144>)
 8006190:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006198:	4a3d      	ldr	r2, [pc, #244]	; (8006290 <UART_Start_Receive_DMA+0x148>)
 800619a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061a2:	2200      	movs	r2, #0
 80061a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3324      	adds	r3, #36	; 0x24
 80061b2:	4619      	mov	r1, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b8:	461a      	mov	r2, r3
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	f7fc fac2 	bl	8002744 <HAL_DMA_Start_IT>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2210      	movs	r2, #16
 80061ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e051      	b.n	800627e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d018      	beq.n	8006214 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	657b      	str	r3, [r7, #84]	; 0x54
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	461a      	mov	r2, r3
 80061fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006200:	64bb      	str	r3, [r7, #72]	; 0x48
 8006202:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800620e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e6      	bne.n	80061e2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3308      	adds	r3, #8
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	653b      	str	r3, [r7, #80]	; 0x50
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3308      	adds	r3, #8
 8006232:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006234:	637a      	str	r2, [r7, #52]	; 0x34
 8006236:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800623a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e5      	bne.n	8006214 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3308      	adds	r3, #8
 800624e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	613b      	str	r3, [r7, #16]
   return(result);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3308      	adds	r3, #8
 8006266:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006268:	623a      	str	r2, [r7, #32]
 800626a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	69f9      	ldr	r1, [r7, #28]
 800626e:	6a3a      	ldr	r2, [r7, #32]
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	61bb      	str	r3, [r7, #24]
   return(result);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e5      	bne.n	8006248 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3758      	adds	r7, #88	; 0x58
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	080063e3 	.word	0x080063e3
 800628c:	0800650f 	.word	0x0800650f
 8006290:	0800654d 	.word	0x0800654d

08006294 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006294:	b480      	push	{r7}
 8006296:	b08f      	sub	sp, #60	; 0x3c
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062bc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1e6      	bne.n	800629c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3308      	adds	r3, #8
 80062d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80062e4:	633b      	str	r3, [r7, #48]	; 0x30
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3308      	adds	r3, #8
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	61ba      	str	r2, [r7, #24]
 80062f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	613b      	str	r3, [r7, #16]
   return(result);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800630a:	bf00      	nop
 800630c:	373c      	adds	r7, #60	; 0x3c
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006316:	b480      	push	{r7}
 8006318:	b095      	sub	sp, #84	; 0x54
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006326:	e853 3f00 	ldrex	r3, [r3]
 800632a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800632c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006332:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	461a      	mov	r2, r3
 800633a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633c:	643b      	str	r3, [r7, #64]	; 0x40
 800633e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006340:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006342:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006344:	e841 2300 	strex	r3, r2, [r1]
 8006348:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800634a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1e6      	bne.n	800631e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3308      	adds	r3, #8
 8006356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006366:	f023 0301 	bic.w	r3, r3, #1
 800636a:	64bb      	str	r3, [r7, #72]	; 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800637a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800637c:	e841 2300 	strex	r3, r2, [r1]
 8006380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e3      	bne.n	8006350 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d118      	bne.n	80063c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	60bb      	str	r3, [r7, #8]
   return(result);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f023 0310 	bic.w	r3, r3, #16
 80063a4:	647b      	str	r3, [r7, #68]	; 0x44
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ae:	61bb      	str	r3, [r7, #24]
 80063b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6979      	ldr	r1, [r7, #20]
 80063b4:	69ba      	ldr	r2, [r7, #24]
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	613b      	str	r3, [r7, #16]
   return(result);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e6      	bne.n	8006390 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80063d6:	bf00      	nop
 80063d8:	3754      	adds	r7, #84	; 0x54
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b09c      	sub	sp, #112	; 0x70
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d171      	bne.n	80064e2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80063fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006400:	2200      	movs	r2, #0
 8006402:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006416:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800641a:	66bb      	str	r3, [r7, #104]	; 0x68
 800641c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006424:	65bb      	str	r3, [r7, #88]	; 0x58
 8006426:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800642a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	667b      	str	r3, [r7, #100]	; 0x64
 8006450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006458:	647a      	str	r2, [r7, #68]	; 0x44
 800645a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800645e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800646c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3308      	adds	r3, #8
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	623b      	str	r3, [r7, #32]
   return(result);
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006482:	663b      	str	r3, [r7, #96]	; 0x60
 8006484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3308      	adds	r3, #8
 800648a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800648c:	633a      	str	r2, [r7, #48]	; 0x30
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006492:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e5      	bne.n	800646c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80064a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a2:	2220      	movs	r2, #32
 80064a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d118      	bne.n	80064e2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f023 0310 	bic.w	r3, r3, #16
 80064c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	461a      	mov	r2, r3
 80064cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	69fa      	ldr	r2, [r7, #28]
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	617b      	str	r3, [r7, #20]
   return(result);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e6      	bne.n	80064b0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e4:	2200      	movs	r2, #0
 80064e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d107      	bne.n	8006500 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064f6:	4619      	mov	r1, r3
 80064f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80064fa:	f7ff f965 	bl	80057c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80064fe:	e002      	b.n	8006506 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006500:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006502:	f7ff f943 	bl	800578c <HAL_UART_RxCpltCallback>
}
 8006506:	bf00      	nop
 8006508:	3770      	adds	r7, #112	; 0x70
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b084      	sub	sp, #16
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006526:	2b01      	cmp	r3, #1
 8006528:	d109      	bne.n	800653e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006530:	085b      	lsrs	r3, r3, #1
 8006532:	b29b      	uxth	r3, r3
 8006534:	4619      	mov	r1, r3
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f7ff f946 	bl	80057c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800653c:	e002      	b.n	8006544 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f7ff f92e 	bl	80057a0 <HAL_UART_RxHalfCpltCallback>
}
 8006544:	bf00      	nop
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b086      	sub	sp, #24
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006558:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006568:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d109      	bne.n	800658c <UART_DMAError+0x40>
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b21      	cmp	r3, #33	; 0x21
 800657c:	d106      	bne.n	800658c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006586:	6978      	ldr	r0, [r7, #20]
 8006588:	f7ff fe84 	bl	8006294 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d109      	bne.n	80065ae <UART_DMAError+0x62>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2b22      	cmp	r3, #34	; 0x22
 800659e:	d106      	bne.n	80065ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80065a8:	6978      	ldr	r0, [r7, #20]
 80065aa:	f7ff feb4 	bl	8006316 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	f043 0210 	orr.w	r2, r3, #16
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065be:	6978      	ldr	r0, [r7, #20]
 80065c0:	f7ff f8f8 	bl	80057b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065c4:	bf00      	nop
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff f8e2 	bl	80057b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f0:	bf00      	nop
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	e853 3f00 	ldrex	r3, [r3]
 800660c:	60bb      	str	r3, [r7, #8]
   return(result);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	61bb      	str	r3, [r7, #24]
 8006620:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6979      	ldr	r1, [r7, #20]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	613b      	str	r3, [r7, #16]
   return(result);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e6      	bne.n	8006600 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7ff f899 	bl	8005778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006646:	bf00      	nop
 8006648:	3720      	adds	r7, #32
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr

08006676 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800668a:	b480      	push	{r7}
 800668c:	b085      	sub	sp, #20
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800669c:	2302      	movs	r3, #2
 800669e:	e027      	b.n	80066f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	; 0x24
 80066ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f022 0201 	bic.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80066ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800670c:	2b01      	cmp	r3, #1
 800670e:	d101      	bne.n	8006714 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006710:	2302      	movs	r3, #2
 8006712:	e02d      	b.n	8006770 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2201      	movs	r2, #1
 8006718:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2224      	movs	r2, #36	; 0x24
 8006720:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f022 0201 	bic.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f84f 	bl	80067f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006788:	2b01      	cmp	r3, #1
 800678a:	d101      	bne.n	8006790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800678c:	2302      	movs	r3, #2
 800678e:	e02d      	b.n	80067ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2224      	movs	r2, #36	; 0x24
 800679c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0201 	bic.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	430a      	orrs	r2, r1
 80067ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f811 	bl	80067f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68fa      	ldr	r2, [r7, #12]
 80067d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006800:	2b00      	cmp	r3, #0
 8006802:	d108      	bne.n	8006816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006814:	e031      	b.n	800687a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006816:	2308      	movs	r3, #8
 8006818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800681a:	2308      	movs	r3, #8
 800681c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	0e5b      	lsrs	r3, r3, #25
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	0f5b      	lsrs	r3, r3, #29
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800683e:	7bbb      	ldrb	r3, [r7, #14]
 8006840:	7b3a      	ldrb	r2, [r7, #12]
 8006842:	4911      	ldr	r1, [pc, #68]	; (8006888 <UARTEx_SetNbDataToProcess+0x94>)
 8006844:	5c8a      	ldrb	r2, [r1, r2]
 8006846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800684a:	7b3a      	ldrb	r2, [r7, #12]
 800684c:	490f      	ldr	r1, [pc, #60]	; (800688c <UARTEx_SetNbDataToProcess+0x98>)
 800684e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006850:	fb93 f3f2 	sdiv	r3, r3, r2
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	7b7a      	ldrb	r2, [r7, #13]
 8006860:	4909      	ldr	r1, [pc, #36]	; (8006888 <UARTEx_SetNbDataToProcess+0x94>)
 8006862:	5c8a      	ldrb	r2, [r1, r2]
 8006864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006868:	7b7a      	ldrb	r2, [r7, #13]
 800686a:	4908      	ldr	r1, [pc, #32]	; (800688c <UARTEx_SetNbDataToProcess+0x98>)
 800686c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800686e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006872:	b29a      	uxth	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	08006d58 	.word	0x08006d58
 800688c:	08006d60 	.word	0x08006d60

08006890 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006890:	b480      	push	{r7}
 8006892:	b08b      	sub	sp, #44	; 0x2c
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	fa93 f3a3 	rbit	r3, r3
 80068aa:	613b      	str	r3, [r7, #16]
  return result;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80068b6:	2320      	movs	r3, #32
 80068b8:	e003      	b.n	80068c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	fab3 f383 	clz	r3, r3
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	2103      	movs	r1, #3
 80068c6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ca:	43db      	mvns	r3, r3
 80068cc:	401a      	ands	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	fa93 f3a3 	rbit	r3, r3
 80068d8:	61fb      	str	r3, [r7, #28]
  return result;
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80068e4:	2320      	movs	r3, #32
 80068e6:	e003      	b.n	80068f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	fab3 f383 	clz	r3, r3
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	fa01 f303 	lsl.w	r3, r1, r3
 80068f8:	431a      	orrs	r2, r3
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	372c      	adds	r7, #44	; 0x2c
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800690a:	b480      	push	{r7}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	43db      	mvns	r3, r3
 800691e:	401a      	ands	r2, r3
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6879      	ldr	r1, [r7, #4]
 8006924:	fb01 f303 	mul.w	r3, r1, r3
 8006928:	431a      	orrs	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	605a      	str	r2, [r3, #4]
}
 800692e:	bf00      	nop
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800693a:	b480      	push	{r7}
 800693c:	b08b      	sub	sp, #44	; 0x2c
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	fa93 f3a3 	rbit	r3, r3
 8006954:	613b      	str	r3, [r7, #16]
  return result;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8006960:	2320      	movs	r3, #32
 8006962:	e003      	b.n	800696c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	fab3 f383 	clz	r3, r3
 800696a:	b2db      	uxtb	r3, r3
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	2103      	movs	r1, #3
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	43db      	mvns	r3, r3
 8006976:	401a      	ands	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	fa93 f3a3 	rbit	r3, r3
 8006982:	61fb      	str	r3, [r7, #28]
  return result;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d101      	bne.n	8006992 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800698e:	2320      	movs	r3, #32
 8006990:	e003      	b.n	800699a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	fab3 f383 	clz	r3, r3
 8006998:	b2db      	uxtb	r3, r3
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	fa01 f303 	lsl.w	r3, r1, r3
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80069a8:	bf00      	nop
 80069aa:	372c      	adds	r7, #44	; 0x2c
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b08b      	sub	sp, #44	; 0x2c
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	fa93 f3a3 	rbit	r3, r3
 80069ce:	613b      	str	r3, [r7, #16]
  return result;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80069da:	2320      	movs	r3, #32
 80069dc:	e003      	b.n	80069e6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	fab3 f383 	clz	r3, r3
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	2103      	movs	r1, #3
 80069ea:	fa01 f303 	lsl.w	r3, r1, r3
 80069ee:	43db      	mvns	r3, r3
 80069f0:	401a      	ands	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	fa93 f3a3 	rbit	r3, r3
 80069fc:	61fb      	str	r3, [r7, #28]
  return result;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8006a08:	2320      	movs	r3, #32
 8006a0a:	e003      	b.n	8006a14 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	fab3 f383 	clz	r3, r3
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	60da      	str	r2, [r3, #12]
}
 8006a22:	bf00      	nop
 8006a24:	372c      	adds	r7, #44	; 0x2c
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b08b      	sub	sp, #44	; 0x2c
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	fa93 f3a3 	rbit	r3, r3
 8006a48:	613b      	str	r3, [r7, #16]
  return result;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8006a54:	2320      	movs	r3, #32
 8006a56:	e003      	b.n	8006a60 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	fab3 f383 	clz	r3, r3
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	210f      	movs	r1, #15
 8006a64:	fa01 f303 	lsl.w	r3, r1, r3
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	fa93 f3a3 	rbit	r3, r3
 8006a76:	61fb      	str	r3, [r7, #28]
  return result;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006a82:	2320      	movs	r3, #32
 8006a84:	e003      	b.n	8006a8e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	fab3 f383 	clz	r3, r3
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	6879      	ldr	r1, [r7, #4]
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006a9c:	bf00      	nop
 8006a9e:	372c      	adds	r7, #44	; 0x2c
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b08b      	sub	sp, #44	; 0x2c
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	fa93 f3a3 	rbit	r3, r3
 8006ac4:	613b      	str	r3, [r7, #16]
  return result;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006ad0:	2320      	movs	r3, #32
 8006ad2:	e003      	b.n	8006adc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	fab3 f383 	clz	r3, r3
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	210f      	movs	r1, #15
 8006ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	401a      	ands	r2, r3
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	0a1b      	lsrs	r3, r3, #8
 8006aec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aee:	6a3b      	ldr	r3, [r7, #32]
 8006af0:	fa93 f3a3 	rbit	r3, r3
 8006af4:	61fb      	str	r3, [r7, #28]
  return result;
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d101      	bne.n	8006b04 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006b00:	2320      	movs	r3, #32
 8006b02:	e003      	b.n	8006b0c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	fab3 f383 	clz	r3, r3
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	fa01 f303 	lsl.w	r3, r1, r3
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006b1a:	bf00      	nop
 8006b1c:	372c      	adds	r7, #44	; 0x2c
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b088      	sub	sp, #32
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	fa93 f3a3 	rbit	r3, r3
 8006b3c:	60fb      	str	r3, [r7, #12]
  return result;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <LL_GPIO_Init+0x26>
    return 32U;
 8006b48:	2320      	movs	r3, #32
 8006b4a:	e003      	b.n	8006b54 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	fab3 f383 	clz	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006b56:	e047      	b.n	8006be8 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	fa01 f303 	lsl.w	r3, r1, r3
 8006b64:	4013      	ands	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d039      	beq.n	8006be2 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d003      	beq.n	8006b7e <LL_GPIO_Init+0x58>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d10d      	bne.n	8006b9a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	461a      	mov	r2, r3
 8006b84:	69b9      	ldr	r1, [r7, #24]
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7ff fed7 	bl	800693a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	461a      	mov	r2, r3
 8006b92:	69b9      	ldr	r1, [r7, #24]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f7ff feb8 	bl	800690a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	69b9      	ldr	r1, [r7, #24]
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff ff06 	bl	80069b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d111      	bne.n	8006bd4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006bb0:	69bb      	ldr	r3, [r7, #24]
 8006bb2:	2bff      	cmp	r3, #255	; 0xff
 8006bb4:	d807      	bhi.n	8006bc6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	69b9      	ldr	r1, [r7, #24]
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7ff ff35 	bl	8006a2e <LL_GPIO_SetAFPin_0_7>
 8006bc4:	e006      	b.n	8006bd4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	69b9      	ldr	r1, [r7, #24]
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff ff6a 	bl	8006aa8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	69b9      	ldr	r1, [r7, #24]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f7ff fe57 	bl	8006890 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	3301      	adds	r3, #1
 8006be6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	fa22 f303 	lsr.w	r3, r2, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1b0      	bne.n	8006b58 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3720      	adds	r7, #32
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006c08:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006c0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	43db      	mvns	r3, r3
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4013      	ands	r3, r2
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006c36:	b084      	sub	sp, #16
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	f107 0014 	add.w	r0, r7, #20
 8006c44:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	370c      	adds	r7, #12
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	b004      	add	sp, #16
 8006c76:	4770      	bx	lr

08006c78 <__libc_init_array>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4d0d      	ldr	r5, [pc, #52]	; (8006cb0 <__libc_init_array+0x38>)
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4c0d      	ldr	r4, [pc, #52]	; (8006cb4 <__libc_init_array+0x3c>)
 8006c80:	1b64      	subs	r4, r4, r5
 8006c82:	10a4      	asrs	r4, r4, #2
 8006c84:	42a6      	cmp	r6, r4
 8006c86:	d109      	bne.n	8006c9c <__libc_init_array+0x24>
 8006c88:	4d0b      	ldr	r5, [pc, #44]	; (8006cb8 <__libc_init_array+0x40>)
 8006c8a:	2600      	movs	r6, #0
 8006c8c:	4c0b      	ldr	r4, [pc, #44]	; (8006cbc <__libc_init_array+0x44>)
 8006c8e:	f000 f81f 	bl	8006cd0 <_init>
 8006c92:	1b64      	subs	r4, r4, r5
 8006c94:	10a4      	asrs	r4, r4, #2
 8006c96:	42a6      	cmp	r6, r4
 8006c98:	d105      	bne.n	8006ca6 <__libc_init_array+0x2e>
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca0:	3601      	adds	r6, #1
 8006ca2:	4798      	blx	r3
 8006ca4:	e7ee      	b.n	8006c84 <__libc_init_array+0xc>
 8006ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006caa:	3601      	adds	r6, #1
 8006cac:	4798      	blx	r3
 8006cae:	e7f2      	b.n	8006c96 <__libc_init_array+0x1e>
 8006cb0:	08006d70 	.word	0x08006d70
 8006cb4:	08006d70 	.word	0x08006d70
 8006cb8:	08006d70 	.word	0x08006d70
 8006cbc:	08006d78 	.word	0x08006d78

08006cc0 <memset>:
 8006cc0:	4402      	add	r2, r0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d100      	bne.n	8006cca <memset+0xa>
 8006cc8:	4770      	bx	lr
 8006cca:	f803 1b01 	strb.w	r1, [r3], #1
 8006cce:	e7f9      	b.n	8006cc4 <memset+0x4>

08006cd0 <_init>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	bf00      	nop
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr

08006cdc <_fini>:
 8006cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cde:	bf00      	nop
 8006ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ce2:	bc08      	pop	{r3}
 8006ce4:	469e      	mov	lr, r3
 8006ce6:	4770      	bx	lr
